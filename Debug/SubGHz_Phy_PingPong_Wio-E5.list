
SubGHz_Phy_PingPong_Wio-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f8  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800bb30  0800bb30  0000cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bec0  0800bec0  0000d01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bec8  0800bec8  0000d01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bec8  0800bec8  0000cec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800becc  0800becc  0000cecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800bed0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000001c  0800beec  0000d01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  0800beec  0000d680  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4c6  00000000  00000000  0000d046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000531b  00000000  00000000  0002c50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00031828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168c  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa46  00000000  00000000  00034c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa25  00000000  00000000  000546e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1d9a  00000000  00000000  00074107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125ea1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a80  00000000  00000000  00125ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0012d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800bb18 	.word	0x0800bb18

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800bb18 	.word	0x0800bb18

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 f85b 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f80d 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f92b 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 f917 	bl	8000744 <MX_DMA_Init>
  MX_RTC_Init();
 8000516:	f000 f865 	bl	80005e4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f8c7 	bl	80006ac <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 800051e:	f00a f804 	bl	800a52a <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000522:	f00a f80a 	bl	800a53a <MX_SubGHz_Phy_Process>
 8000526:	e7fc      	b.n	8000522 <main+0x20>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09a      	sub	sp, #104	@ 0x68
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2248      	movs	r2, #72	@ 0x48
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f00b fac2 	bl	800bac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054e:	f001 ffc5 	bl	80024dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff90 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <SystemClock_Config+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000560:	4a1f      	ldr	r2, [pc, #124]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <SystemClock_Config+0xb8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000574:	232c      	movs	r3, #44	@ 0x2c
 8000576:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2381      	movs	r3, #129	@ 0x81
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000580:	2300      	movs	r3, #0
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000584:	23b0      	movs	r3, #176	@ 0xb0
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f002 faeb 	bl	8002b74 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a4:	f000 f93a 	bl	800081c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005a8:	234f      	movs	r3, #79	@ 0x4f
 80005aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fe56 	bl	8003278 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d2:	f000 f923 	bl	800081c <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3768      	adds	r7, #104	@ 0x68
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	58000400 	.word	0x58000400

080005e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	@ 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	222c      	movs	r2, #44	@ 0x2c
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f00b fa65 	bl	800bac0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f6:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_RTC_Init+0x9c>)
 80005f8:	4a22      	ldr	r2, [pc, #136]	@ (8000684 <MX_RTC_Init+0xa0>)
 80005fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_RTC_Init+0x9c>)
 80005fe:	221f      	movs	r2, #31
 8000600:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000602:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_RTC_Init+0x9c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_RTC_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_RTC_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000614:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_RTC_Init+0x9c>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_RTC_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_RTC_Init+0x9c>)
 8000624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800062a:	4815      	ldr	r0, [pc, #84]	@ (8000680 <MX_RTC_Init+0x9c>)
 800062c:	f003 fae0 	bl	8003bf0 <HAL_RTC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000636:	f000 f8f1 	bl	800081c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <MX_RTC_Init+0x9c>)
 800063c:	f003 fdd6 	bl	80041ec <HAL_RTCEx_SetSSRU_IT>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000646:	f000 f8e9 	bl	800081c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000656:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800065a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_RTC_Init+0x9c>)
 800066a:	f003 fb43 	bl	8003cf4 <HAL_RTC_SetAlarm_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 f8d2 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3730      	adds	r7, #48	@ 0x30
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000038 	.word	0x20000038
 8000684:	40002800 	.word	0x40002800

08000688 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_SUBGHZ_Init+0x20>)
 800068e:	2208      	movs	r2, #8
 8000690:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_SUBGHZ_Init+0x20>)
 8000694:	f003 fed2 	bl	800443c <HAL_SUBGHZ_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800069e:	f000 f8bd 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000070 	.word	0x20000070

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f4:	4811      	ldr	r0, [pc, #68]	@ (800073c <MX_USART1_UART_Init+0x90>)
 80006f6:	f004 fae2 	bl	8004cbe <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f88c 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_USART1_UART_Init+0x90>)
 8000708:	f006 fc05 	bl	8006f16 <HAL_UARTEx_SetTxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f883 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <MX_USART1_UART_Init+0x90>)
 800071a:	f006 fc3a 	bl	8006f92 <HAL_UARTEx_SetRxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f87a 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_USART1_UART_Init+0x90>)
 800072a:	f006 fbb9 	bl	8006ea0 <HAL_UARTEx_EnableFifoMode>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f872 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000007c 	.word	0x2000007c
 8000740:	40013800 	.word	0x40013800

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff feaa 	bl	80004a2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fea7 	bl	80004a2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2102      	movs	r1, #2
 8000758:	200f      	movs	r0, #15
 800075a:	f001 f858 	bl	800180e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800075e:	200f      	movs	r0, #15
 8000760:	f001 f86f 	bl	8001842 <HAL_NVIC_EnableIRQ>

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fea8 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2004      	movs	r0, #4
 8000784:	f7ff fea5 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff fea2 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|PROB2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000794:	4820      	ldr	r0, [pc, #128]	@ (8000818 <MX_GPIO_Init+0xb0>)
 8000796:	f001 fe89 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PROB1_GPIO_Port, PROB1_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2101      	movs	r1, #1
 800079e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a2:	f001 fe83 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4817      	ldr	r0, [pc, #92]	@ (8000818 <MX_GPIO_Init+0xb0>)
 80007bc:	f001 fc48 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROB1_Pin */
  GPIO_InitStruct.Pin = PROB1_Pin;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PROB1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f001 fc3a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	480a      	ldr	r0, [pc, #40]	@ (8000818 <MX_GPIO_Init+0xb0>)
 80007f0:	f001 fc2e 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROB2_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin;
 80007f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PROB2_GPIO_Port, &GPIO_InitStruct);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <MX_GPIO_Init+0xb0>)
 800080c:	f001 fc20 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	48000400 	.word	0x48000400

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800082e:	2201      	movs	r2, #1
 8000830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	58000400 	.word	0x58000400

08000840 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800085c:	f000 fed0 	bl	8001600 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000860:	f7ff ffe2 	bl	8000828 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 fecb 	bl	8002600 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000872:	f000 fed3 	bl	800161c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000876:	f000 fdf9 	bl	800146c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000882:	f000 febd 	bl	8001600 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000886:	2101      	movs	r1, #1
 8000888:	2000      	movs	r0, #0
 800088a:	f001 fe35 	bl	80024f8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}

08000892 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000896:	f000 fec1 	bl	800161c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <LL_AHB2_GRP1_EnableClock>:
{
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800092c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800095a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	43db      	mvns	r3, r3
 8000960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000964:	4013      	ands	r3, r2
 8000966:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000972:	b480      	push	{r7}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800097a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800098a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4013      	ands	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	@ 0x40
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2238      	movs	r2, #56	@ 0x38
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00b f87d 	bl	800bac0 <memset>
  if(hrtc->Instance==RTC)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a16      	ldr	r2, [pc, #88]	@ (8000a24 <HAL_RTC_MspInit+0x74>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d125      	bne.n	8000a1c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 ffeb 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80009ec:	f7ff ff16 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009f0:	f7ff ff55 	bl	800089e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009f4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80009f8:	f7ff ff79 	bl	80008ee <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 ff04 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 ff1b 	bl	8001842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	202a      	movs	r0, #42	@ 0x2a
 8000a12:	f000 fefc 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a16:	202a      	movs	r0, #42	@ 0x2a
 8000a18:	f000 ff13 	bl	8001842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3740      	adds	r7, #64	@ 0x40
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40002800 	.word	0x40002800

08000a28 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff9e 	bl	8000972 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2032      	movs	r0, #50	@ 0x32
 8000a3c:	f000 fee7 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000a40:	2032      	movs	r0, #50	@ 0x32
 8000a42:	f000 fefe 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	@ 0x58
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2238      	movs	r2, #56	@ 0x38
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00b f825 	bl	800bac0 <memset>
  if(huart->Instance==USART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <HAL_UART_MspInit+0xe8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d156      	bne.n	8000b2e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a84:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000a88:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 ff94 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff febf 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000aa2:	f7ff ff3c 	bl	800091e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff ff09 	bl	80008be <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8000aac:	23c0      	movs	r3, #192	@ 0xc0
 8000aae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000abc:	2307      	movs	r3, #7
 8000abe:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <HAL_UART_MspInit+0xec>)
 8000ac8:	f001 fac2 	bl	8002050 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ace:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <HAL_UART_MspInit+0xf4>)
 8000ad0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ad4:	2212      	movs	r2, #18
 8000ad6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ada:	2210      	movs	r2, #16
 8000adc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ae6:	2280      	movs	r2, #128	@ 0x80
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b02:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000b04:	f000 feba 	bl	800187c <HAL_DMA_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000b0e:	f7ff fe85 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000b16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000b18:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <HAL_UART_MspInit+0xf0>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	2024      	movs	r0, #36	@ 0x24
 8000b24:	f000 fe73 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b28:	2024      	movs	r0, #36	@ 0x24
 8000b2a:	f000 fe8a 	bl	8001842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	@ 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	20000110 	.word	0x20000110
 8000b44:	40020058 	.word	0x40020058

08000b48 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <HAL_UART_MspDeInit+0x3c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10f      	bne.n	8000b7a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000b5a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b5e:	f7ff fef6 	bl	800094e <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8000b62:	21c0      	movs	r1, #192	@ 0xc0
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <HAL_UART_MspDeInit+0x40>)
 8000b66:	f001 fbd3 	bl	8002310 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ff2c 	bl	80019cc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000b74:	2024      	movs	r0, #36	@ 0x24
 8000b76:	f000 fe72 	bl	800185e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013800 	.word	0x40013800
 8000b88:	48000400 	.word	0x48000400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000bea:	f003 fb3b 	bl	8004264 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000038 	.word	0x20000038

08000bf8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <DMA1_Channel5_IRQHandler+0x10>)
 8000bfe:	f001 f8b7 	bl	8001d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000110 	.word	0x20000110

08000c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <USART1_IRQHandler+0x10>)
 8000c12:	f004 f971 	bl	8004ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000007c 	.word	0x2000007c

08000c20 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <RTC_Alarm_IRQHandler+0x10>)
 8000c26:	f003 f9cd 	bl	8003fc4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000038 	.word	0x20000038

08000c34 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000c3a:	f003 fe81 	bl	8004940 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000070 	.word	0x20000070

08000c48 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	608b      	str	r3, [r1, #8]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
	...

08000c70 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ffe7 	bl	8000c48 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000c7a:	f00a f9fd 	bl	800b078 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <SystemApp_Init+0x38>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000c84:	f000 f8b6 	bl	8000df4 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000c88:	f00a fc86 	bl	800b598 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <SystemApp_Init+0x3c>)
 8000c8e:	f00a fd1f 	bl	800b6d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f00a fd2a 	bl	800b6ec <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000c98:	f009 fcf6 	bl	800a688 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f009 fd32 	bl	800a708 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000170 	.word	0x20000170
 8000cac:	08000cbd 	.word	0x08000cbd

08000cb0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000cb4:	f009 fd58 	bl	800a768 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f009 fdf6 	bl	800a8bc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <TimestampNow+0x3c>)
 8000cda:	2110      	movs	r1, #16
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f81d 	bl	8000d1c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fa48 	bl	8000178 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800bb30 	.word	0x0800bb30

08000cfc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000d00:	2101      	movs	r1, #1
 8000d02:	2002      	movs	r0, #2
 8000d04:	f009 fcd0 	bl	800a6a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2002      	movs	r0, #2
 8000d14:	f009 fcc8 	bl	800a6a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000d1c:	b40c      	push	{r2, r3}
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f009 ff0d 	bl	800ab54 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d44:	b002      	add	sp, #8
 8000d46:	4770      	bx	lr

08000d48 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_GetTick+0x24>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000d6e:	f000 f945 	bl	8000ffc <TIMER_IF_GetTimerValue>
 8000d72:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000170 	.word	0x20000170

08000d84 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f9bb 	bl	800110a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <LL_AHB2_GRP1_EnableClock>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000daa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000dda:	4905      	ldr	r1, [pc, #20]	@ (8000df0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	58000800 	.word	0x58000800

08000df4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000dfa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000dfe:	f7ff ffe5 	bl	8000dcc <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000e02:	f000 fc19 	bl	8001638 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000e06:	f000 fc1d 	bl	8001644 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000e0a:	f000 fc21 	bl	8001650 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff ffb7 	bl	8000d9c <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff ffb4 	bl	8000d9c <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000e34:	2301      	movs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f001 f906 	bl	8002050 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <DBG_Init+0x80>)
 8000e50:	f001 f8fe 	bl	8002050 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 fb26 	bl	80024ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <DBG_Init+0x80>)
 8000e68:	f001 fb20 	bl	80024ac <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000400 	.word	0x48000400

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <TIMER_IF_Init+0x5c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01b      	beq.n	8000eec <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <TIMER_IF_Init+0x60>)
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000ebc:	f7ff fb92 	bl	80005e4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000ec0:	f000 f856 	bl	8000f70 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <TIMER_IF_Init+0x60>)
 8000eca:	f003 f81f 	bl	8003f0c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <TIMER_IF_Init+0x60>)
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed4:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000ed6:	4809      	ldr	r0, [pc, #36]	@ (8000efc <TIMER_IF_Init+0x60>)
 8000ed8:	f003 f956 	bl	8004188 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f9d3 	bl	8001288 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000ee2:	f000 f85f 	bl	8000fa4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <TIMER_IF_Init+0x5c>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000171 	.word	0x20000171
 8000efc:	20000038 	.word	0x20000038

08000f00 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	222c      	movs	r2, #44	@ 0x2c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00a fdd2 	bl	800bac0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000f1c:	f000 f828 	bl	8000f70 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <TIMER_IF_StartTimer+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000f38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f3c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <TIMER_IF_StartTimer+0x6c>)
 8000f4e:	f002 fed1 	bl	8003cf4 <HAL_RTC_SetAlarm_IT>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000f58:	f7ff fc60 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	@ 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000174 	.word	0x20000174
 8000f6c:	20000038 	.word	0x20000038

08000f70 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <TIMER_IF_StopTimer+0x2c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <TIMER_IF_StopTimer+0x30>)
 8000f86:	f002 ffc1 	bl	8003f0c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <TIMER_IF_StopTimer+0x30>)
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40002800 	.word	0x40002800
 8000fa0:	20000038 	.word	0x20000038

08000fa4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000fa8:	f000 f98e 	bl	80012c8 <GetTimerTicks>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a03      	ldr	r2, [pc, #12]	@ (8000fbc <TIMER_IF_SetTimerContext+0x18>)
 8000fb0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000fb2:	4b02      	ldr	r3, [pc, #8]	@ (8000fbc <TIMER_IF_SetTimerContext+0x18>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000174 	.word	0x20000174

08000fc0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	@ (8000fd0 <TIMER_IF_GetTimerContext+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000174 	.word	0x20000174

08000fd4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000fde:	f000 f973 	bl	80012c8 <GetTimerTicks>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000174 	.word	0x20000174

08000ffc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <TIMER_IF_GetTimerValue+0x24>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800100e:	f000 f95b 	bl	80012c8 <GetTimerTicks>
 8001012:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000171 	.word	0x20000171

08001024 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800103e:	b5b0      	push	{r4, r5, r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001046:	2100      	movs	r1, #0
 8001048:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2000      	movs	r0, #0
 800104e:	460a      	mov	r2, r1
 8001050:	4603      	mov	r3, r0
 8001052:	0d95      	lsrs	r5, r2, #22
 8001054:	0294      	lsls	r4, r2, #10
 8001056:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff f891 	bl	8000188 <__aeabi_uldivmod>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4613      	mov	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}

08001078 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001082:	2100      	movs	r1, #0
 8001084:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2000      	movs	r0, #0
 800108a:	460c      	mov	r4, r1
 800108c:	4605      	mov	r5, r0
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f04f 0a00 	mov.w	sl, #0
 8001096:	f04f 0b00 	mov.w	fp, #0
 800109a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800109e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80010a2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80010a6:	4650      	mov	r0, sl
 80010a8:	4659      	mov	r1, fp
 80010aa:	1b02      	subs	r2, r0, r4
 80010ac:	eb61 0305 	sbc.w	r3, r1, r5
 80010b0:	f04f 0000 	mov.w	r0, #0
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	0099      	lsls	r1, r3, #2
 80010ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80010be:	0090      	lsls	r0, r2, #2
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	eb12 0804 	adds.w	r8, r2, r4
 80010c8:	eb43 0905 	adc.w	r9, r3, r5
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	4690      	mov	r8, r2
 80010e2:	4699      	mov	r9, r3
 80010e4:	4640      	mov	r0, r8
 80010e6:	4649      	mov	r1, r9
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	0a82      	lsrs	r2, r0, #10
 80010f2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80010f6:	0a8b      	lsrs	r3, r1, #10
 80010f8:	4613      	mov	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001108:	4770      	bx	lr

0800110a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff93 	bl	800103e <TIMER_IF_Convert_ms2Tick>
 8001118:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800111a:	f000 f8d5 	bl	80012c8 <GetTimerTicks>
 800111e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001120:	e000      	b.n	8001124 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001122:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001124:	f000 f8d0 	bl	80012c8 <GetTimerTicks>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f6      	bhi.n	8001122 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001146:	f00a f8e5 	bl	800b314 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800115a:	f000 f8a5 	bl	80012a8 <TIMER_IF_BkUp_Read_MSBticks>
 800115e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f88f 	bl	8001288 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001172:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001180:	f000 f8a2 	bl	80012c8 <GetTimerTicks>
 8001184:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001186:	f000 f88f 	bl	80012a8 <TIMER_IF_BkUp_Read_MSBticks>
 800118a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	60fa      	str	r2, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	000b      	movs	r3, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011a4:	2000      	movs	r0, #0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4605      	mov	r5, r0
 80011aa:	eb12 0804 	adds.w	r8, r2, r4
 80011ae:	eb43 0905 	adc.w	r9, r3, r5
 80011b2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80011b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	0a82      	lsrs	r2, r0, #10
 80011c4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80011c8:	0a8b      	lsrs	r3, r1, #10
 80011ca:	4613      	mov	r3, r2
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2200      	movs	r2, #0
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80011dc:	f04f 0b00 	mov.w	fp, #0
 80011e0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff46 	bl	8001078 <TIMER_IF_Convert_Tick2ms>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80011f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3730      	adds	r7, #48	@ 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001200 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	2100      	movs	r1, #0
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800120e:	f003 f84d 	bl	80042ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000038 	.word	0x20000038

08001220 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	2101      	movs	r1, #1
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800122e:	f003 f83d 	bl	80042ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000038 	.word	0x20000038

08001240 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800124a:	2100      	movs	r1, #0
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800124e:	f003 f845 	bl	80042dc <HAL_RTCEx_BKUPRead>
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000038 	.word	0x20000038

08001264 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800126e:	2101      	movs	r1, #1
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001272:	f003 f833 	bl	80042dc <HAL_RTCEx_BKUPRead>
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000038 	.word	0x20000038

08001288 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	2102      	movs	r1, #2
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001296:	f003 f809 	bl	80042ac <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000038 	.word	0x20000038

080012a8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80012ae:	2102      	movs	r1, #2
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80012b2:	f003 f813 	bl	80042dc <HAL_RTCEx_BKUPRead>
 80012b6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80012b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000038 	.word	0x20000038

080012c8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <GetTimerTicks+0x34>)
 80012d0:	f7ff fdd8 	bl	8000e84 <LL_RTC_TIME_GetSubSecond>
 80012d4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80012d6:	e003      	b.n	80012e0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <GetTimerTicks+0x34>)
 80012da:	f7ff fdd3 	bl	8000e84 <LL_RTC_TIME_GetSubSecond>
 80012de:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80012e0:	4806      	ldr	r0, [pc, #24]	@ (80012fc <GetTimerTicks+0x34>)
 80012e2:	f7ff fdcf 	bl	8000e84 <LL_RTC_TIME_GetSubSecond>
 80012e6:	4602      	mov	r2, r0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d1f4      	bne.n	80012d8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40002800 	.word	0x40002800

08001300 <LL_APB2_GRP1_ForceReset>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800130e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4313      	orrs	r3, r2
 8001316:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <LL_APB2_GRP1_ReleaseReset>:
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	43db      	mvns	r3, r3
 8001334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001338:	4013      	ands	r3, r2
 800133a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <LL_EXTI_EnableIT_0_31>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <LL_EXTI_EnableIT_0_31+0x24>)
 8001352:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001356:	4905      	ldr	r1, [pc, #20]	@ (800136c <LL_EXTI_EnableIT_0_31+0x24>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	58000800 	.word	0x58000800

08001370 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001378:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <vcom_Init+0x28>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800137e:	f7ff f9e1 	bl	8000744 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001382:	f7ff f993 	bl	80006ac <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8001386:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800138a:	f7ff ffdd 	bl	8001348 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800138e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000017c 	.word	0x2000017c

0800139c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80013a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013a4:	f7ff ffac 	bl	8001300 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80013a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013ac:	f7ff ffb9 	bl	8001322 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <vcom_DeInit+0x28>)
 80013b2:	f7ff fbc9 	bl	8000b48 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 fa51 	bl	800185e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80013bc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000007c 	.word	0x2000007c

080013c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	461a      	mov	r2, r3
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4804      	ldr	r0, [pc, #16]	@ (80013ec <vcom_Trace_DMA+0x24>)
 80013dc:	f003 fd0c 	bl	8004df8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80013e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000007c 	.word	0x2000007c

080013f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80013f8:	4a19      	ldr	r2, [pc, #100]	@ (8001460 <vcom_ReceiveInit+0x70>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80013fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001402:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	e893 0006 	ldmia.w	r3, {r1, r2}
 800140c:	4815      	ldr	r0, [pc, #84]	@ (8001464 <vcom_ReceiveInit+0x74>)
 800140e:	f005 fcba 	bl	8006d86 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001412:	bf00      	nop
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <vcom_ReceiveInit+0x74>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001422:	d0f7      	beq.n	8001414 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001424:	bf00      	nop
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <vcom_ReceiveInit+0x74>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001434:	d1f7      	bne.n	8001426 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <vcom_ReceiveInit+0x74>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <vcom_ReceiveInit+0x74>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001444:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001446:	4807      	ldr	r0, [pc, #28]	@ (8001464 <vcom_ReceiveInit+0x74>)
 8001448:	f005 fcf8 	bl	8006e3c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	4906      	ldr	r1, [pc, #24]	@ (8001468 <vcom_ReceiveInit+0x78>)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <vcom_ReceiveInit+0x74>)
 8001452:	f003 fc85 	bl	8004d60 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001456:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000180 	.word	0x20000180
 8001464:	2000007c 	.word	0x2000007c
 8001468:	20000178 	.word	0x20000178

0800146c <vcom_Resume>:

void vcom_Resume(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <vcom_Resume+0x28>)
 8001472:	f003 fc24 	bl	8004cbe <HAL_UART_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <vcom_Resume+0x14>
  {
    Error_Handler();
 800147c:	f7ff f9ce 	bl	800081c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <vcom_Resume+0x2c>)
 8001482:	f000 f9fb 	bl	800187c <HAL_DMA_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <vcom_Resume+0x24>
  {
    Error_Handler();
 800148c:	f7ff f9c6 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000007c 	.word	0x2000007c
 8001498:	20000110 	.word	0x20000110

0800149c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_UART_TxCpltCallback+0x24>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d103      	bne.n	80014b6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_UART_TxCpltCallback+0x28>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2000      	movs	r0, #0
 80014b4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40013800 	.word	0x40013800
 80014c4:	2000017c 	.word	0x2000017c

080014c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <HAL_UART_RxCpltCallback+0x44>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d113      	bne.n	8001502 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <HAL_UART_RxCpltCallback+0x48>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00a      	beq.n	80014f8 <HAL_UART_RxCpltCallback+0x30>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_UART_RxCpltCallback+0x48>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4807      	ldr	r0, [pc, #28]	@ (8001514 <HAL_UART_RxCpltCallback+0x4c>)
 80014f6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	4906      	ldr	r1, [pc, #24]	@ (8001514 <HAL_UART_RxCpltCallback+0x4c>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f003 fc2f 	bl	8004d60 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013800 	.word	0x40013800
 8001510:	20000180 	.word	0x20000180
 8001514:	20000178 	.word	0x20000178

08001518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001518:	480d      	ldr	r0, [pc, #52]	@ (8001550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800151c:	f7ff fcac 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001546:	f00a fac3 	bl	800bad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7fe ffda 	bl	8000502 <main>

0800154e <LoopForever>:

LoopForever:
    b LoopForever
 800154e:	e7fe      	b.n	800154e <LoopForever>
  ldr   r0, =_estack
 8001550:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800155c:	0800bed0 	.word	0x0800bed0
  ldr r2, =_sbss
 8001560:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001564:	20000680 	.word	0x20000680

08001568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6053      	str	r3, [r2, #4]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e0042000 	.word	0xe0042000

08001588 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6053      	str	r3, [r2, #4]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	e0042000 	.word	0xe0042000

080015a4 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a03      	ldr	r2, [pc, #12]	@ (80015bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6053      	str	r3, [r2, #4]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	e0042000 	.word	0xe0042000

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 f914 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80015d0:	f002 f816 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_Init+0x3c>)
 80015d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015da:	200f      	movs	r0, #15
 80015dc:	f7ff fbb4 	bl	8000d48 <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e001      	b.n	80015f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ec:	f7ff f9d9 	bl	80009a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000

08001600 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <HAL_SuspendTick+0x18>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <HAL_SuspendTick+0x18>)
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <HAL_ResumeTick+0x18>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <HAL_ResumeTick+0x18>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800163c:	f7ff ff96 	bl	800156c <LL_DBGMCU_EnableDBGSleepMode>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001648:	f7ff ff9e 	bl	8001588 <LL_DBGMCU_EnableDBGStopMode>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001654:	f7ff ffa6 	bl	80015a4 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4906      	ldr	r1, [pc, #24]	@ (80016f4 <__NVIC_EnableIRQ+0x34>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db12      	blt.n	8001730 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	490a      	ldr	r1, [pc, #40]	@ (800173c <__NVIC_DisableIRQ+0x44>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	3320      	adds	r3, #32
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001724:	f3bf 8f4f 	dsb	sy
}
 8001728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800172a:	f3bf 8f6f 	isb	sy
}
 800172e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff2b 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff42 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ffb4 	bl	8001794 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff83 	bl	8001740 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff35 	bl	80016c0 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff43 	bl	80016f8 <__NVIC_DisableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e08e      	b.n	80019ac <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_DMA_Init+0x138>)
 8001896:	429a      	cmp	r2, r3
 8001898:	d80f      	bhi.n	80018ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <HAL_DMA_Init+0x13c>)
 80018a2:	4413      	add	r3, r2
 80018a4:	4a45      	ldr	r2, [pc, #276]	@ (80019bc <HAL_DMA_Init+0x140>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	009a      	lsls	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a42      	ldr	r2, [pc, #264]	@ (80019c0 <HAL_DMA_Init+0x144>)
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80018b8:	e00e      	b.n	80018d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <HAL_DMA_Init+0x148>)
 80018c2:	4413      	add	r3, r2
 80018c4:	4a3d      	ldr	r2, [pc, #244]	@ (80019bc <HAL_DMA_Init+0x140>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	009a      	lsls	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a3c      	ldr	r2, [pc, #240]	@ (80019c8 <HAL_DMA_Init+0x14c>)
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018f2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fb24 	bl	8001f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001938:	d102      	bne.n	8001940 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800194c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001956:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_DMA_Init+0x106>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d80c      	bhi.n	8001982 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fb4d 	bl	8002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e008      	b.n	8001994 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40020407 	.word	0x40020407
 80019b8:	bffdfff8 	.word	0xbffdfff8
 80019bc:	cccccccd 	.word	0xcccccccd
 80019c0:	40020000 	.word	0x40020000
 80019c4:	bffdfbf8 	.word	0xbffdfbf8
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07b      	b.n	8001ad6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_DMA_DeInit+0x114>)
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d80f      	bhi.n	8001a1a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_DMA_DeInit+0x118>)
 8001a02:	4413      	add	r3, r2
 8001a04:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <HAL_DMA_DeInit+0x11c>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a35      	ldr	r2, [pc, #212]	@ (8001aec <HAL_DMA_DeInit+0x120>)
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a18:	e00e      	b.n	8001a38 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_DMA_DeInit+0x124>)
 8001a22:	4413      	add	r3, r2
 8001a24:	4a30      	ldr	r2, [pc, #192]	@ (8001ae8 <HAL_DMA_DeInit+0x11c>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	009a      	lsls	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a2f      	ldr	r2, [pc, #188]	@ (8001af4 <HAL_DMA_DeInit+0x128>)
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f003 021c 	and.w	r2, r3, #28
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fa8f 	bl	8001f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00f      	beq.n	8001a94 <HAL_DMA_DeInit+0xc8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d80b      	bhi.n	8001a94 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fac3 	bl	8002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a92:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020407 	.word	0x40020407
 8001ae4:	bffdfff8 	.word	0xbffdfff8
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	40020000 	.word	0x40020000
 8001af0:	bffdfbf8 	.word	0xbffdfbf8
 8001af4:	40020400 	.word	0x40020400

08001af8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_DMA_Start_IT+0x20>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e069      	b.n	8001bec <HAL_DMA_Start_IT+0xf4>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d155      	bne.n	8001bd8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f9d3 	bl	8001efc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 020e 	orr.w	r2, r2, #14
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e00f      	b.n	8001b90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 020a 	orr.w	r2, r2, #10
 8001b8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e008      	b.n	8001bea <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e04f      	b.n	8001ca6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d008      	beq.n	8001c24 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e040      	b.n	8001ca6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 020e 	bic.w	r2, r2, #14
 8001c32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c58:	f003 021c 	and.w	r2, r3, #28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d005      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e047      	b.n	8001d64 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020e 	bic.w	r2, r2, #14
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f003 021c 	and.w	r2, r3, #28
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
    }
  }
  return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f003 031c 	and.w	r3, r3, #28
 8001d90:	2204      	movs	r2, #4
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d027      	beq.n	8001dec <HAL_DMA_IRQHandler+0x7c>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d022      	beq.n	8001dec <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0204 	bic.w	r2, r2, #4
 8001dc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	f003 021c 	and.w	r2, r3, #28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8081 	beq.w	8001ee4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001dea:	e07b      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	f003 031c 	and.w	r3, r3, #28
 8001df4:	2202      	movs	r2, #2
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03d      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x10c>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d038      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020a 	bic.w	r2, r2, #10
 8001e26:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_DMA_IRQHandler+0x180>)
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d909      	bls.n	8001e50 <HAL_DMA_IRQHandler+0xe0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	f003 031c 	and.w	r3, r3, #28
 8001e44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef4 <HAL_DMA_IRQHandler+0x184>)
 8001e46:	2102      	movs	r1, #2
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	6053      	str	r3, [r2, #4]
 8001e4e:	e008      	b.n	8001e62 <HAL_DMA_IRQHandler+0xf2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	f003 031c 	and.w	r3, r3, #28
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_DMA_IRQHandler+0x188>)
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d038      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e7a:	e033      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f003 031c 	and.w	r3, r3, #28
 8001e84:	2208      	movs	r2, #8
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02a      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x176>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d025      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 020e 	bic.w	r2, r2, #14
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f003 021c 	and.w	r2, r3, #28
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
}
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020080 	.word	0x40020080
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020000 	.word	0x40020000

08001efc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f003 021c 	and.w	r2, r3, #28
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d108      	bne.n	8001f5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f5a:	e007      	b.n	8001f6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d813      	bhi.n	8001fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f98:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3b08      	subs	r3, #8
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e011      	b.n	8001fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001fbe:	4413      	add	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001fdc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40020407 	.word	0x40020407
 8001ffc:	cccccccd 	.word	0xcccccccd
 8002000:	4002081c 	.word	0x4002081c
 8002004:	40020880 	.word	0x40020880

08002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002018:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a08      	ldr	r2, [pc, #32]	@ (800204c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800202c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3b01      	subs	r3, #1
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2201      	movs	r2, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	1000823f 	.word	0x1000823f
 800204c:	40020940 	.word	0x40020940

08002050 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e140      	b.n	80022e2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8132 	beq.w	80022dc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_GPIO_Init+0x40>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d017      	beq.n	800212e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d123      	bne.n	8002182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0203 	and.w	r2, r3, #3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 808c 	beq.w	80022dc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_Init+0x1bc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a44      	ldr	r2, [pc, #272]	@ (8002304 <HAL_GPIO_Init+0x2b4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x1b8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a43      	ldr	r2, [pc, #268]	@ (8002308 <HAL_GPIO_Init+0x2b8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_Init+0x1b4>
 8002200:	2302      	movs	r3, #2
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1be>
 8002204:	2307      	movs	r3, #7
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1be>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1be>
 800220c:	2300      	movs	r3, #0
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221e:	4938      	ldr	r1, [pc, #224]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222c:	4b37      	ldr	r3, [pc, #220]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002250:	4a2e      	ldr	r2, [pc, #184]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227a:	4a24      	ldr	r2, [pc, #144]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002280:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002286:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80022a6:	4a19      	ldr	r2, [pc, #100]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f aeb7 	bne.w	8002060 <HAL_GPIO_Init+0x10>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40010000 	.word	0x40010000
 8002304:	48000400 	.word	0x48000400
 8002308:	48000800 	.word	0x48000800
 800230c:	58000800 	.word	0x58000800

08002310 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800231e:	e0af      	b.n	8002480 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002320:	2201      	movs	r2, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a2 	beq.w	800247a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002336:	4a59      	ldr	r2, [pc, #356]	@ (800249c <HAL_GPIO_DeInit+0x18c>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	2207      	movs	r2, #7
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800235e:	d00d      	beq.n	800237c <HAL_GPIO_DeInit+0x6c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a4f      	ldr	r2, [pc, #316]	@ (80024a0 <HAL_GPIO_DeInit+0x190>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d007      	beq.n	8002378 <HAL_GPIO_DeInit+0x68>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4e      	ldr	r2, [pc, #312]	@ (80024a4 <HAL_GPIO_DeInit+0x194>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_GPIO_DeInit+0x64>
 8002370:	2302      	movs	r3, #2
 8002372:	e004      	b.n	800237e <HAL_GPIO_DeInit+0x6e>
 8002374:	2307      	movs	r3, #7
 8002376:	e002      	b.n	800237e <HAL_GPIO_DeInit+0x6e>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_GPIO_DeInit+0x6e>
 800237c:	2300      	movs	r3, #0
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	f002 0203 	and.w	r2, r2, #3
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	4093      	lsls	r3, r2
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d136      	bne.n	80023fc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800238e:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 8002390:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	4943      	ldr	r1, [pc, #268]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 800239a:	4013      	ands	r3, r2
 800239c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80023a0:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	493f      	ldr	r1, [pc, #252]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	493b      	ldr	r1, [pc, #236]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023bc:	4013      	ands	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80023c0:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4937      	ldr	r1, [pc, #220]	@ (80024a8 <HAL_GPIO_DeInit+0x198>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	2207      	movs	r2, #7
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023de:	4a2f      	ldr	r2, [pc, #188]	@ (800249c <HAL_GPIO_DeInit+0x18c>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	482b      	ldr	r0, [pc, #172]	@ (800249c <HAL_GPIO_DeInit+0x18c>)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	400a      	ands	r2, r1
 80023f6:	3302      	adds	r3, #2
 80023f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2103      	movs	r1, #3
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	08d2      	lsrs	r2, r2, #3
 8002430:	4019      	ands	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2103      	movs	r1, #3
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	2101      	movs	r1, #1
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2103      	movs	r1, #3
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60da      	str	r2, [r3, #12]
    }

    position++;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f af49 	bne.w	8002320 <HAL_GPIO_DeInit+0x10>
  }
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010000 	.word	0x40010000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000800 	.word	0x48000800
 80024a8:	58000800 	.word	0x58000800

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a03      	ldr	r2, [pc, #12]	@ (80024f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	58000400 	.word	0x58000400

080024f8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_PWR_EnterSLEEPMode+0x60>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002516:	d10d      	bne.n	8002534 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002518:	f000 f83c 	bl	8002594 <HAL_PWREx_DisableLowPowerRunMode>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002522:	e015      	b.n	8002550 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002530:	f000 f822 	bl	8002578 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <HAL_PWR_EnterSLEEPMode+0x64>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4a08      	ldr	r2, [pc, #32]	@ (800255c <HAL_PWR_EnterSLEEPMode+0x64>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002546:	bf30      	wfi
 8002548:	e002      	b.n	8002550 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800254a:	bf40      	sev
    __WFE();
 800254c:	bf20      	wfe
    __WFE();
 800254e:	bf20      	wfe
  }
}
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	58000400 	.word	0x58000400
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <HAL_PWREx_GetVoltageRange+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	58000400 	.word	0x58000400

08002578 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a03      	ldr	r2, [pc, #12]	@ (8002590 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	58000400 	.word	0x58000400

08002594 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80025a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025a4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2232      	movs	r2, #50	@ 0x32
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9b      	lsrs	r3, r3, #18
 80025b8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80025ba:	e002      	b.n	80025c2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ce:	d102      	bne.n	80025d6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f2      	bne.n	80025bc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e2:	d101      	bne.n	80025e8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e000      	b.n	80025ea <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	58000400 	.word	0x58000400
 80025f8:	20000000 	.word	0x20000000
 80025fc:	431bde83 	.word	0x431bde83

08002600 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	4a0c      	ldr	r2, [pc, #48]	@ (8002650 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800262c:	bf30      	wfi
 800262e:	e002      	b.n	8002636 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002630:	bf40      	sev
    __WFE();
 8002632:	bf20      	wfe
    __WFE();
 8002634:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6113      	str	r3, [r2, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	58000400 	.word	0x58000400
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002664:	d101      	bne.n	800266a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	58000400 	.word	0x58000400

08002678 <LL_RCC_HSE_EnableTcxo>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002686:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <LL_RCC_HSE_DisableTcxo>:
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c2:	d101      	bne.n	80026c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_HSE_Enable>:
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <LL_RCC_HSE_Disable>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002700:	6013      	str	r3, [r2, #0]
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <LL_RCC_HSE_IsReady>:
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800271c:	d101      	bne.n	8002722 <LL_RCC_HSE_IsReady+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_RCC_HSE_IsReady+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_RCC_HSI_Enable>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800273a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <LL_RCC_HSI_Disable>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <LL_RCC_HSI_IsReady>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002776:	d101      	bne.n	800277c <LL_RCC_HSI_IsReady+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_RCC_HSI_IsReady+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	061b      	lsls	r3, r3, #24
 800279c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <LL_RCC_LSE_IsReady>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d101      	bne.n	80027c6 <LL_RCC_LSE_IsReady+0x18>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <LL_RCC_LSE_IsReady+0x1a>
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <LL_RCC_LSI_Enable>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <LL_RCC_LSI_Disable>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <LL_RCC_LSI_IsReady>:
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d101      	bne.n	8002828 <LL_RCC_LSI_IsReady+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_RCC_LSI_IsReady+0x1a>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <LL_RCC_MSI_Enable>:
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6013      	str	r3, [r2, #0]
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_RCC_MSI_Disable>:
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <LL_RCC_MSI_IsReady>:
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800286e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d101      	bne.n	8002880 <LL_RCC_MSI_IsReady+0x16>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_RCC_MSI_IsReady+0x18>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b08      	cmp	r3, #8
 800289a:	d101      	bne.n	80028a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_MSI_GetRange>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <LL_RCC_SetSysClkSource>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_RCC_GetSysClkSource>:
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <LL_RCC_SetAHBPrescaler>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <LL_RCC_SetAHB3Prescaler>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <LL_RCC_SetAPB1Prescaler>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <LL_RCC_SetAPB2Prescaler>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <LL_RCC_GetAHBPrescaler>:
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_RCC_GetAHB3Prescaler>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_GetAPB1Prescaler>:
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <LL_RCC_GetAPB2Prescaler>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	6013      	str	r3, [r2, #0]
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a80:	d101      	bne.n	8002a86 <LL_RCC_PLL_IsReady+0x18>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_RCC_PLL_IsReady+0x1a>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d101      	bne.n	8002b02 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b20:	d101      	bne.n	8002b26 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b42:	d101      	bne.n	8002b48 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b64:	d101      	bne.n	8002b6a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e36f      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	f7ff fece 	bl	8002926 <LL_RCC_GetSysClkSource>
 8002b8a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	f7ff ffa2 	bl	8002ad4 <LL_RCC_PLL_GetMainSource>
 8002b90:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80c4 	beq.w	8002d28 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x3e>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d176      	bne.n	8002c9a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d173      	bne.n	8002c9a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e353      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x68>
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bda:	e006      	b.n	8002bea <HAL_RCC_OscConfig+0x76>
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d222      	bcs.n	8002c34 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd3c 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e331      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe53 	bl	80028d8 <LL_RCC_MSI_SetCalibTrimming>
 8002c32:	e021      	b.n	8002c78 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe3a 	bl	80028d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fd01 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e2f6      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c78:	f000 fcc2 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4aa7      	ldr	r2, [pc, #668]	@ (8002f1c <HAL_RCC_OscConfig+0x3a8>)
 8002c80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002c82:	4ba7      	ldr	r3, [pc, #668]	@ (8002f20 <HAL_RCC_OscConfig+0x3ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f85e 	bl	8000d48 <HAL_InitTick>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d047      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	e2e5      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ca2:	f7ff fdc6 	bl	8002832 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f859 	bl	8000d5c <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cae:	f7fe f855 	bl	8000d5c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e2d2      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cc0:	f7ff fdd3 	bl	800286a <LL_RCC_MSI_IsReady>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f1      	beq.n	8002cae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fdef 	bl	80028d8 <LL_RCC_MSI_SetCalibTrimming>
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cfc:	f7ff fda7 	bl	800284e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d00:	f7fe f82c 	bl	8000d5c <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d08:	f7fe f828 	bl	8000d5c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e2a5      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d1a:	f7ff fda6 	bl	800286a <LL_RCC_MSI_IsReady>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f1      	bne.n	8002d08 <HAL_RCC_OscConfig+0x194>
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d26:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d058      	beq.n	8002de6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d108      	bne.n	8002d52 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d14b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e289      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0x204>
 8002d72:	f7ff fcae 	bl	80026d2 <LL_RCC_HSE_Enable>
 8002d76:	e00d      	b.n	8002d94 <HAL_RCC_OscConfig+0x220>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002d80:	d104      	bne.n	8002d8c <HAL_RCC_OscConfig+0x218>
 8002d82:	f7ff fc79 	bl	8002678 <LL_RCC_HSE_EnableTcxo>
 8002d86:	f7ff fca4 	bl	80026d2 <LL_RCC_HSE_Enable>
 8002d8a:	e003      	b.n	8002d94 <HAL_RCC_OscConfig+0x220>
 8002d8c:	f7ff fcaf 	bl	80026ee <LL_RCC_HSE_Disable>
 8002d90:	f7ff fc80 	bl	8002694 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd ffde 	bl	8000d5c <HAL_GetTick>
 8002da0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fd ffda 	bl	8000d5c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e257      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002db6:	f7ff fca8 	bl	800270a <LL_RCC_HSE_IsReady>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f1      	beq.n	8002da4 <HAL_RCC_OscConfig+0x230>
 8002dc0:	e011      	b.n	8002de6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd ffcb 	bl	8000d5c <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dca:	f7fd ffc7 	bl	8000d5c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	@ 0x64
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e244      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ddc:	f7ff fc95 	bl	800270a <LL_RCC_HSE_IsReady>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f1      	bne.n	8002dca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d046      	beq.n	8002e80 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x290>
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e22a      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fcb6 	bl	8002786 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e1a:	e031      	b.n	8002e80 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d019      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	f7ff fc82 	bl	800272c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fd ff98 	bl	8000d5c <HAL_GetTick>
 8002e2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fd ff94 	bl	8000d5c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e211      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e42:	f7ff fc8f 	bl	8002764 <LL_RCC_HSI_IsReady>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f1      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fc98 	bl	8002786 <LL_RCC_HSI_SetCalibTrimming>
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	f7ff fc76 	bl	8002748 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fd ff7e 	bl	8000d5c <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fd ff7a 	bl	8000d5c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1f7      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e76:	f7ff fc75 	bl	8002764 <LL_RCC_HSI_IsReady>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f1      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d06e      	beq.n	8002f6a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d056      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d031      	beq.n	8002f10 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e1d0      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d013      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ece:	f7ff fc8f 	bl	80027f0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed2:	f7fd ff43 	bl	8000d5c <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fd ff3f 	bl	8000d5c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b11      	cmp	r3, #17
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1bc      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002eec:	f7ff fc90 	bl	8002810 <LL_RCC_LSI_IsReady>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f1      	bne.n	8002eda <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efe:	f023 0210 	bic.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f10:	f7ff fc5e 	bl	80027d0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fd ff22 	bl	8000d5c <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f1a:	e00c      	b.n	8002f36 <HAL_RCC_OscConfig+0x3c2>
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fd ff1a 	bl	8000d5c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e197      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f36:	f7ff fc6b 	bl	8002810 <LL_RCC_LSI_IsReady>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f1      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3b0>
 8002f40:	e013      	b.n	8002f6a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f42:	f7ff fc55 	bl	80027f0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fd ff09 	bl	8000d5c <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fd ff05 	bl	8000d5c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e182      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f60:	f7ff fc56 	bl	8002810 <LL_RCC_LSI_IsReady>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f1      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80d8 	beq.w	8003128 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f78:	f7ff fb6c 	bl	8002654 <LL_PWR_IsEnabledBkUpAccess>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f82:	f7ff faab 	bl	80024dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fd fee9 	bl	8000d5c <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fd fee5 	bl	8000d5c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e162      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fa0:	f7ff fb58 	bl	8002654 <LL_PWR_IsEnabledBkUpAccess>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f1      	beq.n	8002f8e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d07b      	beq.n	80030aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b85      	cmp	r3, #133	@ 0x85
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fec1 	bl	8000d5c <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd feb3 	bl	8000d5c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e12e      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003008:	f7ff fbd1 	bl	80027ae <LL_RCC_LSE_IsReady>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ef      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b81      	cmp	r3, #129	@ 0x81
 8003018:	d003      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b85      	cmp	r3, #133	@ 0x85
 8003020:	d121      	bne.n	8003066 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fe9b 	bl	8000d5c <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fd fe8d 	bl	8000d5c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e108      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ec      	beq.n	800303e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003064:	e060      	b.n	8003128 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fd fe79 	bl	8000d5c <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fd fe6b 	bl	8000d5c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0e6      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ec      	bne.n	8003082 <HAL_RCC_OscConfig+0x50e>
 80030a8:	e03e      	b.n	8003128 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fd fe57 	bl	8000d5c <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd fe49 	bl	8000d5c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0c4      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ec      	bne.n	80030c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fd fe36 	bl	8000d5c <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fd fe28 	bl	8000d5c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0a3      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800311e:	f7ff fb46 	bl	80027ae <LL_RCC_LSE_IsReady>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ef      	bne.n	8003108 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8099 	beq.w	8003264 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d06c      	beq.n	8003212 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	2b02      	cmp	r3, #2
 800313e:	d14b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	f7ff fc87 	bl	8002a52 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd fe0a 	bl	8000d5c <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fd fe06 	bl	8000d5c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e083      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800315e:	f7ff fc86 	bl	8002a6e <LL_RCC_PLL_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <HAL_RCC_OscConfig+0x6fc>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003180:	0212      	lsls	r2, r2, #8
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003194:	430a      	orrs	r2, r1
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319a:	4313      	orrs	r3, r2
 800319c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319e:	f7ff fc4a 	bl	8002a36 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fd fdd3 	bl	8000d5c <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fdcf 	bl	8000d5c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b0a      	cmp	r3, #10
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e04c      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80031cc:	f7ff fc4f 	bl	8002a6e <LL_RCC_PLL_IsReady>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f1      	beq.n	80031ba <HAL_RCC_OscConfig+0x646>
 80031d6:	e045      	b.n	8003264 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	f7ff fc3b 	bl	8002a52 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fd fdbe 	bl	8000d5c <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd fdba 	bl	8000d5c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e037      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80031f6:	f7ff fc3a 	bl	8002a6e <LL_RCC_PLL_IsReady>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f1      	bne.n	80031e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800320a:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_RCC_OscConfig+0x700>)
 800320c:	4013      	ands	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
 8003210:	e028      	b.n	8003264 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e023      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	429a      	cmp	r2, r3
 8003232:	d115      	bne.n	8003260 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323e:	429a      	cmp	r2, r3
 8003240:	d10e      	bne.n	8003260 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	429a      	cmp	r2, r3
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	11c1808c 	.word	0x11c1808c
 8003274:	eefefffc 	.word	0xeefefffc

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e10f      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b89      	ldr	r3, [pc, #548]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d91b      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b86      	ldr	r3, [pc, #536]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4984      	ldr	r1, [pc, #528]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032aa:	f7fd fd57 	bl	8000d5c <HAL_GetTick>
 80032ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032b2:	f7fd fd53 	bl	8000d5c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0f3      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c4:	4b7b      	ldr	r3, [pc, #492]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d1ef      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fb2a 	bl	800293c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032e8:	f7fd fd38 	bl	8000d5c <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032f0:	f7fd fd34 	bl	8000d5c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0d4      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003302:	f7ff fbf2 	bl	8002aea <LL_RCC_IsActiveFlag_HPRE>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f1      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d016      	beq.n	8003346 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb20 	bl	8002962 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003322:	f7fd fd1b 	bl	8000d5c <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800332a:	f7fd fd17 	bl	8000d5c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0b7      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800333c:	f7ff fbe6 	bl	8002b0c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f1      	beq.n	800332a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb19 	bl	800298e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800335c:	f7fd fcfe 	bl	8000d5c <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003364:	f7fd fcfa 	bl	8000d5c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e09a      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003376:	f7ff fbdb 	bl	8002b30 <LL_RCC_IsActiveFlag_PPRE1>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f1      	beq.n	8003364 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fb0e 	bl	80029b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003398:	f7fd fce0 	bl	8000d5c <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033a0:	f7fd fcdc 	bl	8000d5c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e07c      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033b2:	f7ff fbce 	bl	8002b52 <LL_RCC_IsActiveFlag_PPRE2>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f1      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d043      	beq.n	8003450 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d106      	bne.n	80033de <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80033d0:	f7ff f99b 	bl	800270a <LL_RCC_HSE_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11e      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e066      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80033e6:	f7ff fb42 	bl	8002a6e <LL_RCC_PLL_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d113      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e05b      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80033fc:	f7ff fa35 	bl	800286a <LL_RCC_MSI_IsReady>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d108      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e050      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800340a:	f7ff f9ab 	bl	8002764 <LL_RCC_HSI_IsReady>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e049      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fa6f 	bl	8002900 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003422:	f7fd fc9b 	bl	8000d5c <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003428:	e00a      	b.n	8003440 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fd fc97 	bl	8000d5c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e035      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003440:	f7ff fa71 	bl	8002926 <LL_RCC_GetSysClkSource>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1ec      	bne.n	800342a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d21b      	bcs.n	8003496 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4913      	ldr	r1, [pc, #76]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346e:	f7fd fc75 	bl	8000d5c <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	e008      	b.n	8003488 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003476:	f7fd fc71 	bl	8000d5c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e011      	b.n	80034ac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003488:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x23c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003496:	f000 f8b3 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800349a:	4603      	mov	r3, r0
 800349c:	4a06      	ldr	r2, [pc, #24]	@ (80034b8 <HAL_RCC_ClockConfig+0x240>)
 800349e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_ClockConfig+0x244>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fc4f 	bl	8000d48 <HAL_InitTick>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	58004000 	.word	0x58004000
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ce:	f7ff fa2a 	bl	8002926 <LL_RCC_GetSysClkSource>
 80034d2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d4:	f7ff fafe 	bl	8002ad4 <LL_RCC_PLL_GetMainSource>
 80034d8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d139      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d136      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80034ec:	f7ff f9cd 	bl	800288a <LL_RCC_MSI_IsEnabledRangeSelect>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d115      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x62>
 80034f6:	f7ff f9c8 	bl	800288a <LL_RCC_MSI_IsEnabledRangeSelect>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x4e>
 8003500:	f7ff f9d3 	bl	80028aa <LL_RCC_MSI_GetRange>
 8003504:	4603      	mov	r3, r0
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	e005      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x5a>
 800350e:	f7ff f9d7 	bl	80028c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003512:	4603      	mov	r3, r0
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4a36      	ldr	r2, [pc, #216]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003520:	e014      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x8c>
 8003522:	f7ff f9b2 	bl	800288a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003526:	4603      	mov	r3, r0
 8003528:	2b01      	cmp	r3, #1
 800352a:	d106      	bne.n	800353a <HAL_RCC_GetSysClockFreq+0x7a>
 800352c:	f7ff f9bd 	bl	80028aa <LL_RCC_MSI_GetRange>
 8003530:	4603      	mov	r3, r0
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	e005      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
 800353a:	f7ff f9c1 	bl	80028c0 <LL_RCC_MSI_GetRangeAfterStandby>
 800353e:	4603      	mov	r3, r0
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a2b      	ldr	r2, [pc, #172]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d115      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003558:	e012      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d102      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e00c      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d109      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800356c:	f7ff f8a0 	bl	80026b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003576:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e001      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800357c:	4b1f      	ldr	r3, [pc, #124]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800357e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	f7ff f9d1 	bl	8002926 <LL_RCC_GetSysClkSource>
 8003584:	4603      	mov	r3, r0
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d12f      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800358a:	f7ff faa3 	bl	8002ad4 <LL_RCC_PLL_GetMainSource>
 800358e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0xde>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d003      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800359c:	e00d      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800359e:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80035a0:	60fb      	str	r3, [r7, #12]
        break;
 80035a2:	e00d      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035a4:	f7ff f884 	bl	80026b0 <LL_RCC_HSE_IsEnabledDiv2>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80035ae:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80035b0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80035b6:	60fb      	str	r3, [r7, #12]
        break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	60fb      	str	r3, [r7, #12]
        break;
 80035be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80035c0:	f7ff fa66 	bl	8002a90 <LL_RCC_PLL_GetN>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	fb03 f402 	mul.w	r4, r3, r2
 80035cc:	f7ff fa77 	bl	8002abe <LL_RCC_PLL_GetDivider>
 80035d0:	4603      	mov	r3, r0
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	3301      	adds	r3, #1
 80035d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80035da:	f7ff fa65 	bl	8002aa8 <LL_RCC_PLL_GetR>
 80035de:	4603      	mov	r3, r0
 80035e0:	0f5b      	lsrs	r3, r3, #29
 80035e2:	3301      	adds	r3, #1
 80035e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80035e8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80035ea:	697b      	ldr	r3, [r7, #20]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	0800bcb8 	.word	0x0800bcb8
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	01e84800 	.word	0x01e84800

08003600 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b598      	push	{r3, r4, r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003604:	f7ff ff5c 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003608:	4604      	mov	r4, r0
 800360a:	f7ff f9e6 	bl	80029da <LL_RCC_GetAHBPrescaler>
 800360e:	4603      	mov	r3, r0
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	4a03      	ldr	r2, [pc, #12]	@ (8003624 <HAL_RCC_GetHCLKFreq+0x24>)
 8003618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd98      	pop	{r3, r4, r7, pc}
 8003624:	0800bc58 	.word	0x0800bc58

08003628 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b598      	push	{r3, r4, r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800362c:	f7ff ffe8 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003630:	4604      	mov	r4, r0
 8003632:	f7ff f9ea 	bl	8002a0a <LL_RCC_GetAPB1Prescaler>
 8003636:	4603      	mov	r3, r0
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	4a03      	ldr	r2, [pc, #12]	@ (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003640:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd98      	pop	{r3, r4, r7, pc}
 8003648:	0800bc98 	.word	0x0800bc98

0800364c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800364c:	b598      	push	{r3, r4, r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003650:	f7ff ffd6 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003654:	4604      	mov	r4, r0
 8003656:	f7ff f9e3 	bl	8002a20 <LL_RCC_GetAPB2Prescaler>
 800365a:	4603      	mov	r3, r0
 800365c:	0adb      	lsrs	r3, r3, #11
 800365e:	4a03      	ldr	r2, [pc, #12]	@ (800366c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd98      	pop	{r3, r4, r7, pc}
 800366c:	0800bc98 	.word	0x0800bc98

08003670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003686:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003688:	f7ff f9b2 	bl	80029f0 <LL_RCC_GetAHB3Prescaler>
 800368c:	4603      	mov	r3, r0
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9c      	lsrs	r4, r3, #18
 80036ac:	f7fe ff58 	bl	8002560 <HAL_PWREx_GetVoltageRange>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4619      	mov	r1, r3
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 f80b 	bl	80036d0 <RCC_SetFlashLatency>
 80036ba:	4603      	mov	r3, r0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	0800bcb8 	.word	0x0800bcb8
 80036c8:	0800bc58 	.word	0x0800bc58
 80036cc:	431bde83 	.word	0x431bde83

080036d0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	@ 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80036da:	4a3a      	ldr	r2, [pc, #232]	@ (80037c4 <RCC_SetFlashLatency+0xf4>)
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036e4:	6018      	str	r0, [r3, #0]
 80036e6:	3304      	adds	r3, #4
 80036e8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80036ea:	4a37      	ldr	r2, [pc, #220]	@ (80037c8 <RCC_SetFlashLatency+0xf8>)
 80036ec:	f107 0318 	add.w	r3, r7, #24
 80036f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036f4:	6018      	str	r0, [r3, #0]
 80036f6:	3304      	adds	r3, #4
 80036f8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80036fa:	4a34      	ldr	r2, [pc, #208]	@ (80037cc <RCC_SetFlashLatency+0xfc>)
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	ca07      	ldmia	r2, {r0, r1, r2}
 8003702:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003710:	d11b      	bne.n	800374a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003712:	2300      	movs	r3, #0
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
 8003716:	e014      	b.n	8003742 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	3338      	adds	r3, #56	@ 0x38
 800371e:	443b      	add	r3, r7
 8003720:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4293      	cmp	r3, r2
 800372a:	d807      	bhi.n	800373c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3338      	adds	r3, #56	@ 0x38
 8003732:	443b      	add	r3, r7
 8003734:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800373a:	e021      	b.n	8003780 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	3301      	adds	r3, #1
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	2b02      	cmp	r3, #2
 8003746:	d9e7      	bls.n	8003718 <RCC_SetFlashLatency+0x48>
 8003748:	e01a      	b.n	8003780 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374e:	e014      	b.n	800377a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	3338      	adds	r3, #56	@ 0x38
 8003756:	443b      	add	r3, r7
 8003758:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4293      	cmp	r3, r2
 8003762:	d807      	bhi.n	8003774 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	3338      	adds	r3, #56	@ 0x38
 800376a:	443b      	add	r3, r7
 800376c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003772:	e005      	b.n	8003780 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003776:	3301      	adds	r3, #1
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	2b02      	cmp	r3, #2
 800377e:	d9e7      	bls.n	8003750 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003780:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <RCC_SetFlashLatency+0x100>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4911      	ldr	r1, [pc, #68]	@ (80037d0 <RCC_SetFlashLatency+0x100>)
 800378a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003790:	f7fd fae4 	bl	8000d5c <HAL_GetTick>
 8003794:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003796:	e008      	b.n	80037aa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003798:	f7fd fae0 	bl	8000d5c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e007      	b.n	80037ba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <RCC_SetFlashLatency+0x100>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1ef      	bne.n	8003798 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3738      	adds	r7, #56	@ 0x38
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	0800bb3c 	.word	0x0800bb3c
 80037c8:	0800bb44 	.word	0x0800bb44
 80037cc:	0800bb4c 	.word	0x0800bb4c
 80037d0:	58004000 	.word	0x58004000

080037d4 <LL_RCC_LSE_IsReady>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d101      	bne.n	80037ec <LL_RCC_LSE_IsReady+0x18>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <LL_RCC_LSE_IsReady+0x1a>
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <LL_RCC_SetUSARTClockSource>:
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003802:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <LL_RCC_SetI2SClockSource>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <LL_RCC_SetLPUARTClockSource>:
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003860:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003864:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <LL_RCC_SetI2CClockSource>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003886:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800389e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <LL_RCC_SetLPTIMClockSource>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_SetRNGClockSource>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80038f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <LL_RCC_SetADCClockSource>:
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <LL_RCC_SetRTCClockSource>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800394c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <LL_RCC_GetRTCClockSource>:
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <LL_RCC_ForceBackupDomainReset>:
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800398a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <LL_RCC_ReleaseBackupDomainReset>:
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d058      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80039dc:	f7fe fd7e 	bl	80024dc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e0:	f7fd f9bc 	bl	8000d5c <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80039e6:	e009      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fd f9b8 	bl	8000d5c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	74fb      	strb	r3, [r7, #19]
        break;
 80039fa:	e006      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80039fc:	4b7b      	ldr	r3, [pc, #492]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a08:	d1ee      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d13c      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a10:	f7ff ffa7 	bl	8003962 <LL_RCC_GetRTCClockSource>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d00f      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a2c:	f7ff ffa5 	bl	800397a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a30:	f7ff ffb3 	bl	800399a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d014      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd f988 	bl	8000d5c <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fd f984 	bl	8000d5c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d902      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	74fb      	strb	r3, [r7, #19]
            break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a68:	f7ff feb4 	bl	80037d4 <LL_RCC_LSE_IsReady>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d1ee      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff5b 	bl	8003938 <LL_RCC_SetRTCClockSource>
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
 8003a88:	e001      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fea9 	bl	80037f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fe9e 	bl	80037f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fec0 	bl	8003850 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fee6 	bl	80038b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fedb 	bl	80038b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fed0 	bl	80038b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fea9 	bl	800387a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fe9e 	bl	800387a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe93 	bl	800387a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d011      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fe5e 	bl	8003826 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b72:	d107      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fea5 	bl	80038e4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fea3 	bl	800390e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003be2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	58000400 	.word	0x58000400

08003bf0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d071      	beq.n	8003ce6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc feca 	bl	80009b0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c24:	4b32      	ldr	r3, [pc, #200]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d051      	beq.n	8003cd4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c30:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c32:	22ca      	movs	r2, #202	@ 0xca
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c36:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c38:	2253      	movs	r2, #83	@ 0x53
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fa11 	bl	8004064 <RTC_EnterInitMode>
 8003c42:	4603      	mov	r3, r0
 8003c44:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13f      	bne.n	8003ccc <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003c4c:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c52:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c5a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	491f      	ldr	r1, [pc, #124]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	491b      	ldr	r1, [pc, #108]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	430b      	orrs	r3, r1
 8003c98:	4915      	ldr	r1, [pc, #84]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa14 	bl	80040cc <RTC_ExitInitMode>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10e      	bne.n	8003ccc <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a19      	ldr	r1, [r3, #32]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4319      	orrs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	490a      	ldr	r1, [pc, #40]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ccc:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <HAL_RTC_Init+0x100>)
 8003cce:	22ff      	movs	r2, #255	@ 0xff
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cd2:	e001      	b.n	8003cd8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40002800 	.word	0x40002800

08003cf4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_RTC_SetAlarm_IT+0x1e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0f3      	b.n	8003efa <HAL_RTC_SetAlarm_IT+0x206>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003d22:	4b78      	ldr	r3, [pc, #480]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d32:	d06a      	beq.n	8003e0a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d13a      	bne.n	8003db0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003d3a:	4b72      	ldr	r3, [pc, #456]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f9f5 	bl	8004148 <RTC_ByteToBcd2>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f9ee 	bl	8004148 <RTC_ByteToBcd2>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d70:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f9e6 	bl	8004148 <RTC_ByteToBcd2>
 8003d7c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d7e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	78db      	ldrb	r3, [r3, #3]
 8003d86:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d88:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f9d8 	bl	8004148 <RTC_ByteToBcd2>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d9c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003da4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e02c      	b.n	8003e0a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8003db8:	d00d      	beq.n	8003dd6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003de2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003de8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	78db      	ldrb	r3, [r3, #3]
 8003dee:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003df0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003df8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003dfa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003e00:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e0c:	22ca      	movs	r2, #202	@ 0xca
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e10:	4b3c      	ldr	r3, [pc, #240]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e12:	2253      	movs	r2, #83	@ 0x53
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1e:	d12c      	bne.n	8003e7a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003e20:	4b38      	ldr	r3, [pc, #224]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4a37      	ldr	r2, [pc, #220]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e2a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003e2c:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e38:	d107      	bne.n	8003e4a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4930      	ldr	r1, [pc, #192]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	644b      	str	r3, [r1, #68]	@ 0x44
 8003e48:	e006      	b.n	8003e58 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003e50:	4a2c      	ldr	r2, [pc, #176]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003e58:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003e6c:	4b25      	ldr	r3, [pc, #148]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e72:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8003e76:	6193      	str	r3, [r2, #24]
 8003e78:	e02b      	b.n	8003ed2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003e7a:	4b22      	ldr	r3, [pc, #136]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	4a21      	ldr	r2, [pc, #132]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e80:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8003e84:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003e86:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e88:	2202      	movs	r2, #2
 8003e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e92:	d107      	bne.n	8003ea4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	4919      	ldr	r1, [pc, #100]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003ea2:	e006      	b.n	8003eb2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003ea4:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003eaa:	4a16      	ldr	r2, [pc, #88]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003eb2:	4a14      	ldr	r2, [pc, #80]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	4a0e      	ldr	r2, [pc, #56]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ecc:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8003ed0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <HAL_RTC_SetAlarm_IT+0x214>)
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8003f08 <HAL_RTC_SetAlarm_IT+0x214>)
 8003eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ede:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ee4:	22ff      	movs	r2, #255	@ 0xff
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40002800 	.word	0x40002800
 8003f08:	58000800 	.word	0x58000800

08003f0c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_RTC_DeactivateAlarm+0x18>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e048      	b.n	8003fb6 <HAL_RTC_DeactivateAlarm+0xaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f36:	22ca      	movs	r2, #202	@ 0xca
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f3a:	4b21      	ldr	r3, [pc, #132]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f3c:	2253      	movs	r2, #83	@ 0x53
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f46:	d115      	bne.n	8003f74 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f52:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f5e:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	f023 0201 	bic.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f6c:	4b14      	ldr	r3, [pc, #80]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f72:	e014      	b.n	8003f9e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f7a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8003f7e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003f80:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	f023 0202 	bic.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003fa0:	22ff      	movs	r2, #255	@ 0xff
 8003fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	40002800 	.word	0x40002800

08003fc4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003fce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fd f8a8 	bl	800113e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f94a 	bl	8004298 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40002800 	.word	0x40002800

08004018 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004020:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <HAL_RTC_WaitForSynchro+0x48>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a0e      	ldr	r2, [pc, #56]	@ (8004060 <HAL_RTC_WaitForSynchro+0x48>)
 8004026:	f023 0320 	bic.w	r3, r3, #32
 800402a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800402c:	f7fc fe96 	bl	8000d5c <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004032:	e009      	b.n	8004048 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004034:	f7fc fe92 	bl	8000d5c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004042:	d901      	bls.n	8004048 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e006      	b.n	8004056 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RTC_WaitForSynchro+0x48>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40002800 	.word	0x40002800

08004064 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004070:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <RTC_EnterInitMode+0x64>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d120      	bne.n	80040be <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <RTC_EnterInitMode+0x64>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <RTC_EnterInitMode+0x64>)
 8004082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004086:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004088:	f7fc fe68 	bl	8000d5c <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800408e:	e00d      	b.n	80040ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004090:	f7fc fe64 	bl	8000d5c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800409e:	d905      	bls.n	80040ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <RTC_EnterInitMode+0x64>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <RTC_EnterInitMode+0x5a>
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d1e8      	bne.n	8004090 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40002800 	.word	0x40002800

080040cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <RTC_ExitInitMode+0x78>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <RTC_ExitInitMode+0x78>)
 80040de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80040e4:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <RTC_ExitInitMode+0x78>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff91 	bl	8004018 <HAL_RTC_WaitForSynchro>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01e      	beq.n	800413a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2203      	movs	r2, #3
 8004100:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e017      	b.n	800413a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800410a:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <RTC_ExitInitMode+0x78>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <RTC_ExitInitMode+0x78>)
 8004110:	f023 0320 	bic.w	r3, r3, #32
 8004114:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ff7e 	bl	8004018 <HAL_RTC_WaitForSynchro>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2203      	movs	r2, #3
 8004126:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <RTC_ExitInitMode+0x78>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <RTC_ExitInitMode+0x78>)
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	6193      	str	r3, [r2, #24]
  }

  return status;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40002800 	.word	0x40002800

08004148 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800415a:	e005      	b.n	8004168 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004162:	7afb      	ldrb	r3, [r7, #11]
 8004164:	3b0a      	subs	r3, #10
 8004166:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	2b09      	cmp	r3, #9
 800416c:	d8f6      	bhi.n	800415c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	b2da      	uxtb	r2, r3
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	4313      	orrs	r3, r2
 800417a:	b2db      	uxtb	r3, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
	...

08004188 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_RTCEx_EnableBypassShadow+0x16>
 800419a:	2302      	movs	r3, #2
 800419c:	e01f      	b.n	80041de <HAL_RTCEx_EnableBypassShadow+0x56>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80041b0:	22ca      	movs	r2, #202	@ 0xca
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80041b6:	2253      	movs	r2, #83	@ 0x53
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80041c0:	f043 0320 	orr.w	r3, r3, #32
 80041c4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80041c8:	22ff      	movs	r2, #255	@ 0xff
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40002800 	.word	0x40002800

080041ec <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_RTCEx_SetSSRU_IT+0x16>
 80041fe:	2302      	movs	r3, #2
 8004200:	e027      	b.n	8004252 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004214:	22ca      	movs	r2, #202	@ 0xca
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800421a:	2253      	movs	r2, #83	@ 0x53
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800421e:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4a0e      	ldr	r2, [pc, #56]	@ (800425c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004228:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800422a:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800422c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004230:	4a0b      	ldr	r2, [pc, #44]	@ (8004260 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004232:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004236:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800423c:	22ff      	movs	r2, #255	@ 0xff
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	40002800 	.word	0x40002800
 8004260:	58000800 	.word	0x58000800

08004264 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800427a:	2240      	movs	r2, #64	@ 0x40
 800427c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc ff67 	bl	8001152 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40002800 	.word	0x40002800

08004298 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80042b8:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <HAL_RTCEx_BKUPWrite+0x2c>)
 80042ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	4000b100 	.word	0x4000b100

080042dc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80042e6:	4b07      	ldr	r3, [pc, #28]	@ (8004304 <HAL_RTCEx_BKUPRead+0x28>)
 80042e8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	4000b100 	.word	0x4000b100

08004308 <LL_PWR_SetRadioBusyTrigger>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004318:	4904      	ldr	r1, [pc, #16]	@ (800432c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	58000400 	.word	0x58000400

08004330 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a04      	ldr	r2, [pc, #16]	@ (800434c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800433c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	58000400 	.word	0x58000400

08004350 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	4a04      	ldr	r2, [pc, #16]	@ (800436c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800435c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	58000400 	.word	0x58000400

08004370 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437a:	619a      	str	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	58000400 	.word	0x58000400

08004388 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d101      	bne.n	800439c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	58000400 	.word	0x58000400

080043ac <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d101      	bne.n	80043c0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	58000400 	.word	0x58000400

080043d0 <LL_RCC_RF_DisableReset>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_IsRFUnderReset>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004404:	d101      	bne.n	800440a <LL_RCC_IsRFUnderReset+0x1a>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_RCC_IsRFUnderReset+0x1c>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <LL_EXTI_EnableIT_32_63>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <LL_EXTI_EnableIT_32_63+0x24>)
 800441e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004422:	4905      	ldr	r1, [pc, #20]	@ (8004438 <LL_EXTI_EnableIT_32_63+0x24>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	58000800 	.word	0x58000800

0800443c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
    return status;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	e052      	b.n	80044f8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	799b      	ldrb	r3, [r3, #6]
 800445a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800445c:	7bbb      	ldrb	r3, [r7, #14]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_SUBGHZ_Init+0x2c>
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d109      	bne.n	800447c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fada 	bl	8000a28 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004474:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004478:	f7ff ffcc 	bl	8004414 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800447c:	7bbb      	ldrb	r3, [r7, #14]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d126      	bne.n	80044d0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004488:	f7ff ffa2 	bl	80043d0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800448c:	4b1c      	ldr	r3, [pc, #112]	@ (8004500 <HAL_SUBGHZ_Init+0xc4>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	0cdb      	lsrs	r3, r3, #19
 800449a:	2264      	movs	r2, #100	@ 0x64
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	609a      	str	r2, [r3, #8]
        break;
 80044b2:	e007      	b.n	80044c4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80044ba:	f7ff ff99 	bl	80043f0 <LL_RCC_IsRFUnderReset>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044c4:	f7ff ff34 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80044c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044cc:	f7ff ff1c 	bl	8004308 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80044d0:	f7ff ff4e 	bl	8004370 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 faac 	bl	8004a3c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	719a      	strb	r2, [r3, #6]

  return status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000000 	.word	0x20000000

08004504 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	461a      	mov	r2, r3
 8004510:	460b      	mov	r3, r1
 8004512:	817b      	strh	r3, [r7, #10]
 8004514:	4613      	mov	r3, r2
 8004516:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	799b      	ldrb	r3, [r3, #6]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d14a      	bne.n	80045b8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	795b      	ldrb	r3, [r3, #5]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800452a:	2302      	movs	r3, #2
 800452c:	e045      	b.n	80045ba <HAL_SUBGHZ_WriteRegisters+0xb6>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2202      	movs	r2, #2
 8004538:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fb4c 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004540:	f7ff ff06 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004544:	210d      	movs	r1, #13
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa98 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	b29b      	uxth	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa90 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa8a 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004568:	2300      	movs	r3, #0
 800456a:	82bb      	strh	r3, [r7, #20]
 800456c:	e00a      	b.n	8004584 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800456e:	8abb      	ldrh	r3, [r7, #20]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa7f 	bl	8004a7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800457e:	8abb      	ldrh	r3, [r7, #20]
 8004580:	3301      	adds	r3, #1
 8004582:	82bb      	strh	r3, [r7, #20]
 8004584:	8aba      	ldrh	r2, [r7, #20]
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3f0      	bcc.n	800456e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800458c:	f7ff fed0 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fb45 	bl	8004c20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
 80045a2:	e001      	b.n	80045a8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	715a      	strb	r2, [r3, #5]

    return status;
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	e000      	b.n	80045ba <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b088      	sub	sp, #32
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	461a      	mov	r2, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	817b      	strh	r3, [r7, #10]
 80045d2:	4613      	mov	r3, r2
 80045d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	799b      	ldrb	r3, [r3, #6]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d14a      	bne.n	800467a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	795b      	ldrb	r3, [r3, #5]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e045      	b.n	800467c <HAL_SUBGHZ_ReadRegisters+0xba>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 faee 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045fc:	f7ff fea8 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004600:	211d      	movs	r1, #29
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fa3a 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa32 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa2c 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004624:	2100      	movs	r1, #0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fa28 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800462c:	2300      	movs	r3, #0
 800462e:	82fb      	strh	r3, [r7, #22]
 8004630:	e009      	b.n	8004646 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004632:	69b9      	ldr	r1, [r7, #24]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fa77 	bl	8004b28 <SUBGHZSPI_Receive>
      pData++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3301      	adds	r3, #1
 800463e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004640:	8afb      	ldrh	r3, [r7, #22]
 8004642:	3301      	adds	r3, #1
 8004644:	82fb      	strh	r3, [r7, #22]
 8004646:	8afa      	ldrh	r2, [r7, #22]
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3f1      	bcc.n	8004632 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800464e:	f7ff fe6f 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fae4 	bl	8004c20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e001      	b.n	800466a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	715a      	strb	r2, [r3, #5]

    return status;
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	e000      	b.n	800467c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	72fb      	strb	r3, [r7, #11]
 8004694:	4613      	mov	r3, r2
 8004696:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	799b      	ldrb	r3, [r3, #6]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d14a      	bne.n	8004738 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	795b      	ldrb	r3, [r3, #5]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e045      	b.n	800473a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fa8f 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80046ba:	7afb      	ldrb	r3, [r7, #11]
 80046bc:	2b84      	cmp	r3, #132	@ 0x84
 80046be:	d002      	beq.n	80046c6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80046c0:	7afb      	ldrb	r3, [r7, #11]
 80046c2:	2b94      	cmp	r3, #148	@ 0x94
 80046c4:	d103      	bne.n	80046ce <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	711a      	strb	r2, [r3, #4]
 80046cc:	e002      	b.n	80046d4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046d4:	f7ff fe3c 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046d8:	7afb      	ldrb	r3, [r7, #11]
 80046da:	4619      	mov	r1, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9cd 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	82bb      	strh	r3, [r7, #20]
 80046e6:	e00a      	b.n	80046fe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046e8:	8abb      	ldrh	r3, [r7, #20]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f9c2 	bl	8004a7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046f8:	8abb      	ldrh	r3, [r7, #20]
 80046fa:	3301      	adds	r3, #1
 80046fc:	82bb      	strh	r3, [r7, #20]
 80046fe:	8aba      	ldrh	r2, [r7, #20]
 8004700:	893b      	ldrh	r3, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3f0      	bcc.n	80046e8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004706:	f7ff fe13 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	2b84      	cmp	r3, #132	@ 0x84
 800470e:	d002      	beq.n	8004716 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa85 	bl	8004c20 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
 8004722:	e001      	b.n	8004728 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	715a      	strb	r2, [r3, #5]

    return status;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	e000      	b.n	800473a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	72fb      	strb	r3, [r7, #11]
 8004752:	4613      	mov	r3, r2
 8004754:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	799b      	ldrb	r3, [r3, #6]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d13d      	bne.n	80047e0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	795b      	ldrb	r3, [r3, #5]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800476c:	2302      	movs	r3, #2
 800476e:	e038      	b.n	80047e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa2e 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800477c:	f7ff fde8 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	4619      	mov	r1, r3
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f979 	bl	8004a7c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800478a:	2100      	movs	r1, #0
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f975 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	82fb      	strh	r3, [r7, #22]
 8004796:	e009      	b.n	80047ac <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f9c4 	bl	8004b28 <SUBGHZSPI_Receive>
      pData++;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80047a6:	8afb      	ldrh	r3, [r7, #22]
 80047a8:	3301      	adds	r3, #1
 80047aa:	82fb      	strh	r3, [r7, #22]
 80047ac:	8afa      	ldrh	r2, [r7, #22]
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3f1      	bcc.n	8004798 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047b4:	f7ff fdbc 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa31 	bl	8004c20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e001      	b.n	80047d0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	715a      	strb	r2, [r3, #5]

    return status;
 80047dc:	7ffb      	ldrb	r3, [r7, #31]
 80047de:	e000      	b.n	80047e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	461a      	mov	r2, r3
 80047f6:	460b      	mov	r3, r1
 80047f8:	72fb      	strb	r3, [r7, #11]
 80047fa:	4613      	mov	r3, r2
 80047fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	799b      	ldrb	r3, [r3, #6]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d13e      	bne.n	8004886 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	795b      	ldrb	r3, [r3, #5]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004810:	2302      	movs	r3, #2
 8004812:	e039      	b.n	8004888 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f9dc 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004820:	f7ff fd96 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004824:	210e      	movs	r1, #14
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f928 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	4619      	mov	r1, r3
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f923 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	82bb      	strh	r3, [r7, #20]
 800483a:	e00a      	b.n	8004852 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800483c:	8abb      	ldrh	r3, [r7, #20]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f918 	bl	8004a7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800484c:	8abb      	ldrh	r3, [r7, #20]
 800484e:	3301      	adds	r3, #1
 8004850:	82bb      	strh	r3, [r7, #20]
 8004852:	8aba      	ldrh	r2, [r7, #20]
 8004854:	893b      	ldrh	r3, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	d3f0      	bcc.n	800483c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800485a:	f7ff fd69 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f9de 	bl	8004c20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
 8004870:	e001      	b.n	8004876 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	715a      	strb	r2, [r3, #5]

    return status;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	e000      	b.n	8004888 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	460b      	mov	r3, r1
 800489e:	72fb      	strb	r3, [r7, #11]
 80048a0:	4613      	mov	r3, r2
 80048a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	799b      	ldrb	r3, [r3, #6]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d141      	bne.n	8004936 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	795b      	ldrb	r3, [r3, #5]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_SUBGHZ_ReadBuffer+0x2e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e03c      	b.n	8004938 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f987 	bl	8004bd8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048ca:	f7ff fd41 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80048ce:	211e      	movs	r1, #30
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f8d3 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	4619      	mov	r1, r3
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8ce 	bl	8004a7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80048e0:	2100      	movs	r1, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f8ca 	bl	8004a7c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	82fb      	strh	r3, [r7, #22]
 80048ec:	e009      	b.n	8004902 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f919 	bl	8004b28 <SUBGHZSPI_Receive>
      pData++;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	3301      	adds	r3, #1
 8004900:	82fb      	strh	r3, [r7, #22]
 8004902:	8afa      	ldrh	r2, [r7, #22]
 8004904:	893b      	ldrh	r3, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3f1      	bcc.n	80048ee <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800490a:	f7ff fd11 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f986 	bl	8004c20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e001      	b.n	8004926 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	715a      	strb	r2, [r3, #5]

    return status;
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	e000      	b.n	8004938 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
  }
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004948:	2300      	movs	r3, #0
 800494a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800494c:	f107 020c 	add.w	r2, r7, #12
 8004950:	2302      	movs	r3, #2
 8004952:	2112      	movs	r1, #18
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fef4 	bl	8004742 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800495a:	7b3b      	ldrb	r3, [r7, #12]
 800495c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	b21a      	sxth	r2, r3
 8004964:	7b7b      	ldrb	r3, [r7, #13]
 8004966:	b21b      	sxth	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b21b      	sxth	r3, r3
 800496c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800496e:	f107 020c 	add.w	r2, r7, #12
 8004972:	2302      	movs	r3, #2
 8004974:	2102      	movs	r1, #2
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fe84 	bl	8004684 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f005 fbf4 	bl	800a174 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800498c:	89fb      	ldrh	r3, [r7, #14]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f005 fbfa 	bl	800a190 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f005 fc4a 	bl	800a240 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f005 fc50 	bl	800a25c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80049bc:	89fb      	ldrh	r3, [r7, #14]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f005 fc56 	bl	800a278 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f005 fc24 	bl	800a224 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80049dc:	89fb      	ldrh	r3, [r7, #14]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f005 fbe0 	bl	800a1ac <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80049f6:	89fb      	ldrh	r3, [r7, #14]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004a00:	2101      	movs	r1, #1
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f005 fbe0 	bl	800a1c8 <HAL_SUBGHZ_CADStatusCallback>
 8004a08:	e003      	b.n	8004a12 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f005 fbdb 	bl	800a1c8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f005 fbf1 	bl	800a204 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004a22:	89fb      	ldrh	r3, [r7, #14]
 8004a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f005 fc31 	bl	800a294 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0b      	ldr	r2, [pc, #44]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a4e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004a50:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004a58:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a5c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004a60:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004a62:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <SUBGHZSPI_Init+0x3c>)
 8004a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6c:	6013      	str	r3, [r2, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	58010000 	.word	0x58010000

08004a7c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a8c:	4b23      	ldr	r3, [pc, #140]	@ (8004b1c <SUBGHZSPI_Transmit+0xa0>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	0cdb      	lsrs	r3, r3, #19
 8004a9a:	2264      	movs	r2, #100	@ 0x64
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]
      break;
 8004ab2:	e008      	b.n	8004ac6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004aba:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <SUBGHZSPI_Transmit+0xa4>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d1ed      	bne.n	8004aa2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004ac6:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <SUBGHZSPI_Transmit+0xa8>)
 8004ac8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <SUBGHZSPI_Transmit+0xa0>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	0cdb      	lsrs	r3, r3, #19
 8004ade:	2264      	movs	r2, #100	@ 0x64
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	609a      	str	r2, [r3, #8]
      break;
 8004af6:	e008      	b.n	8004b0a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <SUBGHZSPI_Transmit+0xa4>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d1ed      	bne.n	8004ae6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <SUBGHZSPI_Transmit+0xa4>)
 8004b0c:	68db      	ldr	r3, [r3, #12]

  return status;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	58010000 	.word	0x58010000
 8004b24:	5801000c 	.word	0x5801000c

08004b28 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004b36:	4b25      	ldr	r3, [pc, #148]	@ (8004bcc <SUBGHZSPI_Receive+0xa4>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	0cdb      	lsrs	r3, r3, #19
 8004b44:	2264      	movs	r2, #100	@ 0x64
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	609a      	str	r2, [r3, #8]
      break;
 8004b5c:	e008      	b.n	8004b70 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <SUBGHZSPI_Receive+0xa8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d1ed      	bne.n	8004b4c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004b70:	4b18      	ldr	r3, [pc, #96]	@ (8004bd4 <SUBGHZSPI_Receive+0xac>)
 8004b72:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	22ff      	movs	r2, #255	@ 0xff
 8004b78:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004b7a:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <SUBGHZSPI_Receive+0xa4>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	0cdb      	lsrs	r3, r3, #19
 8004b88:	2264      	movs	r2, #100	@ 0x64
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	609a      	str	r2, [r3, #8]
      break;
 8004ba0:	e008      	b.n	8004bb4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ba8:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <SUBGHZSPI_Receive+0xa8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d1ed      	bne.n	8004b90 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <SUBGHZSPI_Receive+0xa8>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	701a      	strb	r2, [r3, #0]

  return status;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	58010000 	.word	0x58010000
 8004bd4:	5801000c 	.word	0x5801000c

08004bd8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	791b      	ldrb	r3, [r3, #4]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d111      	bne.n	8004c0c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <SUBGHZ_CheckDeviceReady+0x44>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004bf8:	f7ff fbaa 	bl	8004350 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f9      	bne.n	8004bfc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c08:	f7ff fb92 	bl	8004330 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f807 	bl	8004c20 <SUBGHZ_WaitOnBusy>
 8004c12:	4603      	mov	r3, r0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000000 	.word	0x20000000

08004c20 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004c2c:	4b12      	ldr	r3, [pc, #72]	@ (8004c78 <SUBGHZ_WaitOnBusy+0x58>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	2264      	movs	r2, #100	@ 0x64
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004c42:	f7ff fbb3 	bl	80043ac <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004c46:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	609a      	str	r2, [r3, #8]
      break;
 8004c58:	e009      	b.n	8004c6e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004c60:	f7ff fb92 	bl	8004388 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d0e9      	beq.n	8004c42 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000000 	.word	0x20000000

08004c7c <LL_RCC_GetUSARTClockSource>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4313      	orrs	r3, r2
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <LL_RCC_GetLPUARTClockSource>:
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4013      	ands	r3, r2
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e042      	b.n	8004d56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fb feb4 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	@ 0x24
 8004cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fc3b 	bl	800557c <UART_SetConfig>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e022      	b.n	8004d56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fea3 	bl	8005a64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 ff29 	bl	8005ba6 <UART_CheckIdleState>
 8004d54:	4603      	mov	r3, r0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d137      	bne.n	8004de8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_UART_Receive_IT+0x24>
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e030      	b.n	8004dea <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <HAL_UART_Receive_IT+0x94>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01f      	beq.n	8004dd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d018      	beq.n	8004dd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	613b      	str	r3, [r7, #16]
   return(result);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	69f9      	ldr	r1, [r7, #28]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fff8 	bl	8005dd4 <UART_Start_Receive_IT>
 8004de4:	4603      	mov	r3, r0
 8004de6:	e000      	b.n	8004dea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3728      	adds	r7, #40	@ 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40008000 	.word	0x40008000

08004df8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	@ 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d167      	bne.n	8004ee0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_UART_Transmit_DMA+0x24>
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e060      	b.n	8004ee2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2221      	movs	r2, #33	@ 0x21
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d028      	beq.n	8004ea0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e52:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <HAL_UART_Transmit_DMA+0xf4>)
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5a:	4a25      	ldr	r2, [pc, #148]	@ (8004ef0 <HAL_UART_Transmit_DMA+0xf8>)
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e62:	4a24      	ldr	r2, [pc, #144]	@ (8004ef4 <HAL_UART_Transmit_DMA+0xfc>)
 8004e64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	4619      	mov	r1, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3328      	adds	r3, #40	@ 0x28
 8004e7e:	461a      	mov	r2, r3
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	f7fc fe39 	bl	8001af8 <HAL_DMA_Start_IT>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e020      	b.n	8004ee2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2240      	movs	r2, #64	@ 0x40
 8004ea6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3308      	adds	r3, #8
 8004eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	623a      	str	r2, [r7, #32]
 8004eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	69f9      	ldr	r1, [r7, #28]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e5      	bne.n	8004ea8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	@ 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0800615f 	.word	0x0800615f
 8004ef0:	080061f9 	.word	0x080061f9
 8004ef4:	08006215 	.word	0x08006215

08004ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b0ba      	sub	sp, #232	@ 0xe8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f26:	4013      	ands	r3, r2
 8004f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11b      	bne.n	8004f6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 82e3 	beq.w	8005528 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
      }
      return;
 8004f6a:	e2dd      	b.n	8005528 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8123 	beq.w	80051bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80051b0 <HAL_UART_IRQHandler+0x2b8>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f86:	4b8b      	ldr	r3, [pc, #556]	@ (80051b4 <HAL_UART_IRQHandler+0x2bc>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8116 	beq.w	80051bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xc8>
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xf8>
 8004fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0x128>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2204      	movs	r2, #4
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005016:	f043 0202 	orr.w	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005038:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800503c:	4b5c      	ldr	r3, [pc, #368]	@ (80051b0 <HAL_UART_IRQHandler+0x2b8>)
 800503e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2208      	movs	r2, #8
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <HAL_UART_IRQHandler+0x196>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800506c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800507c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8249 	beq.w	800552c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d013      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d054      	beq.n	800519c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 ffce 	bl	8006094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005102:	2b40      	cmp	r3, #64	@ 0x40
 8005104:	d146      	bne.n	8005194 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800511c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005132:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800513e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800514a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1d9      	bne.n	8005106 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005162:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <HAL_UART_IRQHandler+0x2c0>)
 8005164:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc fd9f 	bl	8001cb0 <HAL_DMA_Abort_IT>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d019      	beq.n	80051ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005186:	4610      	mov	r0, r2
 8005188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	e00f      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9e0 	bl	8005552 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005192:	e00b      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9dc 	bl	8005552 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	e007      	b.n	80051ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f9d8 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051aa:	e1bf      	b.n	800552c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	bf00      	nop
    return;
 80051ae:	e1bd      	b.n	800552c <HAL_UART_IRQHandler+0x634>
 80051b0:	10000001 	.word	0x10000001
 80051b4:	04000120 	.word	0x04000120
 80051b8:	08006295 	.word	0x08006295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 8153 	bne.w	800546c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 814c 	beq.w	800546c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8145 	beq.w	800546c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	f040 80bb 	bne.w	8005370 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 818f 	beq.w	8005530 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800521c:	429a      	cmp	r2, r3
 800521e:	f080 8187 	bcs.w	8005530 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005228:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8087 	bne.w	800534e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800526a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800526e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005276:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1da      	bne.n	8005240 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800529a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e1      	bne.n	800528a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800531a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800532e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005330:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800533c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e4      	bne.n	800530c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005348:	4618      	mov	r0, r3
 800534a:	f7fc fc53 	bl	8001bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005360:	b29b      	uxth	r3, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8fb 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800536e:	e0df      	b.n	8005530 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80d1 	beq.w	8005534 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80cc 	beq.w	8005534 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053be:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e4      	bne.n	800539c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e1      	bne.n	80053d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	617b      	str	r3, [r7, #20]
   return(result);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e4      	bne.n	8005422 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f87d 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800546a:	e063      	b.n	8005534 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <HAL_UART_IRQHandler+0x59e>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800548c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fc5e 	bl	8006d50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005494:	e051      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d014      	beq.n	80054cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03a      	beq.n	8005538 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
    }
    return;
 80054ca:	e035      	b.n	8005538 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_UART_IRQHandler+0x5f4>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 feeb 	bl	80062c0 <UART_EndTransmit_IT>
    return;
 80054ea:	e026      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_UART_IRQHandler+0x614>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fc35 	bl	8006d74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800550a:	e016      	b.n	800553a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_UART_IRQHandler+0x642>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	2b00      	cmp	r3, #0
 800551e:	da0c      	bge.n	800553a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 fc1e 	bl	8006d62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005526:	e008      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005528:	bf00      	nop
 800552a:	e006      	b.n	800553a <HAL_UART_IRQHandler+0x642>
    return;
 800552c:	bf00      	nop
 800552e:	e004      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_UART_IRQHandler+0x642>
      return;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_UART_IRQHandler+0x642>
    return;
 8005538:	bf00      	nop
  }
}
 800553a:	37e8      	adds	r7, #232	@ 0xe8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
	...

0800557c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b08c      	sub	sp, #48	@ 0x30
 8005582:	af00      	add	r7, sp, #0
 8005584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	431a      	orrs	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	431a      	orrs	r2, r3
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b94      	ldr	r3, [pc, #592]	@ (80057fc <UART_SetConfig+0x280>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a89      	ldr	r2, [pc, #548]	@ (8005800 <UART_SetConfig+0x284>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e4:	4313      	orrs	r3, r2
 80055e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80055f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	f023 010f 	bic.w	r1, r3, #15
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7a      	ldr	r2, [pc, #488]	@ (8005804 <UART_SetConfig+0x288>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d127      	bne.n	8005670 <UART_SetConfig+0xf4>
 8005620:	2003      	movs	r0, #3
 8005622:	f7ff fb2b 	bl	8004c7c <LL_RCC_GetUSARTClockSource>
 8005626:	4603      	mov	r3, r0
 8005628:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800562c:	2b03      	cmp	r3, #3
 800562e:	d81b      	bhi.n	8005668 <UART_SetConfig+0xec>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0xbc>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	08005649 	.word	0x08005649
 800563c:	08005659 	.word	0x08005659
 8005640:	08005651 	.word	0x08005651
 8005644:	08005661 	.word	0x08005661
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e080      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005650:	2302      	movs	r3, #2
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e07c      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e078      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005666:	e074      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566e:	e070      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a64      	ldr	r2, [pc, #400]	@ (8005808 <UART_SetConfig+0x28c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d138      	bne.n	80056ec <UART_SetConfig+0x170>
 800567a:	200c      	movs	r0, #12
 800567c:	f7ff fafe 	bl	8004c7c <LL_RCC_GetUSARTClockSource>
 8005680:	4603      	mov	r3, r0
 8005682:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d82c      	bhi.n	80056e4 <UART_SetConfig+0x168>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x114>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056e5 	.word	0x080056e5
 8005698:	080056e5 	.word	0x080056e5
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080056e5 	.word	0x080056e5
 80056a8:	080056e5 	.word	0x080056e5
 80056ac:	080056e5 	.word	0x080056e5
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	080056e5 	.word	0x080056e5
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ca:	e042      	b.n	8005752 <UART_SetConfig+0x1d6>
 80056cc:	2302      	movs	r3, #2
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d2:	e03e      	b.n	8005752 <UART_SetConfig+0x1d6>
 80056d4:	2304      	movs	r3, #4
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056da:	e03a      	b.n	8005752 <UART_SetConfig+0x1d6>
 80056dc:	2308      	movs	r3, #8
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e036      	b.n	8005752 <UART_SetConfig+0x1d6>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e032      	b.n	8005752 <UART_SetConfig+0x1d6>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a43      	ldr	r2, [pc, #268]	@ (8005800 <UART_SetConfig+0x284>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d12a      	bne.n	800574c <UART_SetConfig+0x1d0>
 80056f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80056fa:	f7ff fad1 	bl	8004ca0 <LL_RCC_GetLPUARTClockSource>
 80056fe:	4603      	mov	r3, r0
 8005700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005704:	d01a      	beq.n	800573c <UART_SetConfig+0x1c0>
 8005706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800570a:	d81b      	bhi.n	8005744 <UART_SetConfig+0x1c8>
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005710:	d00c      	beq.n	800572c <UART_SetConfig+0x1b0>
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005716:	d815      	bhi.n	8005744 <UART_SetConfig+0x1c8>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <UART_SetConfig+0x1a8>
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005720:	d008      	beq.n	8005734 <UART_SetConfig+0x1b8>
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x1c8>
 8005724:	2300      	movs	r3, #0
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572a:	e012      	b.n	8005752 <UART_SetConfig+0x1d6>
 800572c:	2302      	movs	r3, #2
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005732:	e00e      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573a:	e00a      	b.n	8005752 <UART_SetConfig+0x1d6>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005742:	e006      	b.n	8005752 <UART_SetConfig+0x1d6>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574a:	e002      	b.n	8005752 <UART_SetConfig+0x1d6>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2a      	ldr	r2, [pc, #168]	@ (8005800 <UART_SetConfig+0x284>)
 8005758:	4293      	cmp	r3, r2
 800575a:	f040 80a4 	bne.w	80058a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800575e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005762:	2b08      	cmp	r3, #8
 8005764:	d823      	bhi.n	80057ae <UART_SetConfig+0x232>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <UART_SetConfig+0x1f0>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005791 	.word	0x08005791
 8005770:	080057af 	.word	0x080057af
 8005774:	08005799 	.word	0x08005799
 8005778:	080057af 	.word	0x080057af
 800577c:	0800579f 	.word	0x0800579f
 8005780:	080057af 	.word	0x080057af
 8005784:	080057af 	.word	0x080057af
 8005788:	080057af 	.word	0x080057af
 800578c:	080057a7 	.word	0x080057a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005790:	f7fd ff4a 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8005794:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005796:	e010      	b.n	80057ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <UART_SetConfig+0x290>)
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800579c:	e00d      	b.n	80057ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579e:	f7fd fe8f 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80057a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057a4:	e009      	b.n	80057ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057ac:	e005      	b.n	80057ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8137 	beq.w	8005a30 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	4a12      	ldr	r2, [pc, #72]	@ (8005810 <UART_SetConfig+0x294>)
 80057c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d305      	bcc.n	80057f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d910      	bls.n	8005814 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057f8:	e11a      	b.n	8005a30 <UART_SetConfig+0x4b4>
 80057fa:	bf00      	nop
 80057fc:	cfff69f3 	.word	0xcfff69f3
 8005800:	40008000 	.word	0x40008000
 8005804:	40013800 	.word	0x40013800
 8005808:	40004400 	.word	0x40004400
 800580c:	00f42400 	.word	0x00f42400
 8005810:	0800bd48 	.word	0x0800bd48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	2200      	movs	r2, #0
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	60fa      	str	r2, [r7, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	4a8e      	ldr	r2, [pc, #568]	@ (8005a5c <UART_SetConfig+0x4e0>)
 8005822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005826:	b29b      	uxth	r3, r3
 8005828:	2200      	movs	r2, #0
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005836:	f7fa fca7 	bl	8000188 <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	020b      	lsls	r3, r1, #8
 800584c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005850:	0202      	lsls	r2, r0, #8
 8005852:	6979      	ldr	r1, [r7, #20]
 8005854:	6849      	ldr	r1, [r1, #4]
 8005856:	0849      	lsrs	r1, r1, #1
 8005858:	2000      	movs	r0, #0
 800585a:	460c      	mov	r4, r1
 800585c:	4605      	mov	r5, r0
 800585e:	eb12 0804 	adds.w	r8, r2, r4
 8005862:	eb43 0905 	adc.w	r9, r3, r5
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	469a      	mov	sl, r3
 800586e:	4693      	mov	fp, r2
 8005870:	4652      	mov	r2, sl
 8005872:	465b      	mov	r3, fp
 8005874:	4640      	mov	r0, r8
 8005876:	4649      	mov	r1, r9
 8005878:	f7fa fc86 	bl	8000188 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4613      	mov	r3, r2
 8005882:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588a:	d308      	bcc.n	800589e <UART_SetConfig+0x322>
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005892:	d204      	bcs.n	800589e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	e0c8      	b.n	8005a30 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058a4:	e0c4      	b.n	8005a30 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ae:	d167      	bne.n	8005980 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80058b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d828      	bhi.n	800590a <UART_SetConfig+0x38e>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x344>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	0800590b 	.word	0x0800590b
 80058dc:	0800590b 	.word	0x0800590b
 80058e0:	08005903 	.word	0x08005903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fd fea0 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ea:	e014      	b.n	8005916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fd feae 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 80058f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058f2:	e010      	b.n	8005916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a60 <UART_SetConfig+0x4e4>)
 80058f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f8:	e00d      	b.n	8005916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fd fde1 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80058fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005900:	e009      	b.n	8005916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005908:	e005      	b.n	8005916 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8089 	beq.w	8005a30 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	4a4e      	ldr	r2, [pc, #312]	@ (8005a5c <UART_SetConfig+0x4e0>)
 8005924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005928:	461a      	mov	r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005930:	005a      	lsls	r2, r3, #1
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	441a      	add	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	d916      	bls.n	8005978 <UART_SetConfig+0x3fc>
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d212      	bcs.n	8005978 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f023 030f 	bic.w	r3, r3, #15
 800595a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	b29a      	uxth	r2, r3
 8005968:	8bfb      	ldrh	r3, [r7, #30]
 800596a:	4313      	orrs	r3, r2
 800596c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	8bfa      	ldrh	r2, [r7, #30]
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e05b      	b.n	8005a30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800597e:	e057      	b.n	8005a30 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005980:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005984:	2b08      	cmp	r3, #8
 8005986:	d828      	bhi.n	80059da <UART_SetConfig+0x45e>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <UART_SetConfig+0x414>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059b5 	.word	0x080059b5
 8005994:	080059bd 	.word	0x080059bd
 8005998:	080059c5 	.word	0x080059c5
 800599c:	080059db 	.word	0x080059db
 80059a0:	080059cb 	.word	0x080059cb
 80059a4:	080059db 	.word	0x080059db
 80059a8:	080059db 	.word	0x080059db
 80059ac:	080059db 	.word	0x080059db
 80059b0:	080059d3 	.word	0x080059d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b4:	f7fd fe38 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80059b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ba:	e014      	b.n	80059e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059bc:	f7fd fe46 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 80059c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059c2:	e010      	b.n	80059e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c4:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <UART_SetConfig+0x4e4>)
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059c8:	e00d      	b.n	80059e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ca:	f7fd fd79 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80059ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059d0:	e009      	b.n	80059e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059d8:	e005      	b.n	80059e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059e4:	bf00      	nop
    }

    if (pclk != 0U)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d021      	beq.n	8005a30 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <UART_SetConfig+0x4e0>)
 80059f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	441a      	add	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b0f      	cmp	r3, #15
 8005a14:	d909      	bls.n	8005a2a <UART_SetConfig+0x4ae>
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a1c:	d205      	bcs.n	8005a2a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e002      	b.n	8005a30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	@ 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0800bd48 	.word	0x0800bd48
 8005a60:	00f42400 	.word	0x00f42400

08005a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b62:	d10a      	bne.n	8005b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af02      	add	r7, sp, #8
 8005bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb6:	f7fb f8d1 	bl	8000d5c <HAL_GetTick>
 8005bba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d10e      	bne.n	8005be8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f832 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e028      	b.n	8005c3a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d10e      	bne.n	8005c14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f81c 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e012      	b.n	8005c3a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b09c      	sub	sp, #112	@ 0x70
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c52:	e0a9      	b.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c5a:	f000 80a5 	beq.w	8005da8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7fb f87d 	bl	8000d5c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d140      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c84:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c94:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cc6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cc8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e069      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d051      	beq.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d12:	d149      	bne.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d70:	623a      	str	r2, [r7, #32]
 8005d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	69f9      	ldr	r1, [r7, #28]
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e010      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4013      	ands	r3, r2
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f43f af46 	beq.w	8005c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3770      	adds	r7, #112	@ 0x70
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b0a3      	sub	sp, #140	@ 0x8c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	88fa      	ldrh	r2, [r7, #6]
 8005dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e06:	d10e      	bne.n	8005e26 <UART_Start_Receive_IT+0x52>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <UART_Start_Receive_IT+0x48>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e1a:	e02d      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e24:	e028      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10d      	bne.n	8005e4a <UART_Start_Receive_IT+0x76>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <UART_Start_Receive_IT+0x6c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	22ff      	movs	r2, #255	@ 0xff
 8005e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e3e:	e01b      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	227f      	movs	r2, #127	@ 0x7f
 8005e44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e48:	e016      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e52:	d10d      	bne.n	8005e70 <UART_Start_Receive_IT+0x9c>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <UART_Start_Receive_IT+0x92>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	227f      	movs	r2, #127	@ 0x7f
 8005e60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e64:	e008      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	223f      	movs	r2, #63	@ 0x3f
 8005e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e6e:	e003      	b.n	8005e78 <UART_Start_Receive_IT+0xa4>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2222      	movs	r2, #34	@ 0x22
 8005e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005eac:	673a      	str	r2, [r7, #112]	@ 0x70
 8005eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005eb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e3      	bne.n	8005e88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec8:	d14f      	bne.n	8005f6a <UART_Start_Receive_IT+0x196>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d349      	bcc.n	8005f6a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ede:	d107      	bne.n	8005ef0 <UART_Start_Receive_IT+0x11c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a46      	ldr	r2, [pc, #280]	@ (8006004 <UART_Start_Receive_IT+0x230>)
 8005eec:	675a      	str	r2, [r3, #116]	@ 0x74
 8005eee:	e002      	b.n	8005ef6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a45      	ldr	r2, [pc, #276]	@ (8006008 <UART_Start_Receive_IT+0x234>)
 8005ef4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01a      	beq.n	8005f34 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f22:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f54:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_Start_Receive_IT+0x160>
 8005f68:	e046      	b.n	8005ff8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f72:	d107      	bne.n	8005f84 <UART_Start_Receive_IT+0x1b0>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a23      	ldr	r2, [pc, #140]	@ (800600c <UART_Start_Receive_IT+0x238>)
 8005f80:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f82:	e002      	b.n	8005f8a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a22      	ldr	r2, [pc, #136]	@ (8006010 <UART_Start_Receive_IT+0x23c>)
 8005f88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_Start_Receive_IT+0x1be>
 8005fc4:	e018      	b.n	8005ff8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f043 0320 	orr.w	r3, r3, #32
 8005fda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	69f9      	ldr	r1, [r7, #28]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	378c      	adds	r7, #140	@ 0x8c
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	080069e9 	.word	0x080069e9
 8006008:	08006689 	.word	0x08006689
 800600c:	080064d1 	.word	0x080064d1
 8006010:	08006319 	.word	0x08006319

08006014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b08f      	sub	sp, #60	@ 0x3c
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	61fb      	str	r3, [r7, #28]
   return(result);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3308      	adds	r3, #8
 8006054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60bb      	str	r3, [r7, #8]
   return(result);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006064:	633b      	str	r3, [r7, #48]	@ 0x30
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606e:	61ba      	str	r2, [r7, #24]
 8006070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e5      	bne.n	800604e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800608a:	bf00      	nop
 800608c:	373c      	adds	r7, #60	@ 0x3c
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b095      	sub	sp, #84	@ 0x54
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80060bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e6      	bne.n	800609c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e3      	bne.n	80060ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d118      	bne.n	8006140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60bb      	str	r3, [r7, #8]
   return(result);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	647b      	str	r3, [r7, #68]	@ 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006154:	bf00      	nop
 8006156:	3754      	adds	r7, #84	@ 0x54
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b090      	sub	sp, #64	@ 0x40
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d137      	bne.n	80061ea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800617a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617c:	2200      	movs	r2, #0
 800617e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3308      	adds	r3, #8
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	623b      	str	r3, [r7, #32]
   return(result);
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800619a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80061cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	69b9      	ldr	r1, [r7, #24]
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	617b      	str	r3, [r7, #20]
   return(result);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e6      	bne.n	80061b6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061e8:	e002      	b.n	80061f0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80061ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80061ec:	f7fb f956 	bl	800149c <HAL_UART_TxCpltCallback>
}
 80061f0:	bf00      	nop
 80061f2:	3740      	adds	r7, #64	@ 0x40
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff f99a 	bl	8005540 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006230:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623c:	2b80      	cmp	r3, #128	@ 0x80
 800623e:	d109      	bne.n	8006254 <UART_DMAError+0x40>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b21      	cmp	r3, #33	@ 0x21
 8006244:	d106      	bne.n	8006254 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800624e:	6978      	ldr	r0, [r7, #20]
 8006250:	f7ff fee0 	bl	8006014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625e:	2b40      	cmp	r3, #64	@ 0x40
 8006260:	d109      	bne.n	8006276 <UART_DMAError+0x62>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b22      	cmp	r3, #34	@ 0x22
 8006266:	d106      	bne.n	8006276 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f7ff ff0f 	bl	8006094 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	f043 0210 	orr.w	r2, r3, #16
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7ff f963 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff f94d 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fb f8c7 	bl	800149c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b09c      	sub	sp, #112	@ 0x70
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006326:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006330:	2b22      	cmp	r3, #34	@ 0x22
 8006332:	f040 80be 	bne.w	80064b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006344:	b2d9      	uxtb	r1, r3
 8006346:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800634a:	b2da      	uxtb	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006350:	400a      	ands	r2, r1
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 80a1 	bne.w	80064c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800638e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800639e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80063d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e5      	bne.n	80063b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a33      	ldr	r2, [pc, #204]	@ (80064cc <UART_RxISR_8BIT+0x1b4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01f      	beq.n	8006444 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d018      	beq.n	8006444 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	623b      	str	r3, [r7, #32]
   return(result);
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006426:	663b      	str	r3, [r7, #96]	@ 0x60
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006430:	633b      	str	r3, [r7, #48]	@ 0x30
 8006432:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d12e      	bne.n	80064aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0310 	bic.w	r3, r3, #16
 8006466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	617b      	str	r3, [r7, #20]
   return(result);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b10      	cmp	r3, #16
 8006490:	d103      	bne.n	800649a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2210      	movs	r2, #16
 8006498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff f85e 	bl	8005564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064a8:	e00b      	b.n	80064c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb f80c 	bl	80014c8 <HAL_UART_RxCpltCallback>
}
 80064b0:	e007      	b.n	80064c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0208 	orr.w	r2, r2, #8
 80064c0:	619a      	str	r2, [r3, #24]
}
 80064c2:	bf00      	nop
 80064c4:	3770      	adds	r7, #112	@ 0x70
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40008000 	.word	0x40008000

080064d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b09c      	sub	sp, #112	@ 0x70
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064e8:	2b22      	cmp	r3, #34	@ 0x22
 80064ea:	f040 80be 	bne.w	800666a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80064fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006506:	4013      	ands	r3, r2
 8006508:	b29a      	uxth	r2, r3
 800650a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800650c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80a1 	bne.w	800667a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800654c:	667b      	str	r3, [r7, #100]	@ 0x64
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006556:	657b      	str	r3, [r7, #84]	@ 0x54
 8006558:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800655c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e6      	bne.n	8006538 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	663b      	str	r3, [r7, #96]	@ 0x60
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800658a:	643a      	str	r2, [r7, #64]	@ 0x40
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a33      	ldr	r2, [pc, #204]	@ (8006684 <UART_RxISR_16BIT+0x1b4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d01f      	beq.n	80065fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d018      	beq.n	80065fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e6      	bne.n	80065ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d12e      	bne.n	8006662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60bb      	str	r3, [r7, #8]
   return(result);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0310 	bic.w	r3, r3, #16
 800661e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6979      	ldr	r1, [r7, #20]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	613b      	str	r3, [r7, #16]
   return(result);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b10      	cmp	r3, #16
 8006648:	d103      	bne.n	8006652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2210      	movs	r2, #16
 8006650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fe ff82 	bl	8005564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006660:	e00b      	b.n	800667a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fa ff30 	bl	80014c8 <HAL_UART_RxCpltCallback>
}
 8006668:	e007      	b.n	800667a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0208 	orr.w	r2, r2, #8
 8006678:	619a      	str	r2, [r3, #24]
}
 800667a:	bf00      	nop
 800667c:	3770      	adds	r7, #112	@ 0x70
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40008000 	.word	0x40008000

08006688 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ac      	sub	sp, #176	@ 0xb0
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006696:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066be:	2b22      	cmp	r3, #34	@ 0x22
 80066c0:	f040 8182 	bne.w	80069c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066ce:	e125      	b.n	800691c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	400a      	ands	r2, r1
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d053      	beq.n	80067ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d011      	beq.n	8006752 <UART_RxISR_8BIT_FIFOEN+0xca>
 800672e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006748:	f043 0201 	orr.w	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d011      	beq.n	8006782 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800675e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2202      	movs	r2, #2
 8006770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006778:	f043 0204 	orr.w	r2, r3, #4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d011      	beq.n	80067b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800678e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2204      	movs	r2, #4
 80067a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a8:	f043 0202 	orr.w	r2, r3, #2
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fe fec8 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80a2 	bne.w	800691c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80067e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006800:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e4      	bne.n	80067d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800681e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006836:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006838:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800683c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e1      	bne.n	800680e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a5f      	ldr	r2, [pc, #380]	@ (80069e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d021      	beq.n	80068ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01a      	beq.n	80068ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006886:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800688a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006898:	657b      	str	r3, [r7, #84]	@ 0x54
 800689a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800689e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e4      	bne.n	8006876 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d130      	bne.n	8006916 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e4      	bne.n	80068ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d103      	bne.n	8006906 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2210      	movs	r2, #16
 8006904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fe fe28 	bl	8005564 <HAL_UARTEx_RxEventCallback>
 8006914:	e002      	b.n	800691c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fa fdd6 	bl	80014c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800691c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f aecf 	bne.w	80066d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006938:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800693c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006940:	2b00      	cmp	r3, #0
 8006942:	d049      	beq.n	80069d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800694a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800694e:	429a      	cmp	r2, r3
 8006950:	d242      	bcs.n	80069d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	61fb      	str	r3, [r7, #28]
   return(result);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800697c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e3      	bne.n	8006952 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800698e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	60bb      	str	r3, [r7, #8]
   return(result);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f043 0320 	orr.w	r3, r3, #32
 80069a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e4      	bne.n	8006990 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069c6:	e007      	b.n	80069d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0208 	orr.w	r2, r2, #8
 80069d6:	619a      	str	r2, [r3, #24]
}
 80069d8:	bf00      	nop
 80069da:	37b0      	adds	r7, #176	@ 0xb0
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40008000 	.word	0x40008000
 80069e4:	08006319 	.word	0x08006319

080069e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b0ae      	sub	sp, #184	@ 0xb8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a1e:	2b22      	cmp	r3, #34	@ 0x22
 8006a20:	f040 8186 	bne.w	8006d30 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a2e:	e129      	b.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006a42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006a46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	1c9a      	adds	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d053      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	f043 0201 	orr.w	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d011      	beq.n	8006ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d011      	beq.n	8006b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2204      	movs	r2, #4
 8006b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0c:	f043 0202 	orr.w	r2, r3, #2
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fe fd16 	bl	8005552 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 80a4 	bne.w	8006c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e2      	bne.n	8006b3c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e1      	bne.n	8006b76 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a5f      	ldr	r2, [pc, #380]	@ (8006d48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d021      	beq.n	8006c14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01a      	beq.n	8006c14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e4      	bne.n	8006bde <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d130      	bne.n	8006c7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e4      	bne.n	8006c22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d103      	bne.n	8006c6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe fc74 	bl	8005564 <HAL_UARTEx_RxEventCallback>
 8006c7c:	e002      	b.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fa fc22 	bl	80014c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f47f aecb 	bne.w	8006a30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ca0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ca4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d049      	beq.n	8006d40 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006cb2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d242      	bcs.n	8006d40 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006cde:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006cf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f043 0320 	orr.w	r3, r3, #32
 8006d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	69b9      	ldr	r1, [r7, #24]
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	617b      	str	r3, [r7, #20]
   return(result);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e4      	bne.n	8006cf8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d2e:	e007      	b.n	8006d40 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	619a      	str	r2, [r3, #24]
}
 8006d40:	bf00      	nop
 8006d42:	37b8      	adds	r7, #184	@ 0xb8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40008000 	.word	0x40008000
 8006d4c:	080064d1 	.word	0x080064d1

08006d50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b088      	sub	sp, #32
 8006d8a:	af02      	add	r7, sp, #8
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e046      	b.n	8006e34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2224      	movs	r2, #36	@ 0x24
 8006db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d105      	bne.n	8006dec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006de0:	1d3b      	adds	r3, r7, #4
 8006de2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f911 	bl	800700e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dfc:	f7f9 ffae 	bl	8000d5c <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7fe ff16 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	75fb      	strb	r3, [r7, #23]
 8006e20:	e003      	b.n	8006e2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b089      	sub	sp, #36	@ 0x24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UARTEx_EnableStopMode+0x16>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e021      	b.n	8006e96 <HAL_UARTEx_EnableStopMode+0x5a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f043 0302 	orr.w	r3, r3, #2
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6979      	ldr	r1, [r7, #20]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	613b      	str	r3, [r7, #16]
   return(result);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e6      	bne.n	8006e5a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3724      	adds	r7, #36	@ 0x24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UARTEx_EnableFifoMode+0x16>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e02b      	b.n	8006f0e <HAL_UARTEx_EnableFifoMode+0x6e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2224      	movs	r2, #36	@ 0x24
 8006ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ee4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006eec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8ac 	bl	8007054 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e02d      	b.n	8006f8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2224      	movs	r2, #36	@ 0x24
 8006f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f872 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e02d      	b.n	8007006 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2224      	movs	r2, #36	@ 0x24
 8006fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f834 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	1d3b      	adds	r3, r7, #4
 8007018:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f023 0210 	bic.w	r2, r3, #16
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	4619      	mov	r1, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800703c:	7abb      	ldrb	r3, [r7, #10]
 800703e:	061a      	lsls	r2, r3, #24
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
}
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
	...

08007054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007074:	e031      	b.n	80070da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007076:	2308      	movs	r3, #8
 8007078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800707a:	2308      	movs	r3, #8
 800707c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	0e5b      	lsrs	r3, r3, #25
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	0f5b      	lsrs	r3, r3, #29
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	7b3a      	ldrb	r2, [r7, #12]
 80070a2:	4910      	ldr	r1, [pc, #64]	@ (80070e4 <UARTEx_SetNbDataToProcess+0x90>)
 80070a4:	5c8a      	ldrb	r2, [r1, r2]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070aa:	7b3a      	ldrb	r2, [r7, #12]
 80070ac:	490e      	ldr	r1, [pc, #56]	@ (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	7b7a      	ldrb	r2, [r7, #13]
 80070c0:	4908      	ldr	r1, [pc, #32]	@ (80070e4 <UARTEx_SetNbDataToProcess+0x90>)
 80070c2:	5c8a      	ldrb	r2, [r1, r2]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070c8:	7b7a      	ldrb	r2, [r7, #13]
 80070ca:	4907      	ldr	r1, [pc, #28]	@ (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	0800bd60 	.word	0x0800bd60
 80070e8:	0800bd68 	.word	0x0800bd68

080070ec <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80070f4:	4a24      	ldr	r2, [pc, #144]	@ (8007188 <RadioInit+0x9c>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80070fa:	4b24      	ldr	r3, [pc, #144]	@ (800718c <RadioInit+0xa0>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007100:	4b22      	ldr	r3, [pc, #136]	@ (800718c <RadioInit+0xa0>)
 8007102:	2200      	movs	r2, #0
 8007104:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007106:	4b21      	ldr	r3, [pc, #132]	@ (800718c <RadioInit+0xa0>)
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800710c:	4b1f      	ldr	r3, [pc, #124]	@ (800718c <RadioInit+0xa0>)
 800710e:	2200      	movs	r2, #0
 8007110:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007112:	481f      	ldr	r0, [pc, #124]	@ (8007190 <RadioInit+0xa4>)
 8007114:	f001 ffc0 	bl	8009098 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007118:	4b1c      	ldr	r3, [pc, #112]	@ (800718c <RadioInit+0xa0>)
 800711a:	2200      	movs	r2, #0
 800711c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800711e:	4b1b      	ldr	r3, [pc, #108]	@ (800718c <RadioInit+0xa0>)
 8007120:	2200      	movs	r2, #0
 8007122:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007124:	f002 fa54 	bl	80095d0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007128:	2100      	movs	r1, #0
 800712a:	2000      	movs	r0, #0
 800712c:	f002 fe20 	bl	8009d70 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007130:	2204      	movs	r2, #4
 8007132:	2100      	movs	r1, #0
 8007134:	2001      	movs	r0, #1
 8007136:	f002 fbdd 	bl	80098f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800713a:	2300      	movs	r3, #0
 800713c:	2200      	movs	r2, #0
 800713e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007142:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007146:	f002 fb0d 	bl	8009764 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800714a:	f000 fe99 	bl	8007e80 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <RadioInit+0xa8>)
 8007154:	2200      	movs	r2, #0
 8007156:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800715a:	480f      	ldr	r0, [pc, #60]	@ (8007198 <RadioInit+0xac>)
 800715c:	f003 ff9c 	bl	800b098 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007160:	2300      	movs	r3, #0
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <RadioInit+0xb0>)
 8007166:	2200      	movs	r2, #0
 8007168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800716c:	480c      	ldr	r0, [pc, #48]	@ (80071a0 <RadioInit+0xb4>)
 800716e:	f003 ff93 	bl	800b098 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007172:	4809      	ldr	r0, [pc, #36]	@ (8007198 <RadioInit+0xac>)
 8007174:	f004 f834 	bl	800b1e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007178:	4809      	ldr	r0, [pc, #36]	@ (80071a0 <RadioInit+0xb4>)
 800717a:	f004 f831 	bl	800b1e0 <UTIL_TIMER_Stop>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000284 	.word	0x20000284
 800718c:	20000288 	.word	0x20000288
 8007190:	08008275 	.word	0x08008275
 8007194:	080081fd 	.word	0x080081fd
 8007198:	200002e4 	.word	0x200002e4
 800719c:	08008211 	.word	0x08008211
 80071a0:	200002fc 	.word	0x200002fc

080071a4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80071a8:	f001 ffbe 	bl	8009128 <SUBGRF_GetOperatingMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b07      	cmp	r3, #7
 80071b0:	d00a      	beq.n	80071c8 <RadioGetStatus+0x24>
 80071b2:	2b07      	cmp	r3, #7
 80071b4:	dc0a      	bgt.n	80071cc <RadioGetStatus+0x28>
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d002      	beq.n	80071c0 <RadioGetStatus+0x1c>
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d002      	beq.n	80071c4 <RadioGetStatus+0x20>
 80071be:	e005      	b.n	80071cc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e004      	b.n	80071ce <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e002      	b.n	80071ce <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e000      	b.n	80071ce <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80071cc:	2300      	movs	r3, #0
    }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80071de:	4a2a      	ldr	r2, [pc, #168]	@ (8007288 <RadioSetModem+0xb4>)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f003 f995 	bl	800a516 <RFW_SetRadioModem>
    switch( modem )
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d80e      	bhi.n	8007210 <RadioSetModem+0x3c>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <RadioSetModem+0x24>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800721f 	.word	0x0800721f
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	08007211 	.word	0x08007211
 8007204:	08007253 	.word	0x08007253
 8007208:	08007261 	.word	0x08007261
 800720c:	0800726f 	.word	0x0800726f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007210:	2003      	movs	r0, #3
 8007212:	f002 fb49 	bl	80098a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007216:	4b1c      	ldr	r3, [pc, #112]	@ (8007288 <RadioSetModem+0xb4>)
 8007218:	2200      	movs	r2, #0
 800721a:	735a      	strb	r2, [r3, #13]
        break;
 800721c:	e02f      	b.n	800727e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800721e:	2000      	movs	r0, #0
 8007220:	f002 fb42 	bl	80098a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007224:	4b18      	ldr	r3, [pc, #96]	@ (8007288 <RadioSetModem+0xb4>)
 8007226:	2200      	movs	r2, #0
 8007228:	735a      	strb	r2, [r3, #13]
        break;
 800722a:	e028      	b.n	800727e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800722c:	2001      	movs	r0, #1
 800722e:	f002 fb3b 	bl	80098a8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007232:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <RadioSetModem+0xb4>)
 8007234:	7b5a      	ldrb	r2, [r3, #13]
 8007236:	4b14      	ldr	r3, [pc, #80]	@ (8007288 <RadioSetModem+0xb4>)
 8007238:	7b1b      	ldrb	r3, [r3, #12]
 800723a:	429a      	cmp	r2, r3
 800723c:	d01e      	beq.n	800727c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800723e:	4b12      	ldr	r3, [pc, #72]	@ (8007288 <RadioSetModem+0xb4>)
 8007240:	7b1a      	ldrb	r2, [r3, #12]
 8007242:	4b11      	ldr	r3, [pc, #68]	@ (8007288 <RadioSetModem+0xb4>)
 8007244:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007246:	4b10      	ldr	r3, [pc, #64]	@ (8007288 <RadioSetModem+0xb4>)
 8007248:	7b5b      	ldrb	r3, [r3, #13]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 ffa0 	bl	8008190 <RadioSetPublicNetwork>
        }
        break;
 8007250:	e014      	b.n	800727c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007252:	2002      	movs	r0, #2
 8007254:	f002 fb28 	bl	80098a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007258:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <RadioSetModem+0xb4>)
 800725a:	2200      	movs	r2, #0
 800725c:	735a      	strb	r2, [r3, #13]
        break;
 800725e:	e00e      	b.n	800727e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007260:	2002      	movs	r0, #2
 8007262:	f002 fb21 	bl	80098a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007266:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <RadioSetModem+0xb4>)
 8007268:	2200      	movs	r2, #0
 800726a:	735a      	strb	r2, [r3, #13]
        break;
 800726c:	e007      	b.n	800727e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800726e:	2000      	movs	r0, #0
 8007270:	f002 fb1a 	bl	80098a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007274:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <RadioSetModem+0xb4>)
 8007276:	2200      	movs	r2, #0
 8007278:	735a      	strb	r2, [r3, #13]
        break;
 800727a:	e000      	b.n	800727e <RadioSetModem+0xaa>
        break;
 800727c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000288 	.word	0x20000288

0800728c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f002 fac1 	bl	800981c <SUBGRF_SetRfFrequency>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b090      	sub	sp, #64	@ 0x40
 80072a6:	af0a      	add	r7, sp, #40	@ 0x28
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80072be:	f000 fdf2 	bl	8007ea6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80072c2:	2000      	movs	r0, #0
 80072c4:	f7ff ff86 	bl	80071d4 <RadioSetModem>

    RadioSetChannel( freq );
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff ffdf 	bl	800728c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80072ce:	2301      	movs	r3, #1
 80072d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d2:	2300      	movs	r3, #0
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	2300      	movs	r3, #0
 80072d8:	9307      	str	r3, [sp, #28]
 80072da:	2300      	movs	r3, #0
 80072dc:	9306      	str	r3, [sp, #24]
 80072de:	2300      	movs	r3, #0
 80072e0:	9305      	str	r3, [sp, #20]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9303      	str	r3, [sp, #12]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9302      	str	r3, [sp, #8]
 80072ee:	2303      	movs	r3, #3
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	2000      	movs	r0, #0
 8007300:	f000 f83c 	bl	800737c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007304:	2000      	movs	r0, #0
 8007306:	f000 fdd5 	bl	8007eb4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800730a:	f000 ff6f 	bl	80081ec <RadioGetWakeupTime>
 800730e:	4603      	mov	r3, r0
 8007310:	4618      	mov	r0, r3
 8007312:	f7f9 fd37 	bl	8000d84 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007316:	f004 f87d 	bl	800b414 <UTIL_TIMER_GetCurrentTime>
 800731a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800731c:	e00d      	b.n	800733a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800731e:	2000      	movs	r0, #0
 8007320:	f000 feb6 	bl	8008090 <RadioRssi>
 8007324:	4603      	mov	r3, r0
 8007326:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007328:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800732c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007330:	429a      	cmp	r2, r3
 8007332:	dd02      	ble.n	800733a <RadioIsChannelFree+0x98>
        {
            status = false;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]
            break;
 8007338:	e006      	b.n	8007348 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f004 f87c 	bl	800b438 <UTIL_TIMER_GetElapsedTime>
 8007340:	4602      	mov	r2, r0
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	4293      	cmp	r3, r2
 8007346:	d8ea      	bhi.n	800731e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007348:	f000 fdad 	bl	8007ea6 <RadioStandby>

    return status;
 800734c:	7dfb      	ldrb	r3, [r7, #23]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	2000      	movs	r0, #0
 8007368:	f002 f9fc 	bl	8009764 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800736c:	f001 ffad 	bl	80092ca <SUBGRF_GetRandom>
 8007370:	6078      	str	r0, [r7, #4]

    return rnd;
 8007372:	687b      	ldr	r3, [r7, #4]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	@ 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	461a      	mov	r2, r3
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]
 800738c:	4613      	mov	r3, r2
 800738e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007390:	4ab9      	ldr	r2, [pc, #740]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007392:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007396:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007398:	f003 f87b 	bl	800a492 <RFW_DeInit>
    if( rxContinuous == true )
 800739c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80073a8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80073b0:	4ab2      	ldr	r2, [pc, #712]	@ (800767c <RadioSetRxConfig+0x300>)
 80073b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80073b6:	7013      	strb	r3, [r2, #0]
 80073b8:	e002      	b.n	80073c0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80073ba:	4bb0      	ldr	r3, [pc, #704]	@ (800767c <RadioSetRxConfig+0x300>)
 80073bc:	22ff      	movs	r2, #255	@ 0xff
 80073be:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d009      	beq.n	80073da <RadioSetRxConfig+0x5e>
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	f300 81d7 	bgt.w	800777a <RadioSetRxConfig+0x3fe>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80bf 	beq.w	8007550 <RadioSetRxConfig+0x1d4>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	f000 8124 	beq.w	8007620 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80073d8:	e1cf      	b.n	800777a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80073da:	2001      	movs	r0, #1
 80073dc:	f002 f8ba 	bl	8009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80073e0:	4ba5      	ldr	r3, [pc, #660]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80073e8:	4aa3      	ldr	r2, [pc, #652]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80073ee:	4ba2      	ldr	r3, [pc, #648]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80073f0:	2209      	movs	r2, #9
 80073f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80073f6:	4ba0      	ldr	r3, [pc, #640]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80073f8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	f002 ff7a 	bl	800a2f8 <SUBGRF_GetFskBandwidthRegValue>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	4b9b      	ldr	r3, [pc, #620]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800740a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800740e:	4b9a      	ldr	r3, [pc, #616]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007410:	2200      	movs	r2, #0
 8007412:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007414:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	b29a      	uxth	r2, r3
 800741a:	4b97      	ldr	r3, [pc, #604]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800741c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800741e:	4b96      	ldr	r3, [pc, #600]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007420:	2200      	movs	r2, #0
 8007422:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007424:	4b94      	ldr	r3, [pc, #592]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007426:	2210      	movs	r2, #16
 8007428:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800742a:	4b93      	ldr	r3, [pc, #588]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800742c:	2200      	movs	r2, #0
 800742e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007430:	4b91      	ldr	r3, [pc, #580]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007432:	2200      	movs	r2, #0
 8007434:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007436:	4b91      	ldr	r3, [pc, #580]	@ (800767c <RadioSetRxConfig+0x300>)
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	4b8f      	ldr	r3, [pc, #572]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800743c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800743e:	4b8e      	ldr	r3, [pc, #568]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007440:	2201      	movs	r2, #1
 8007442:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007444:	4b8c      	ldr	r3, [pc, #560]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007446:	2200      	movs	r2, #0
 8007448:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800744a:	2005      	movs	r0, #5
 800744c:	f7ff fec2 	bl	80071d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007450:	488b      	ldr	r0, [pc, #556]	@ (8007680 <RadioSetRxConfig+0x304>)
 8007452:	f002 fb1d 	bl	8009a90 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007456:	488b      	ldr	r0, [pc, #556]	@ (8007684 <RadioSetRxConfig+0x308>)
 8007458:	f002 fbec 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800745c:	4a8a      	ldr	r2, [pc, #552]	@ (8007688 <RadioSetRxConfig+0x30c>)
 800745e:	f107 031c 	add.w	r3, r7, #28
 8007462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007466:	e883 0003 	stmia.w	r3, {r0, r1}
 800746a:	f107 031c 	add.w	r3, r7, #28
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fea9 	bl	80091c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007474:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007478:	f001 fef4 	bl	8009264 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800747c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007480:	f000 fe24 	bl	80080cc <RadioRead>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800748a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800748e:	f023 0310 	bic.w	r3, r3, #16
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800749a:	4619      	mov	r1, r3
 800749c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80074a0:	f000 fe02 	bl	80080a8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80074a4:	2104      	movs	r1, #4
 80074a6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80074aa:	f000 fdfd 	bl	80080a8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80074ae:	f640 009b 	movw	r0, #2203	@ 0x89b
 80074b2:	f000 fe0b 	bl	80080cc <RadioRead>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074c0:	f023 031c 	bic.w	r3, r3, #28
 80074c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074cc:	f043 0308 	orr.w	r3, r3, #8
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	4619      	mov	r1, r3
 80074d4:	f640 009b 	movw	r0, #2203	@ 0x89b
 80074d8:	f000 fde6 	bl	80080a8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80074dc:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80074e0:	f000 fdf4 	bl	80080cc <RadioRead>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80074ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074ee:	f023 0318 	bic.w	r3, r3, #24
 80074f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80074f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074fa:	f043 0318 	orr.w	r3, r3, #24
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007506:	f000 fdcf 	bl	80080a8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800750a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800750e:	f000 fddd 	bl	80080cc <RadioRead>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800751c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007528:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007534:	f000 fdb8 	bl	80080a8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007538:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800753a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	4a4b      	ldr	r2, [pc, #300]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800754c:	6093      	str	r3, [r2, #8]
            break;
 800754e:	e115      	b.n	800777c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007550:	2000      	movs	r0, #0
 8007552:	f001 ffff 	bl	8009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007556:	4b48      	ldr	r3, [pc, #288]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800755e:	4a46      	ldr	r2, [pc, #280]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007564:	4b44      	ldr	r3, [pc, #272]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007566:	220b      	movs	r2, #11
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800756c:	68b8      	ldr	r0, [r7, #8]
 800756e:	f002 fec3 	bl	800a2f8 <SUBGRF_GetFskBandwidthRegValue>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	4b40      	ldr	r3, [pc, #256]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800757c:	4b3e      	ldr	r3, [pc, #248]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800757e:	2200      	movs	r2, #0
 8007580:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007582:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	b29a      	uxth	r2, r3
 8007588:	4b3b      	ldr	r3, [pc, #236]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800758a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800758c:	4b3a      	ldr	r3, [pc, #232]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800758e:	2204      	movs	r2, #4
 8007590:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007592:	4b39      	ldr	r3, [pc, #228]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007594:	2218      	movs	r2, #24
 8007596:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007598:	4b37      	ldr	r3, [pc, #220]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800759a:	2200      	movs	r2, #0
 800759c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800759e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80075a2:	f083 0301 	eor.w	r3, r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80075ac:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80075ae:	4b33      	ldr	r3, [pc, #204]	@ (800767c <RadioSetRxConfig+0x300>)
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80075b4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80075b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80075be:	4b2e      	ldr	r3, [pc, #184]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80075c0:	22f2      	movs	r2, #242	@ 0xf2
 80075c2:	75da      	strb	r2, [r3, #23]
 80075c4:	e002      	b.n	80075cc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80075c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80075cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80075d2:	f000 fc68 	bl	8007ea6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80075d6:	2000      	movs	r0, #0
 80075d8:	f7ff fdfc 	bl	80071d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075dc:	4828      	ldr	r0, [pc, #160]	@ (8007680 <RadioSetRxConfig+0x304>)
 80075de:	f002 fa57 	bl	8009a90 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075e2:	4828      	ldr	r0, [pc, #160]	@ (8007684 <RadioSetRxConfig+0x308>)
 80075e4:	f002 fb26 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80075e8:	4a28      	ldr	r2, [pc, #160]	@ (800768c <RadioSetRxConfig+0x310>)
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80075f6:	f107 0314 	add.w	r3, r7, #20
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fde3 	bl	80091c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007600:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007604:	f001 fe2e 	bl	8009264 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007608:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800760a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	4a17      	ldr	r2, [pc, #92]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800761c:	6093      	str	r3, [r2, #8]
            break;
 800761e:	e0ad      	b.n	800777c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007620:	2000      	movs	r0, #0
 8007622:	f001 ff97 	bl	8009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007626:	4b14      	ldr	r3, [pc, #80]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007638:	4a15      	ldr	r2, [pc, #84]	@ (8007690 <RadioSetRxConfig+0x314>)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4413      	add	r3, r2
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007646:	4a0c      	ldr	r2, [pc, #48]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <RadioSetRxConfig+0x2e4>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b0b      	cmp	r3, #11
 8007658:	d008      	beq.n	800766c <RadioSetRxConfig+0x2f0>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b0c      	cmp	r3, #12
 800765e:	d005      	beq.n	800766c <RadioSetRxConfig+0x2f0>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d116      	bne.n	8007694 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d113      	bne.n	8007694 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <RadioSetRxConfig+0x2fc>)
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007674:	e012      	b.n	800769c <RadioSetRxConfig+0x320>
 8007676:	bf00      	nop
 8007678:	20000288 	.word	0x20000288
 800767c:	20000008 	.word	0x20000008
 8007680:	200002c0 	.word	0x200002c0
 8007684:	20000296 	.word	0x20000296
 8007688:	0800bb58 	.word	0x0800bb58
 800768c:	0800bb60 	.word	0x0800bb60
 8007690:	0800bdfc 	.word	0x0800bdfc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007694:	4b3b      	ldr	r3, [pc, #236]	@ (8007784 <RadioSetRxConfig+0x408>)
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800769c:	4b39      	ldr	r3, [pc, #228]	@ (8007784 <RadioSetRxConfig+0x408>)
 800769e:	2201      	movs	r2, #1
 80076a0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80076a2:	4b38      	ldr	r3, [pc, #224]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d004      	beq.n	80076b6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80076ac:	4b35      	ldr	r3, [pc, #212]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80076b2:	2b06      	cmp	r3, #6
 80076b4:	d10a      	bne.n	80076cc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80076b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076b8:	2b0b      	cmp	r3, #11
 80076ba:	d803      	bhi.n	80076c4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80076bc:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076be:	220c      	movs	r2, #12
 80076c0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80076c2:	e006      	b.n	80076d2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80076c4:	4a2f      	ldr	r2, [pc, #188]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076c8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80076ca:	e002      	b.n	80076d2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80076cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076d0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80076d2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80076d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076d8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80076da:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <RadioSetRxConfig+0x40c>)
 80076dc:	781a      	ldrb	r2, [r3, #0]
 80076de:	4b29      	ldr	r3, [pc, #164]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076e0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80076e2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80076e6:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076e8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80076ec:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80076f0:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <RadioSetRxConfig+0x408>)
 80076f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80076f6:	f000 fbd6 	bl	8007ea6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80076fa:	2001      	movs	r0, #1
 80076fc:	f7ff fd6a 	bl	80071d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007700:	4822      	ldr	r0, [pc, #136]	@ (800778c <RadioSetRxConfig+0x410>)
 8007702:	f002 f9c5 	bl	8009a90 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007706:	4822      	ldr	r0, [pc, #136]	@ (8007790 <RadioSetRxConfig+0x414>)
 8007708:	f002 fa94 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800770c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800770e:	b2db      	uxtb	r3, r3
 8007710:	4618      	mov	r0, r3
 8007712:	f001 ff2e 	bl	8009572 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007716:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800771a:	f002 fbe7 	bl	8009eec <SUBGRF_ReadRegister>
 800771e:	4603      	mov	r3, r0
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800772c:	f002 fbca 	bl	8009ec4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007730:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <RadioSetRxConfig+0x408>)
 8007732:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10d      	bne.n	8007756 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800773a:	f240 7036 	movw	r0, #1846	@ 0x736
 800773e:	f002 fbd5 	bl	8009eec <SUBGRF_ReadRegister>
 8007742:	4603      	mov	r3, r0
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	b2db      	uxtb	r3, r3
 800774a:	4619      	mov	r1, r3
 800774c:	f240 7036 	movw	r0, #1846	@ 0x736
 8007750:	f002 fbb8 	bl	8009ec4 <SUBGRF_WriteRegister>
 8007754:	e00c      	b.n	8007770 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007756:	f240 7036 	movw	r0, #1846	@ 0x736
 800775a:	f002 fbc7 	bl	8009eec <SUBGRF_ReadRegister>
 800775e:	4603      	mov	r3, r0
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	b2db      	uxtb	r3, r3
 8007766:	4619      	mov	r1, r3
 8007768:	f240 7036 	movw	r0, #1846	@ 0x736
 800776c:	f002 fbaa 	bl	8009ec4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <RadioSetRxConfig+0x408>)
 8007772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007776:	609a      	str	r2, [r3, #8]
            break;
 8007778:	e000      	b.n	800777c <RadioSetRxConfig+0x400>
            break;
 800777a:	bf00      	nop
    }
}
 800777c:	bf00      	nop
 800777e:	3728      	adds	r7, #40	@ 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000288 	.word	0x20000288
 8007788:	20000008 	.word	0x20000008
 800778c:	200002c0 	.word	0x200002c0
 8007790:	20000296 	.word	0x20000296

08007794 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60ba      	str	r2, [r7, #8]
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	460b      	mov	r3, r1
 80077a4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80077a6:	f002 fe74 	bl	800a492 <RFW_DeInit>
    switch( modem )
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	f000 80c7 	beq.w	8007940 <RadioSetTxConfig+0x1ac>
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	f300 80d6 	bgt.w	8007964 <RadioSetTxConfig+0x1d0>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <RadioSetTxConfig+0x2e>
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d059      	beq.n	8007874 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80077c0:	e0d0      	b.n	8007964 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80077c2:	4b77      	ldr	r3, [pc, #476]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80077ca:	4a75      	ldr	r2, [pc, #468]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80077d0:	4b73      	ldr	r3, [pc, #460]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077d2:	220b      	movs	r2, #11
 80077d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f002 fd8d 	bl	800a2f8 <SUBGRF_GetFskBandwidthRegValue>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	4b6f      	ldr	r3, [pc, #444]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80077e8:	4a6d      	ldr	r2, [pc, #436]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80077ee:	4b6c      	ldr	r3, [pc, #432]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80077f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	4b69      	ldr	r3, [pc, #420]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80077fc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80077fe:	4b68      	ldr	r3, [pc, #416]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007800:	2204      	movs	r2, #4
 8007802:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007804:	4b66      	ldr	r3, [pc, #408]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007806:	2218      	movs	r2, #24
 8007808:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800780a:	4b65      	ldr	r3, [pc, #404]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 800780c:	2200      	movs	r2, #0
 800780e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007810:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007814:	f083 0301 	eor.w	r3, r3, #1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	4b60      	ldr	r3, [pc, #384]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 800781e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007820:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007828:	4b5d      	ldr	r3, [pc, #372]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 800782a:	22f2      	movs	r2, #242	@ 0xf2
 800782c:	75da      	strb	r2, [r3, #23]
 800782e:	e002      	b.n	8007836 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007830:	4b5b      	ldr	r3, [pc, #364]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007832:	2201      	movs	r2, #1
 8007834:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007836:	4b5a      	ldr	r3, [pc, #360]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007838:	2201      	movs	r2, #1
 800783a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800783c:	f000 fb33 	bl	8007ea6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007840:	2000      	movs	r0, #0
 8007842:	f7ff fcc7 	bl	80071d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007846:	4857      	ldr	r0, [pc, #348]	@ (80079a4 <RadioSetTxConfig+0x210>)
 8007848:	f002 f922 	bl	8009a90 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800784c:	4856      	ldr	r0, [pc, #344]	@ (80079a8 <RadioSetTxConfig+0x214>)
 800784e:	f002 f9f1 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007852:	4a56      	ldr	r2, [pc, #344]	@ (80079ac <RadioSetTxConfig+0x218>)
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800785c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fcae 	bl	80091c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800786a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800786e:	f001 fcf9 	bl	8009264 <SUBGRF_SetWhiteningSeed>
            break;
 8007872:	e078      	b.n	8007966 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007874:	4b4a      	ldr	r3, [pc, #296]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	b2da      	uxtb	r2, r3
 8007880:	4b47      	ldr	r3, [pc, #284]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007886:	4a4a      	ldr	r2, [pc, #296]	@ (80079b0 <RadioSetTxConfig+0x21c>)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	4b44      	ldr	r3, [pc, #272]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007894:	4a42      	ldr	r2, [pc, #264]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007896:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800789a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <RadioSetTxConfig+0x11c>
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b0b      	cmp	r3, #11
 80078a8:	d008      	beq.n	80078bc <RadioSetTxConfig+0x128>
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	2b0c      	cmp	r3, #12
 80078ae:	d005      	beq.n	80078bc <RadioSetTxConfig+0x128>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	2b0c      	cmp	r3, #12
 80078ba:	d104      	bne.n	80078c6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80078bc:	4b38      	ldr	r3, [pc, #224]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80078c4:	e003      	b.n	80078ce <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80078c6:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80078ce:	4b34      	ldr	r3, [pc, #208]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80078d4:	4b32      	ldr	r3, [pc, #200]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d004      	beq.n	80078e8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80078de:	4b30      	ldr	r3, [pc, #192]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80078e4:	2b06      	cmp	r3, #6
 80078e6:	d10a      	bne.n	80078fe <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80078e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80078ea:	2b0b      	cmp	r3, #11
 80078ec:	d803      	bhi.n	80078f6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80078ee:	4b2c      	ldr	r3, [pc, #176]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078f0:	220c      	movs	r2, #12
 80078f2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80078f4:	e006      	b.n	8007904 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078f6:	4a2a      	ldr	r2, [pc, #168]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 80078f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80078fa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80078fc:	e002      	b.n	8007904 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078fe:	4a28      	ldr	r2, [pc, #160]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007900:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007902:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007904:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007908:	4b25      	ldr	r3, [pc, #148]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 800790a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800790c:	4b29      	ldr	r3, [pc, #164]	@ (80079b4 <RadioSetTxConfig+0x220>)
 800790e:	781a      	ldrb	r2, [r3, #0]
 8007910:	4b23      	ldr	r3, [pc, #140]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007912:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007914:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007918:	4b21      	ldr	r3, [pc, #132]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 800791a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800791e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007922:	4b1f      	ldr	r3, [pc, #124]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007928:	f000 fabd 	bl	8007ea6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800792c:	2001      	movs	r0, #1
 800792e:	f7ff fc51 	bl	80071d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007932:	481c      	ldr	r0, [pc, #112]	@ (80079a4 <RadioSetTxConfig+0x210>)
 8007934:	f002 f8ac 	bl	8009a90 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007938:	481b      	ldr	r0, [pc, #108]	@ (80079a8 <RadioSetTxConfig+0x214>)
 800793a:	f002 f97b 	bl	8009c34 <SUBGRF_SetPacketParams>
            break;
 800793e:	e012      	b.n	8007966 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007940:	2004      	movs	r0, #4
 8007942:	f7ff fc47 	bl	80071d4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007946:	4b16      	ldr	r3, [pc, #88]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800794e:	4a14      	ldr	r2, [pc, #80]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007954:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007956:	2216      	movs	r2, #22
 8007958:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800795c:	4811      	ldr	r0, [pc, #68]	@ (80079a4 <RadioSetTxConfig+0x210>)
 800795e:	f002 f897 	bl	8009a90 <SUBGRF_SetModulationParams>
            break;
 8007962:	e000      	b.n	8007966 <RadioSetTxConfig+0x1d2>
            break;
 8007964:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800796a:	4618      	mov	r0, r3
 800796c:	f002 fbc6 	bl	800a0fc <SUBGRF_SetRfTxPower>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	4b0a      	ldr	r3, [pc, #40]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007976:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800797a:	210e      	movs	r1, #14
 800797c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007980:	f002 faa0 	bl	8009ec4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007984:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007986:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800798a:	4618      	mov	r0, r3
 800798c:	f002 fd95 	bl	800a4ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007990:	4a03      	ldr	r2, [pc, #12]	@ (80079a0 <RadioSetTxConfig+0x20c>)
 8007992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007994:	6053      	str	r3, [r2, #4]
}
 8007996:	bf00      	nop
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000288 	.word	0x20000288
 80079a4:	200002c0 	.word	0x200002c0
 80079a8:	20000296 	.word	0x20000296
 80079ac:	0800bb60 	.word	0x0800bb60
 80079b0:	0800bdfc 	.word	0x0800bdfc
 80079b4:	20000008 	.word	0x20000008

080079b8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
    return true;
 80079c0:	2301      	movs	r3, #1
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr

080079cc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b0a      	cmp	r3, #10
 80079de:	d83e      	bhi.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
 80079e0:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a25 	.word	0x08007a25
 80079f0:	08007a35 	.word	0x08007a35
 80079f4:	08007a45 	.word	0x08007a45
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007a53 	.word	0x08007a53
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a5f 	.word	0x08007a5f
 8007a08:	08007a1d 	.word	0x08007a1d
 8007a0c:	08007a2d 	.word	0x08007a2d
 8007a10:	08007a3d 	.word	0x08007a3d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007a14:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8007a18:	60fb      	str	r3, [r7, #12]
        break;
 8007a1a:	e020      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007a1c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8007a20:	60fb      	str	r3, [r7, #12]
        break;
 8007a22:	e01c      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007a24:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8007a28:	60fb      	str	r3, [r7, #12]
        break;
 8007a2a:	e018      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007a2c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8007a30:	60fb      	str	r3, [r7, #12]
        break;
 8007a32:	e014      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007a34:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8007a38:	60fb      	str	r3, [r7, #12]
        break;
 8007a3a:	e010      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007a3c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8007a40:	60fb      	str	r3, [r7, #12]
        break;
 8007a42:	e00c      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007a44:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007a48:	60fb      	str	r3, [r7, #12]
        break;
 8007a4a:	e008      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <RadioGetLoRaBandwidthInHz+0xa0>)
 8007a4e:	60fb      	str	r3, [r7, #12]
        break;
 8007a50:	e005      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007a54:	60fb      	str	r3, [r7, #12]
        break;
 8007a56:	e002      	b.n	8007a5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007a58:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007a5a:	60fb      	str	r3, [r7, #12]
        break;
 8007a5c:	bf00      	nop
    }

    return bandwidthInHz;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	0001e848 	.word	0x0001e848
 8007a70:	0003d090 	.word	0x0003d090
 8007a74:	0007a120 	.word	0x0007a120

08007a78 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	70fb      	strb	r3, [r7, #3]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	803b      	strh	r3, [r7, #0]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007a92:	883b      	ldrh	r3, [r7, #0]
 8007a94:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a96:	78ba      	ldrb	r2, [r7, #2]
 8007a98:	f082 0201 	eor.w	r2, r2, #1
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	d001      	beq.n	8007aa6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	e000      	b.n	8007aa8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007aa6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007aa8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007aaa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007aae:	7c3b      	ldrb	r3, [r7, #16]
 8007ab0:	7d39      	ldrb	r1, [r7, #20]
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d001      	beq.n	8007aba <RadioGetGfskTimeOnAirNumerator+0x42>
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	e000      	b.n	8007abc <RadioGetGfskTimeOnAirNumerator+0x44>
 8007aba:	2100      	movs	r1, #0
 8007abc:	440b      	add	r3, r1
 8007abe:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007ac0:	4413      	add	r3, r2
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b08b      	sub	sp, #44	@ 0x2c
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	460b      	mov	r3, r1
 8007adc:	71fb      	strb	r3, [r7, #7]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	d002      	beq.n	8007afa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b06      	cmp	r3, #6
 8007af8:	d104      	bne.n	8007b04 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007afa:	88bb      	ldrh	r3, [r7, #4]
 8007afc:	2b0b      	cmp	r3, #11
 8007afe:	d801      	bhi.n	8007b04 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007b00:	230c      	movs	r3, #12
 8007b02:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b0b      	cmp	r3, #11
 8007b0e:	d008      	beq.n	8007b22 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b0c      	cmp	r3, #12
 8007b14:	d005      	beq.n	8007b22 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d105      	bne.n	8007b28 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b0c      	cmp	r3, #12
 8007b20:	d102      	bne.n	8007b28 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007b28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007b2c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	d001      	beq.n	8007b3a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007b36:	2210      	movs	r2, #16
 8007b38:	e000      	b.n	8007b3c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007b3a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007b3c:	4413      	add	r3, r2
 8007b3e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007b44:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007b46:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	d001      	beq.n	8007b52 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e000      	b.n	8007b54 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007b52:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007b54:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007b56:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d803      	bhi.n	8007b66 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	e00e      	b.n	8007b84 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	3b02      	subs	r3, #2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	623b      	str	r3, [r7, #32]
 8007b7c:	e002      	b.n	8007b84 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da01      	bge.n	8007b8e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	4413      	add	r3, r2
 8007b94:	1e5a      	subs	r2, r3, #1
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	fb03 f202 	mul.w	r2, r3, r2
 8007ba2:	88bb      	ldrh	r3, [r7, #4]
 8007ba4:	4413      	add	r3, r2
    int32_t intermediate =
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d802      	bhi.n	8007bb6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3b02      	subs	r3, #2
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	372c      	adds	r7, #44	@ 0x2c
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr
	...

08007bd0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	@ 0x28
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
 8007be0:	4613      	mov	r3, r2
 8007be2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <RadioTimeOnAir+0x28>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d017      	beq.n	8007c26 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007bf6:	e035      	b.n	8007c64 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007bf8:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8007bfc:	8c3a      	ldrh	r2, [r7, #32]
 8007bfe:	7bb9      	ldrb	r1, [r7, #14]
 8007c00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff ff32 	bl	8007a78 <RadioGetGfskTimeOnAirNumerator>
 8007c14:	4603      	mov	r3, r0
 8007c16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	613b      	str	r3, [r7, #16]
        break;
 8007c24:	e01e      	b.n	8007c64 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007c26:	8c39      	ldrh	r1, [r7, #32]
 8007c28:	7bba      	ldrb	r2, [r7, #14]
 8007c2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	68b8      	ldr	r0, [r7, #8]
 8007c42:	f7ff ff43 	bl	8007acc <RadioGetLoRaTimeOnAirNumerator>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007c52:	4a0a      	ldr	r2, [pc, #40]	@ (8007c7c <RadioTimeOnAir+0xac>)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4413      	add	r3, r2
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff feb6 	bl	80079cc <RadioGetLoRaBandwidthInHz>
 8007c60:	6138      	str	r0, [r7, #16]
        break;
 8007c62:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	4413      	add	r3, r2
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	0800bdfc 	.word	0x0800bdfc

08007c80 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f240 2101 	movw	r1, #513	@ 0x201
 8007c94:	f240 2001 	movw	r0, #513	@ 0x201
 8007c98:	f001 fd64 	bl	8009764 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007c9c:	4b73      	ldr	r3, [pc, #460]	@ (8007e6c <RadioSend+0x1ec>)
 8007c9e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 fa01 	bl	800a0ac <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007caa:	4b70      	ldr	r3, [pc, #448]	@ (8007e6c <RadioSend+0x1ec>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d112      	bne.n	8007cd8 <RadioSend+0x58>
 8007cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8007e6c <RadioSend+0x1ec>)
 8007cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d10d      	bne.n	8007cd8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007cbc:	f640 0089 	movw	r0, #2185	@ 0x889
 8007cc0:	f002 f914 	bl	8009eec <SUBGRF_ReadRegister>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f640 0089 	movw	r0, #2185	@ 0x889
 8007cd2:	f002 f8f7 	bl	8009ec4 <SUBGRF_WriteRegister>
 8007cd6:	e00c      	b.n	8007cf2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007cd8:	f640 0089 	movw	r0, #2185	@ 0x889
 8007cdc:	f002 f906 	bl	8009eec <SUBGRF_ReadRegister>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f043 0304 	orr.w	r3, r3, #4
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f640 0089 	movw	r0, #2185	@ 0x889
 8007cee:	f002 f8e9 	bl	8009ec4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8007e6c <RadioSend+0x1ec>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	f200 80a8 	bhi.w	8007e4c <RadioSend+0x1cc>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <RadioSend+0x84>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d33 	.word	0x08007d33
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d33 	.word	0x08007d33
 8007d10:	08007d95 	.word	0x08007d95
 8007d14:	08007db5 	.word	0x08007db5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007d18:	4a54      	ldr	r2, [pc, #336]	@ (8007e6c <RadioSend+0x1ec>)
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d1e:	4854      	ldr	r0, [pc, #336]	@ (8007e70 <RadioSend+0x1f0>)
 8007d20:	f001 ff88 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	2200      	movs	r2, #0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fa38 	bl	80091a0 <SUBGRF_SendPayload>
            break;
 8007d30:	e08d      	b.n	8007e4e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007d32:	f002 fbb4 	bl	800a49e <RFW_Is_Init>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d11e      	bne.n	8007d7a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007d3c:	f107 020d 	add.w	r2, r7, #13
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 fbc2 	bl	800a4ce <RFW_TransmitInit>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10c      	bne.n	8007d6a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007d50:	7b7a      	ldrb	r2, [r7, #13]
 8007d52:	4b46      	ldr	r3, [pc, #280]	@ (8007e6c <RadioSend+0x1ec>)
 8007d54:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d56:	4846      	ldr	r0, [pc, #280]	@ (8007e70 <RadioSend+0x1f0>)
 8007d58:	f001 ff6c 	bl	8009c34 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007d5c:	7b7b      	ldrb	r3, [r7, #13]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fa1c 	bl	80091a0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007d68:	e071      	b.n	8007e4e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8007d6a:	4b42      	ldr	r3, [pc, #264]	@ (8007e74 <RadioSend+0x1f4>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2100      	movs	r1, #0
 8007d70:	2002      	movs	r0, #2
 8007d72:	f003 fc2d 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e073      	b.n	8007e62 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8007e6c <RadioSend+0x1ec>)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d80:	483b      	ldr	r0, [pc, #236]	@ (8007e70 <RadioSend+0x1f0>)
 8007d82:	f001 ff57 	bl	8009c34 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fa07 	bl	80091a0 <SUBGRF_SendPayload>
            break;
 8007d92:	e05c      	b.n	8007e4e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007d94:	4b35      	ldr	r3, [pc, #212]	@ (8007e6c <RadioSend+0x1ec>)
 8007d96:	2202      	movs	r2, #2
 8007d98:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007d9a:	4a34      	ldr	r2, [pc, #208]	@ (8007e6c <RadioSend+0x1ec>)
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007da0:	4833      	ldr	r0, [pc, #204]	@ (8007e70 <RadioSend+0x1f0>)
 8007da2:	f001 ff47 	bl	8009c34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2200      	movs	r2, #0
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f9f7 	bl	80091a0 <SUBGRF_SendPayload>
            break;
 8007db2:	e04c      	b.n	8007e4e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	482f      	ldr	r0, [pc, #188]	@ (8007e78 <RadioSend+0x1f8>)
 8007dbc:	f000 fcca 	bl	8008754 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8007e6c <RadioSend+0x1ec>)
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	4b27      	ldr	r3, [pc, #156]	@ (8007e6c <RadioSend+0x1ec>)
 8007dce:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dd0:	4827      	ldr	r0, [pc, #156]	@ (8007e70 <RadioSend+0x1f0>)
 8007dd2:	f001 ff2f 	bl	8009c34 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	20f1      	movs	r0, #241	@ 0xf1
 8007dda:	f000 f965 	bl	80080a8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007dde:	2100      	movs	r1, #0
 8007de0:	20f0      	movs	r0, #240	@ 0xf0
 8007de2:	f000 f961 	bl	80080a8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007de6:	4b21      	ldr	r3, [pc, #132]	@ (8007e6c <RadioSend+0x1ec>)
 8007de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dea:	2b64      	cmp	r3, #100	@ 0x64
 8007dec:	d108      	bne.n	8007e00 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007dee:	2170      	movs	r1, #112	@ 0x70
 8007df0:	20f3      	movs	r0, #243	@ 0xf3
 8007df2:	f000 f959 	bl	80080a8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007df6:	211d      	movs	r1, #29
 8007df8:	20f2      	movs	r0, #242	@ 0xf2
 8007dfa:	f000 f955 	bl	80080a8 <RadioWrite>
 8007dfe:	e007      	b.n	8007e10 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007e00:	21e1      	movs	r1, #225	@ 0xe1
 8007e02:	20f3      	movs	r0, #243	@ 0xf3
 8007e04:	f000 f950 	bl	80080a8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007e08:	2104      	movs	r1, #4
 8007e0a:	20f2      	movs	r0, #242	@ 0xf2
 8007e0c:	f000 f94c 	bl	80080a8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3302      	adds	r3, #2
 8007e1a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	4619      	mov	r1, r3
 8007e26:	20f4      	movs	r0, #244	@ 0xf4
 8007e28:	f000 f93e 	bl	80080a8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007e2c:	89fb      	ldrh	r3, [r7, #14]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4619      	mov	r1, r3
 8007e32:	20f5      	movs	r0, #245	@ 0xf5
 8007e34:	f000 f938 	bl	80080a8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8007e42:	4619      	mov	r1, r3
 8007e44:	480c      	ldr	r0, [pc, #48]	@ (8007e78 <RadioSend+0x1f8>)
 8007e46:	f001 f9ab 	bl	80091a0 <SUBGRF_SendPayload>
            break;
 8007e4a:	e000      	b.n	8007e4e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007e4c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007e4e:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <RadioSend+0x1ec>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	4619      	mov	r1, r3
 8007e54:	4809      	ldr	r0, [pc, #36]	@ (8007e7c <RadioSend+0x1fc>)
 8007e56:	f003 fa33 	bl	800b2c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007e5a:	4808      	ldr	r0, [pc, #32]	@ (8007e7c <RadioSend+0x1fc>)
 8007e5c:	f003 f952 	bl	800b104 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000288 	.word	0x20000288
 8007e70:	20000296 	.word	0x20000296
 8007e74:	0800bb68 	.word	0x0800bb68
 8007e78:	20000184 	.word	0x20000184
 8007e7c:	200002e4 	.word	0x200002e4

08007e80 <RadioSleep>:

static void RadioSleep( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007e86:	2300      	movs	r3, #0
 8007e88:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007e8a:	793b      	ldrb	r3, [r7, #4]
 8007e8c:	f043 0304 	orr.w	r3, r3, #4
 8007e90:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007e92:	7938      	ldrb	r0, [r7, #4]
 8007e94:	f001 fa60 	bl	8009358 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007e98:	2002      	movs	r0, #2
 8007e9a:	f7f8 ff73 	bl	8000d84 <HAL_Delay>
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <RadioStandby>:

static void RadioStandby( void )
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f001 fa86 	bl	80093bc <SUBGRF_SetStandby>
}
 8007eb0:	bf00      	nop
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007ebc:	f002 faef 	bl	800a49e <RFW_Is_Init>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d102      	bne.n	8007ecc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007ec6:	f002 fb12 	bl	800a4ee <RFW_ReceiveInit>
 8007eca:	e007      	b.n	8007edc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f240 2162 	movw	r1, #610	@ 0x262
 8007ed4:	f240 2062 	movw	r0, #610	@ 0x262
 8007ed8:	f001 fc44 	bl	8009764 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4811      	ldr	r0, [pc, #68]	@ (8007f2c <RadioRx+0x78>)
 8007ee6:	f003 f9eb 	bl	800b2c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007eea:	4810      	ldr	r0, [pc, #64]	@ (8007f2c <RadioRx+0x78>)
 8007eec:	f003 f90a 	bl	800b104 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f30 <RadioRx+0x7c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f30 <RadioRx+0x7c>)
 8007ef8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 f8d4 	bl	800a0ac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007f04:	4b0a      	ldr	r3, [pc, #40]	@ (8007f30 <RadioRx+0x7c>)
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007f0c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8007f10:	f001 fa90 	bl	8009434 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007f14:	e005      	b.n	8007f22 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007f16:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <RadioRx+0x7c>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	019b      	lsls	r3, r3, #6
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fa89 	bl	8009434 <SUBGRF_SetRx>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200002fc 	.word	0x200002fc
 8007f30:	20000288 	.word	0x20000288

08007f34 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007f3c:	f002 faaf 	bl	800a49e <RFW_Is_Init>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d102      	bne.n	8007f4c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007f46:	f002 fad2 	bl	800a4ee <RFW_ReceiveInit>
 8007f4a:	e007      	b.n	8007f5c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f240 2162 	movw	r1, #610	@ 0x262
 8007f54:	f240 2062 	movw	r0, #610	@ 0x262
 8007f58:	f001 fc04 	bl	8009764 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d006      	beq.n	8007f70 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4811      	ldr	r0, [pc, #68]	@ (8007fac <RadioRxBoosted+0x78>)
 8007f66:	f003 f9ab 	bl	800b2c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007f6a:	4810      	ldr	r0, [pc, #64]	@ (8007fac <RadioRxBoosted+0x78>)
 8007f6c:	f003 f8ca 	bl	800b104 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007f70:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb0 <RadioRxBoosted+0x7c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f76:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <RadioRxBoosted+0x7c>)
 8007f78:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 f894 	bl	800a0ac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007f84:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <RadioRxBoosted+0x7c>)
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007f8c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8007f90:	f001 fa70 	bl	8009474 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007f94:	e005      	b.n	8007fa2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007f96:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <RadioRxBoosted+0x7c>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	019b      	lsls	r3, r3, #6
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 fa69 	bl	8009474 <SUBGRF_SetRxBoosted>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	200002fc 	.word	0x200002fc
 8007fb0:	20000288 	.word	0x20000288

08007fb4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	005a      	lsls	r2, r3, #1
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff8 <RadioSetRxDutyCycle+0x44>)
 8007fc8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007fd2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007fd6:	f001 fbc5 	bl	8009764 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007fda:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <RadioSetRxDutyCycle+0x44>)
 8007fdc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f002 f862 	bl	800a0ac <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fa66 	bl	80094bc <SUBGRF_SetRxDutyCycle>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000288 	.word	0x20000288

08007ffc <RadioStartCad>:

static void RadioStartCad( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008000:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <RadioStartCad+0x2c>)
 8008002:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008006:	2100      	movs	r1, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f002 f84f 	bl	800a0ac <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800800e:	2300      	movs	r3, #0
 8008010:	2200      	movs	r2, #0
 8008012:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008016:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800801a:	f001 fba3 	bl	8009764 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800801e:	f001 fa79 	bl	8009514 <SUBGRF_SetCad>
}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000288 	.word	0x20000288

0800802c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
 8008038:	4613      	mov	r3, r2
 800803a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800803c:	883b      	ldrh	r3, [r7, #0]
 800803e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fbe7 	bl	800981c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800804e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008052:	4618      	mov	r0, r3
 8008054:	f002 f852 	bl	800a0fc <SUBGRF_SetRfTxPower>
 8008058:	4603      	mov	r3, r0
 800805a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800805c:	210e      	movs	r1, #14
 800805e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008062:	f001 ff2f 	bl	8009ec4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2101      	movs	r1, #1
 800806a:	4618      	mov	r0, r3
 800806c:	f002 f81e 	bl	800a0ac <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008070:	f001 fa5e 	bl	8009530 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	4805      	ldr	r0, [pc, #20]	@ (800808c <RadioSetTxContinuousWave+0x60>)
 8008078:	f003 f922 	bl	800b2c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800807c:	4803      	ldr	r0, [pc, #12]	@ (800808c <RadioSetTxContinuousWave+0x60>)
 800807e:	f003 f841 	bl	800b104 <UTIL_TIMER_Start>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200002e4 	.word	0x200002e4

08008090 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800809a:	f001 fe80 	bl	8009d9e <SUBGRF_GetRssiInst>
 800809e:	4603      	mov	r3, r0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	460a      	mov	r2, r1
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	4613      	mov	r3, r2
 80080b6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80080b8:	797a      	ldrb	r2, [r7, #5]
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 ff00 	bl	8009ec4 <SUBGRF_WriteRegister>
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 ff07 	bl	8009eec <SUBGRF_ReadRegister>
 80080de:	4603      	mov	r3, r0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	80fb      	strh	r3, [r7, #6]
 80080f4:	4613      	mov	r3, r2
 80080f6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80080f8:	797b      	ldrb	r3, [r7, #5]
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f001 ff07 	bl	8009f14 <SUBGRF_WriteRegisters>
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	4603      	mov	r3, r0
 8008116:	6039      	str	r1, [r7, #0]
 8008118:	80fb      	strh	r3, [r7, #6]
 800811a:	4613      	mov	r3, r2
 800811c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800811e:	797b      	ldrb	r3, [r7, #5]
 8008120:	b29a      	uxth	r2, r3
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f001 ff16 	bl	8009f58 <SUBGRF_ReadRegisters>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	460a      	mov	r2, r1
 800813e:	71fb      	strb	r3, [r7, #7]
 8008140:	4613      	mov	r3, r2
 8008142:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d10a      	bne.n	8008160 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800814a:	4a0e      	ldr	r2, [pc, #56]	@ (8008184 <RadioSetMaxPayloadLength+0x50>)
 800814c:	79bb      	ldrb	r3, [r7, #6]
 800814e:	7013      	strb	r3, [r2, #0]
 8008150:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <RadioSetMaxPayloadLength+0x50>)
 8008152:	781a      	ldrb	r2, [r3, #0]
 8008154:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <RadioSetMaxPayloadLength+0x54>)
 8008156:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008158:	480c      	ldr	r0, [pc, #48]	@ (800818c <RadioSetMaxPayloadLength+0x58>)
 800815a:	f001 fd6b 	bl	8009c34 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800815e:	e00d      	b.n	800817c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008160:	4b09      	ldr	r3, [pc, #36]	@ (8008188 <RadioSetMaxPayloadLength+0x54>)
 8008162:	7d5b      	ldrb	r3, [r3, #21]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d109      	bne.n	800817c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008168:	4a06      	ldr	r2, [pc, #24]	@ (8008184 <RadioSetMaxPayloadLength+0x50>)
 800816a:	79bb      	ldrb	r3, [r7, #6]
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <RadioSetMaxPayloadLength+0x50>)
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <RadioSetMaxPayloadLength+0x54>)
 8008174:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008176:	4805      	ldr	r0, [pc, #20]	@ (800818c <RadioSetMaxPayloadLength+0x58>)
 8008178:	f001 fd5c 	bl	8009c34 <SUBGRF_SetPacketParams>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000008 	.word	0x20000008
 8008188:	20000288 	.word	0x20000288
 800818c:	20000296 	.word	0x20000296

08008190 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800819a:	4a13      	ldr	r2, [pc, #76]	@ (80081e8 <RadioSetPublicNetwork+0x58>)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	7313      	strb	r3, [r2, #12]
 80081a0:	4b11      	ldr	r3, [pc, #68]	@ (80081e8 <RadioSetPublicNetwork+0x58>)
 80081a2:	7b1a      	ldrb	r2, [r3, #12]
 80081a4:	4b10      	ldr	r3, [pc, #64]	@ (80081e8 <RadioSetPublicNetwork+0x58>)
 80081a6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7ff f813 	bl	80071d4 <RadioSetModem>
    if( enable == true )
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80081b4:	2134      	movs	r1, #52	@ 0x34
 80081b6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80081ba:	f001 fe83 	bl	8009ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80081be:	2144      	movs	r1, #68	@ 0x44
 80081c0:	f240 7041 	movw	r0, #1857	@ 0x741
 80081c4:	f001 fe7e 	bl	8009ec4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80081c8:	e009      	b.n	80081de <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80081ca:	2114      	movs	r1, #20
 80081cc:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80081d0:	f001 fe78 	bl	8009ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80081d4:	2124      	movs	r1, #36	@ 0x24
 80081d6:	f240 7041 	movw	r0, #1857	@ 0x741
 80081da:	f001 fe73 	bl	8009ec4 <SUBGRF_WriteRegister>
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000288 	.word	0x20000288

080081ec <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80081f0:	f001 ffb8 	bl	800a164 <SUBGRF_GetRadioWakeUpTime>
 80081f4:	4603      	mov	r3, r0
 80081f6:	3303      	adds	r3, #3
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}

080081fc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008204:	f000 f80e 	bl	8008224 <RadioOnTxTimeoutProcess>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008218:	f000 f818 	bl	800824c <RadioOnRxTimeoutProcess>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008228:	4b07      	ldr	r3, [pc, #28]	@ (8008248 <RadioOnTxTimeoutProcess+0x24>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d008      	beq.n	8008242 <RadioOnTxTimeoutProcess+0x1e>
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <RadioOnTxTimeoutProcess+0x24>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800823a:	4b03      	ldr	r3, [pc, #12]	@ (8008248 <RadioOnTxTimeoutProcess+0x24>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	4798      	blx	r3
    }
}
 8008242:	bf00      	nop
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000284 	.word	0x20000284

0800824c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008250:	4b07      	ldr	r3, [pc, #28]	@ (8008270 <RadioOnRxTimeoutProcess+0x24>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d008      	beq.n	800826a <RadioOnRxTimeoutProcess+0x1e>
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <RadioOnRxTimeoutProcess+0x24>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008262:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <RadioOnRxTimeoutProcess+0x24>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	4798      	blx	r3
    }
}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000284 	.word	0x20000284

08008274 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800827e:	4a05      	ldr	r2, [pc, #20]	@ (8008294 <RadioOnDioIrq+0x20>)
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8008286:	f000 f807 	bl	8008298 <RadioIrqProcess>
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000288 	.word	0x20000288

08008298 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008298:	b5b0      	push	{r4, r5, r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80082a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008548 <RadioIrqProcess+0x2b0>)
 80082a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80082ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b0:	f000 810d 	beq.w	80084ce <RadioIrqProcess+0x236>
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b8:	f300 81e8 	bgt.w	800868c <RadioIrqProcess+0x3f4>
 80082bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c0:	f000 80f1 	beq.w	80084a6 <RadioIrqProcess+0x20e>
 80082c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c8:	f300 81e0 	bgt.w	800868c <RadioIrqProcess+0x3f4>
 80082cc:	2b80      	cmp	r3, #128	@ 0x80
 80082ce:	f000 80d6 	beq.w	800847e <RadioIrqProcess+0x1e6>
 80082d2:	2b80      	cmp	r3, #128	@ 0x80
 80082d4:	f300 81da 	bgt.w	800868c <RadioIrqProcess+0x3f4>
 80082d8:	2b20      	cmp	r3, #32
 80082da:	dc49      	bgt.n	8008370 <RadioIrqProcess+0xd8>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f340 81d5 	ble.w	800868c <RadioIrqProcess+0x3f4>
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b1f      	cmp	r3, #31
 80082e6:	f200 81d1 	bhi.w	800868c <RadioIrqProcess+0x3f4>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <RadioIrqProcess+0x58>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008379 	.word	0x08008379
 80082f4:	080083b3 	.word	0x080083b3
 80082f8:	0800868d 	.word	0x0800868d
 80082fc:	08008569 	.word	0x08008569
 8008300:	0800868d 	.word	0x0800868d
 8008304:	0800868d 	.word	0x0800868d
 8008308:	0800868d 	.word	0x0800868d
 800830c:	080085e5 	.word	0x080085e5
 8008310:	0800868d 	.word	0x0800868d
 8008314:	0800868d 	.word	0x0800868d
 8008318:	0800868d 	.word	0x0800868d
 800831c:	0800868d 	.word	0x0800868d
 8008320:	0800868d 	.word	0x0800868d
 8008324:	0800868d 	.word	0x0800868d
 8008328:	0800868d 	.word	0x0800868d
 800832c:	08008601 	.word	0x08008601
 8008330:	0800868d 	.word	0x0800868d
 8008334:	0800868d 	.word	0x0800868d
 8008338:	0800868d 	.word	0x0800868d
 800833c:	0800868d 	.word	0x0800868d
 8008340:	0800868d 	.word	0x0800868d
 8008344:	0800868d 	.word	0x0800868d
 8008348:	0800868d 	.word	0x0800868d
 800834c:	0800868d 	.word	0x0800868d
 8008350:	0800868d 	.word	0x0800868d
 8008354:	0800868d 	.word	0x0800868d
 8008358:	0800868d 	.word	0x0800868d
 800835c:	0800868d 	.word	0x0800868d
 8008360:	0800868d 	.word	0x0800868d
 8008364:	0800868d 	.word	0x0800868d
 8008368:	0800868d 	.word	0x0800868d
 800836c:	0800860f 	.word	0x0800860f
 8008370:	2b40      	cmp	r3, #64	@ 0x40
 8008372:	f000 816d 	beq.w	8008650 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008376:	e189      	b.n	800868c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008378:	4874      	ldr	r0, [pc, #464]	@ (800854c <RadioIrqProcess+0x2b4>)
 800837a:	f002 ff31 	bl	800b1e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800837e:	2000      	movs	r0, #0
 8008380:	f001 f81c 	bl	80093bc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008384:	f002 f892 	bl	800a4ac <RFW_Is_LongPacketModeEnabled>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800838e:	f002 f8b6 	bl	800a4fe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008392:	4b6f      	ldr	r3, [pc, #444]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 817a 	beq.w	8008690 <RadioIrqProcess+0x3f8>
 800839c:	4b6c      	ldr	r3, [pc, #432]	@ (8008550 <RadioIrqProcess+0x2b8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8174 	beq.w	8008690 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80083a8:	4b69      	ldr	r3, [pc, #420]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4798      	blx	r3
        break;
 80083b0:	e16e      	b.n	8008690 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80083b2:	4868      	ldr	r0, [pc, #416]	@ (8008554 <RadioIrqProcess+0x2bc>)
 80083b4:	f002 ff14 	bl	800b1e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80083b8:	4b63      	ldr	r3, [pc, #396]	@ (8008548 <RadioIrqProcess+0x2b0>)
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	f083 0301 	eor.w	r3, r3, #1
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d014      	beq.n	80083f0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80083c6:	2000      	movs	r0, #0
 80083c8:	f000 fff8 	bl	80093bc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80083cc:	2100      	movs	r1, #0
 80083ce:	f640 1002 	movw	r0, #2306	@ 0x902
 80083d2:	f001 fd77 	bl	8009ec4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80083d6:	f640 1044 	movw	r0, #2372	@ 0x944
 80083da:	f001 fd87 	bl	8009eec <SUBGRF_ReadRegister>
 80083de:	4603      	mov	r3, r0
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	4619      	mov	r1, r3
 80083e8:	f640 1044 	movw	r0, #2372	@ 0x944
 80083ec:	f001 fd6a 	bl	8009ec4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80083f0:	1dfb      	adds	r3, r7, #7
 80083f2:	22ff      	movs	r2, #255	@ 0xff
 80083f4:	4619      	mov	r1, r3
 80083f6:	4858      	ldr	r0, [pc, #352]	@ (8008558 <RadioIrqProcess+0x2c0>)
 80083f8:	f000 feb0 	bl	800915c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80083fc:	4857      	ldr	r0, [pc, #348]	@ (800855c <RadioIrqProcess+0x2c4>)
 80083fe:	f001 fd0f 	bl	8009e20 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008402:	4b53      	ldr	r3, [pc, #332]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8144 	beq.w	8008694 <RadioIrqProcess+0x3fc>
 800840c:	4b50      	ldr	r3, [pc, #320]	@ (8008550 <RadioIrqProcess+0x2b8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 813e 	beq.w	8008694 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8008418:	4b4b      	ldr	r3, [pc, #300]	@ (8008548 <RadioIrqProcess+0x2b0>)
 800841a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800841e:	2b01      	cmp	r3, #1
 8008420:	d10e      	bne.n	8008440 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008422:	4b4b      	ldr	r3, [pc, #300]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689c      	ldr	r4, [r3, #8]
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	4619      	mov	r1, r3
 800842c:	4b46      	ldr	r3, [pc, #280]	@ (8008548 <RadioIrqProcess+0x2b0>)
 800842e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8008432:	461a      	mov	r2, r3
 8008434:	4b44      	ldr	r3, [pc, #272]	@ (8008548 <RadioIrqProcess+0x2b0>)
 8008436:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800843a:	4847      	ldr	r0, [pc, #284]	@ (8008558 <RadioIrqProcess+0x2c0>)
 800843c:	47a0      	blx	r4
                break;
 800843e:	e01d      	b.n	800847c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008440:	4b41      	ldr	r3, [pc, #260]	@ (8008548 <RadioIrqProcess+0x2b0>)
 8008442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008444:	463a      	mov	r2, r7
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f001 ff7d 	bl	800a348 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800844e:	4b40      	ldr	r3, [pc, #256]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689c      	ldr	r4, [r3, #8]
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	4619      	mov	r1, r3
 8008458:	4b3b      	ldr	r3, [pc, #236]	@ (8008548 <RadioIrqProcess+0x2b0>)
 800845a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800845e:	4618      	mov	r0, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008466:	4a3e      	ldr	r2, [pc, #248]	@ (8008560 <RadioIrqProcess+0x2c8>)
 8008468:	fb82 5203 	smull	r5, r2, r2, r3
 800846c:	1192      	asrs	r2, r2, #6
 800846e:	17db      	asrs	r3, r3, #31
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	b25b      	sxtb	r3, r3
 8008474:	4602      	mov	r2, r0
 8008476:	4838      	ldr	r0, [pc, #224]	@ (8008558 <RadioIrqProcess+0x2c0>)
 8008478:	47a0      	blx	r4
                break;
 800847a:	bf00      	nop
        break;
 800847c:	e10a      	b.n	8008694 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800847e:	2000      	movs	r0, #0
 8008480:	f000 ff9c 	bl	80093bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008484:	4b32      	ldr	r3, [pc, #200]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8105 	beq.w	8008698 <RadioIrqProcess+0x400>
 800848e:	4b30      	ldr	r3, [pc, #192]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80ff 	beq.w	8008698 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 800849a:	4b2d      	ldr	r3, [pc, #180]	@ (8008550 <RadioIrqProcess+0x2b8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2000      	movs	r0, #0
 80084a2:	4798      	blx	r3
        break;
 80084a4:	e0f8      	b.n	8008698 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80084a6:	2000      	movs	r0, #0
 80084a8:	f000 ff88 	bl	80093bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80084ac:	4b28      	ldr	r3, [pc, #160]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80f3 	beq.w	800869c <RadioIrqProcess+0x404>
 80084b6:	4b26      	ldr	r3, [pc, #152]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80ed 	beq.w	800869c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80084c2:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	2001      	movs	r0, #1
 80084ca:	4798      	blx	r3
        break;
 80084cc:	e0e6      	b.n	800869c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80084ce:	4b25      	ldr	r3, [pc, #148]	@ (8008564 <RadioIrqProcess+0x2cc>)
 80084d0:	2201      	movs	r2, #1
 80084d2:	2100      	movs	r1, #0
 80084d4:	2002      	movs	r0, #2
 80084d6:	f003 f87b 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80084da:	f000 fe25 	bl	8009128 <SUBGRF_GetOperatingMode>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d115      	bne.n	8008510 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 80084e4:	4819      	ldr	r0, [pc, #100]	@ (800854c <RadioIrqProcess+0x2b4>)
 80084e6:	f002 fe7b 	bl	800b1e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80084ea:	2000      	movs	r0, #0
 80084ec:	f000 ff66 	bl	80093bc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80084f0:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80d3 	beq.w	80086a0 <RadioIrqProcess+0x408>
 80084fa:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <RadioIrqProcess+0x2b8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80cd 	beq.w	80086a0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8008506:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4798      	blx	r3
        break;
 800850e:	e0c7      	b.n	80086a0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008510:	f000 fe0a 	bl	8009128 <SUBGRF_GetOperatingMode>
 8008514:	4603      	mov	r3, r0
 8008516:	2b05      	cmp	r3, #5
 8008518:	f040 80c2 	bne.w	80086a0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800851c:	480d      	ldr	r0, [pc, #52]	@ (8008554 <RadioIrqProcess+0x2bc>)
 800851e:	f002 fe5f 	bl	800b1e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008522:	2000      	movs	r0, #0
 8008524:	f000 ff4a 	bl	80093bc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008528:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <RadioIrqProcess+0x2b8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80b7 	beq.w	80086a0 <RadioIrqProcess+0x408>
 8008532:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 80b1 	beq.w	80086a0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800853e:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <RadioIrqProcess+0x2b8>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	4798      	blx	r3
        break;
 8008546:	e0ab      	b.n	80086a0 <RadioIrqProcess+0x408>
 8008548:	20000288 	.word	0x20000288
 800854c:	200002e4 	.word	0x200002e4
 8008550:	20000284 	.word	0x20000284
 8008554:	200002fc 	.word	0x200002fc
 8008558:	20000184 	.word	0x20000184
 800855c:	200002ac 	.word	0x200002ac
 8008560:	10624dd3 	.word	0x10624dd3
 8008564:	0800bb80 	.word	0x0800bb80
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008568:	4b54      	ldr	r3, [pc, #336]	@ (80086bc <RadioIrqProcess+0x424>)
 800856a:	2201      	movs	r2, #1
 800856c:	2100      	movs	r1, #0
 800856e:	2002      	movs	r0, #2
 8008570:	f003 f82e 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008574:	4b52      	ldr	r3, [pc, #328]	@ (80086c0 <RadioIrqProcess+0x428>)
 8008576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8093 	beq.w	80086a4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800857e:	4a51      	ldr	r2, [pc, #324]	@ (80086c4 <RadioIrqProcess+0x42c>)
 8008580:	4b4f      	ldr	r3, [pc, #316]	@ (80086c0 <RadioIrqProcess+0x428>)
 8008582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	b2db      	uxtb	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	f640 1003 	movw	r0, #2307	@ 0x903
 800858e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8008590:	4a4c      	ldr	r2, [pc, #304]	@ (80086c4 <RadioIrqProcess+0x42c>)
 8008592:	4b4b      	ldr	r3, [pc, #300]	@ (80086c0 <RadioIrqProcess+0x428>)
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	f640 1004 	movw	r0, #2308	@ 0x904
 80085a0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80085a2:	4a48      	ldr	r2, [pc, #288]	@ (80086c4 <RadioIrqProcess+0x42c>)
 80085a4:	4b46      	ldr	r3, [pc, #280]	@ (80086c0 <RadioIrqProcess+0x428>)
 80085a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	4619      	mov	r1, r3
 80085ac:	f640 1005 	movw	r0, #2309	@ 0x905
 80085b0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80085b2:	4c44      	ldr	r4, [pc, #272]	@ (80086c4 <RadioIrqProcess+0x42c>)
 80085b4:	4b44      	ldr	r3, [pc, #272]	@ (80086c8 <RadioIrqProcess+0x430>)
 80085b6:	f640 1002 	movw	r0, #2306	@ 0x902
 80085ba:	4798      	blx	r3
 80085bc:	4603      	mov	r3, r0
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4619      	mov	r1, r3
 80085c6:	f640 1002 	movw	r0, #2306	@ 0x902
 80085ca:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80085cc:	4b3c      	ldr	r3, [pc, #240]	@ (80086c0 <RadioIrqProcess+0x428>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80085d2:	2300      	movs	r3, #0
 80085d4:	2200      	movs	r2, #0
 80085d6:	f240 2162 	movw	r1, #610	@ 0x262
 80085da:	f240 2062 	movw	r0, #610	@ 0x262
 80085de:	f001 f8c1 	bl	8009764 <SUBGRF_SetDioIrqParams>
        break;
 80085e2:	e05f      	b.n	80086a4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80085e4:	4b39      	ldr	r3, [pc, #228]	@ (80086cc <RadioIrqProcess+0x434>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	2100      	movs	r1, #0
 80085ea:	2002      	movs	r0, #2
 80085ec:	f002 fff0 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80085f0:	f001 ff55 	bl	800a49e <RFW_Is_Init>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d156      	bne.n	80086a8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 80085fa:	f001 ff86 	bl	800a50a <RFW_ReceivePayload>
        break;
 80085fe:	e053      	b.n	80086a8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8008600:	4b33      	ldr	r3, [pc, #204]	@ (80086d0 <RadioIrqProcess+0x438>)
 8008602:	2201      	movs	r2, #1
 8008604:	2100      	movs	r1, #0
 8008606:	2002      	movs	r0, #2
 8008608:	f002 ffe2 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800860c:	e051      	b.n	80086b2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 800860e:	4831      	ldr	r0, [pc, #196]	@ (80086d4 <RadioIrqProcess+0x43c>)
 8008610:	f002 fde6 	bl	800b1e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008614:	4b2a      	ldr	r3, [pc, #168]	@ (80086c0 <RadioIrqProcess+0x428>)
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	f083 0301 	eor.w	r3, r3, #1
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8008622:	2000      	movs	r0, #0
 8008624:	f000 feca 	bl	80093bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008628:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <RadioIrqProcess+0x440>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d03d      	beq.n	80086ac <RadioIrqProcess+0x414>
 8008630:	4b29      	ldr	r3, [pc, #164]	@ (80086d8 <RadioIrqProcess+0x440>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d038      	beq.n	80086ac <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800863a:	4b27      	ldr	r3, [pc, #156]	@ (80086d8 <RadioIrqProcess+0x440>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008642:	4b26      	ldr	r3, [pc, #152]	@ (80086dc <RadioIrqProcess+0x444>)
 8008644:	2201      	movs	r2, #1
 8008646:	2100      	movs	r1, #0
 8008648:	2002      	movs	r0, #2
 800864a:	f002 ffc1 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800864e:	e02d      	b.n	80086ac <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008650:	4b23      	ldr	r3, [pc, #140]	@ (80086e0 <RadioIrqProcess+0x448>)
 8008652:	2201      	movs	r2, #1
 8008654:	2100      	movs	r1, #0
 8008656:	2002      	movs	r0, #2
 8008658:	f002 ffba 	bl	800b5d0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800865c:	4b18      	ldr	r3, [pc, #96]	@ (80086c0 <RadioIrqProcess+0x428>)
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	f083 0301 	eor.w	r3, r3, #1
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800866a:	2000      	movs	r0, #0
 800866c:	f000 fea6 	bl	80093bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008670:	4b19      	ldr	r3, [pc, #100]	@ (80086d8 <RadioIrqProcess+0x440>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01b      	beq.n	80086b0 <RadioIrqProcess+0x418>
 8008678:	4b17      	ldr	r3, [pc, #92]	@ (80086d8 <RadioIrqProcess+0x440>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d016      	beq.n	80086b0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8008682:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <RadioIrqProcess+0x440>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	4798      	blx	r3
        break;
 800868a:	e011      	b.n	80086b0 <RadioIrqProcess+0x418>
        break;
 800868c:	bf00      	nop
 800868e:	e010      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 8008690:	bf00      	nop
 8008692:	e00e      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 8008694:	bf00      	nop
 8008696:	e00c      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 8008698:	bf00      	nop
 800869a:	e00a      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 800869c:	bf00      	nop
 800869e:	e008      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 80086a0:	bf00      	nop
 80086a2:	e006      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 80086a4:	bf00      	nop
 80086a6:	e004      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 80086a8:	bf00      	nop
 80086aa:	e002      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <RadioIrqProcess+0x41a>
        break;
 80086b0:	bf00      	nop
    }
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ba:	bf00      	nop
 80086bc:	0800bb94 	.word	0x0800bb94
 80086c0:	20000288 	.word	0x20000288
 80086c4:	080080a9 	.word	0x080080a9
 80086c8:	080080cd 	.word	0x080080cd
 80086cc:	0800bba0 	.word	0x0800bba0
 80086d0:	0800bbac 	.word	0x0800bbac
 80086d4:	200002fc 	.word	0x200002fc
 80086d8:	20000284 	.word	0x20000284
 80086dc:	0800bbb8 	.word	0x0800bbb8
 80086e0:	0800bbc4 	.word	0x0800bbc4

080086e4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80086e8:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <RadioTxPrbs+0x2c>)
 80086ea:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80086ee:	2101      	movs	r1, #1
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 fcdb 	bl	800a0ac <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80086f6:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <RadioTxPrbs+0x30>)
 80086f8:	212d      	movs	r1, #45	@ 0x2d
 80086fa:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80086fe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008700:	f000 ff1f 	bl	8009542 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008704:	4804      	ldr	r0, [pc, #16]	@ (8008718 <RadioTxPrbs+0x34>)
 8008706:	f000 fe75 	bl	80093f4 <SUBGRF_SetTx>
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000288 	.word	0x20000288
 8008714:	080080a9 	.word	0x080080a9
 8008718:	000fffff 	.word	0x000fffff

0800871c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fce6 	bl	800a0fc <SUBGRF_SetRfTxPower>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008734:	210e      	movs	r1, #14
 8008736:	f640 101f 	movw	r0, #2335	@ 0x91f
 800873a:	f001 fbc3 	bl	8009ec4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2101      	movs	r1, #1
 8008742:	4618      	mov	r0, r3
 8008744:	f001 fcb2 	bl	800a0ac <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008748:	f000 fef2 	bl	8009530 <SUBGRF_SetTxContinuousWave>
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008754:	b480      	push	{r7}
 8008756:	b089      	sub	sp, #36	@ 0x24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e011      	b.n	8008794 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	440b      	add	r3, r1
 800877e:	43d2      	mvns	r2, r2
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	3301      	adds	r3, #1
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	429a      	cmp	r2, r3
 800879a:	dbe9      	blt.n	8008770 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800879c:	2300      	movs	r3, #0
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e049      	b.n	8008836 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	425a      	negs	r2, r3
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	f002 0207 	and.w	r2, r2, #7
 80087ae:	bf58      	it	pl
 80087b0:	4253      	negpl	r3, r2
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f1c3 0307 	rsb	r3, r3, #7
 80087b8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da00      	bge.n	80087c2 <payload_integration+0x6e>
 80087c0:	3307      	adds	r3, #7
 80087c2:	10db      	asrs	r3, r3, #3
 80087c4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	3301      	adds	r3, #1
 80087ca:	425a      	negs	r2, r3
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	f002 0207 	and.w	r2, r2, #7
 80087d4:	bf58      	it	pl
 80087d6:	4253      	negpl	r3, r2
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f1c3 0307 	rsb	r3, r3, #7
 80087de:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	3301      	adds	r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da00      	bge.n	80087ea <payload_integration+0x96>
 80087e8:	3307      	adds	r3, #7
 80087ea:	10db      	asrs	r3, r3, #3
 80087ec:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80087ee:	7dbb      	ldrb	r3, [r7, #22]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	4413      	add	r3, r2
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	fa42 f303 	asr.w	r3, r2, r3
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008806:	7ffa      	ldrb	r2, [r7, #31]
 8008808:	7cfb      	ldrb	r3, [r7, #19]
 800880a:	4053      	eors	r3, r2
 800880c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800880e:	7d3b      	ldrb	r3, [r7, #20]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b25a      	sxtb	r2, r3
 8008818:	7ff9      	ldrb	r1, [r7, #31]
 800881a:	7d7b      	ldrb	r3, [r7, #21]
 800881c:	fa01 f303 	lsl.w	r3, r1, r3
 8008820:	b25b      	sxtb	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	b259      	sxtb	r1, r3
 8008826:	7d3b      	ldrb	r3, [r7, #20]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	b2ca      	uxtb	r2, r1
 800882e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	3301      	adds	r3, #1
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	429a      	cmp	r2, r3
 800883e:	dbb0      	blt.n	80087a2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008840:	7ffb      	ldrb	r3, [r7, #31]
 8008842:	01db      	lsls	r3, r3, #7
 8008844:	b25a      	sxtb	r2, r3
 8008846:	7ffb      	ldrb	r3, [r7, #31]
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	b25b      	sxtb	r3, r3
 800884c:	4313      	orrs	r3, r2
 800884e:	b25b      	sxtb	r3, r3
 8008850:	7ffa      	ldrb	r2, [r7, #31]
 8008852:	2a00      	cmp	r2, #0
 8008854:	d101      	bne.n	800885a <payload_integration+0x106>
 8008856:	2220      	movs	r2, #32
 8008858:	e000      	b.n	800885c <payload_integration+0x108>
 800885a:	2200      	movs	r2, #0
 800885c:	4313      	orrs	r3, r2
 800885e:	b259      	sxtb	r1, r3
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	b2ca      	uxtb	r2, r1
 8008868:	701a      	strb	r2, [r3, #0]
}
 800886a:	bf00      	nop
 800886c:	3724      	adds	r7, #36	@ 0x24
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08c      	sub	sp, #48	@ 0x30
 8008878:	af00      	add	r7, sp, #0
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8008888:	2300      	movs	r3, #0
 800888a:	623b      	str	r3, [r7, #32]
 800888c:	2300      	movs	r3, #0
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008890:	f001 fdff 	bl	800a492 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	4ba3      	ldr	r3, [pc, #652]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 80088ac:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <RadioSetRxGenericConfig+0x48>
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	f000 80dc 	beq.w	8008a72 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80088ba:	e194      	b.n	8008be6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <RadioSetRxGenericConfig+0x58>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088d0:	e18a      	b.n	8008be8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	7f9b      	ldrb	r3, [r3, #30]
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d902      	bls.n	80088e0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80088da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088de:	e183      	b.n	8008be8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6919      	ldr	r1, [r3, #16]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	7f9b      	ldrb	r3, [r3, #30]
 80088e8:	461a      	mov	r2, r3
 80088ea:	f107 0320 	add.w	r3, r7, #32
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 ff70 	bl	800a7d4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bf14      	ite	ne
 80088fc:	2301      	movne	r3, #1
 80088fe:	2300      	moveq	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fe26 	bl	8009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008908:	4b8b      	ldr	r3, [pc, #556]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4a88      	ldr	r2, [pc, #544]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008916:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800891e:	4b86      	ldr	r3, [pc, #536]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4618      	mov	r0, r3
 800892a:	f001 fce5 	bl	800a2f8 <SUBGRF_GetFskBandwidthRegValue>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	4b81      	ldr	r3, [pc, #516]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008938:	4b7f      	ldr	r3, [pc, #508]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800893a:	2200      	movs	r2, #0
 800893c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	b29b      	uxth	r3, r3
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	b29a      	uxth	r2, r3
 8008948:	4b7b      	ldr	r3, [pc, #492]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800894a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	7fda      	ldrb	r2, [r3, #31]
 8008950:	4b79      	ldr	r3, [pc, #484]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008952:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	7f9b      	ldrb	r3, [r3, #30]
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	b2da      	uxtb	r2, r3
 800895c:	4b76      	ldr	r3, [pc, #472]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800895e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008966:	4b74      	ldr	r3, [pc, #464]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008968:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	b2da      	uxtb	r2, r3
 800897a:	4b6f      	ldr	r3, [pc, #444]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800897c:	759a      	strb	r2, [r3, #22]
 800897e:	e00b      	b.n	8008998 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008986:	2b02      	cmp	r3, #2
 8008988:	d103      	bne.n	8008992 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800898a:	4b6b      	ldr	r3, [pc, #428]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 800898c:	22ff      	movs	r2, #255	@ 0xff
 800898e:	759a      	strb	r2, [r3, #22]
 8008990:	e002      	b.n	8008998 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008992:	4b69      	ldr	r3, [pc, #420]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008994:	22ff      	movs	r2, #255	@ 0xff
 8008996:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d004      	beq.n	80089ac <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d12d      	bne.n	8008a08 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80089b2:	2bf1      	cmp	r3, #241	@ 0xf1
 80089b4:	d00c      	beq.n	80089d0 <RadioSetRxGenericConfig+0x15c>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80089bc:	2bf2      	cmp	r3, #242	@ 0xf2
 80089be:	d007      	beq.n	80089d0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d002      	beq.n	80089d0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089ce:	e10b      	b.n	8008be8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80089d0:	2300      	movs	r3, #0
 80089d2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80089d8:	4b58      	ldr	r3, [pc, #352]	@ (8008b3c <RadioSetRxGenericConfig+0x2c8>)
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	4a57      	ldr	r2, [pc, #348]	@ (8008b40 <RadioSetRxGenericConfig+0x2cc>)
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fd48 	bl	800a478 <RFW_Init>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <RadioSetRxGenericConfig+0x180>
                return -1;
 80089ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089f2:	e0f9      	b.n	8008be8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80089f4:	4b50      	ldr	r3, [pc, #320]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80089fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008a00:	4b4d      	ldr	r3, [pc, #308]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	755a      	strb	r2, [r3, #21]
        {
 8008a06:	e00e      	b.n	8008a26 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008a10:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008a18:	4b47      	ldr	r3, [pc, #284]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008a1a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008a22:	4b45      	ldr	r3, [pc, #276]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008a24:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008a26:	f7ff fa3e 	bl	8007ea6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f7fe fbd2 	bl	80071d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a30:	4844      	ldr	r0, [pc, #272]	@ (8008b44 <RadioSetRxGenericConfig+0x2d0>)
 8008a32:	f001 f82d 	bl	8009a90 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a36:	4844      	ldr	r0, [pc, #272]	@ (8008b48 <RadioSetRxGenericConfig+0x2d4>)
 8008a38:	f001 f8fc 	bl	8009c34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008a3c:	f107 0320 	add.w	r3, r7, #32
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fbc0 	bl	80091c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	8b9b      	ldrh	r3, [r3, #28]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fc0a 	bl	8009264 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	8b1b      	ldrh	r3, [r3, #24]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fbe5 	bl	8009224 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008a60:	fb03 f202 	mul.w	r2, r3, r2
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6c:	4a32      	ldr	r2, [pc, #200]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008a6e:	6093      	str	r3, [r2, #8]
        break;
 8008a70:	e0b9      	b.n	8008be6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a7e:	e0b3      	b.n	8008be8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d104      	bne.n	8008a94 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a92:	e002      	b.n	8008a9a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008a94:	23ff      	movs	r3, #255	@ 0xff
 8008a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fd53 	bl	8009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fd5d 	bl	8009572 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8008ad2:	4b19      	ldr	r3, [pc, #100]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8008ade:	4b16      	ldr	r3, [pc, #88]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008ae0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d010      	beq.n	8008b10 <RadioSetRxGenericConfig+0x29c>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	dc2c      	bgt.n	8008b4c <RadioSetRxGenericConfig+0x2d8>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <RadioSetRxGenericConfig+0x288>
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d005      	beq.n	8008b06 <RadioSetRxGenericConfig+0x292>
            break;
 8008afa:	e027      	b.n	8008b4c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008afc:	4b0e      	ldr	r3, [pc, #56]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008b04:	e023      	b.n	8008b4e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b06:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008b0e:	e01e      	b.n	8008b4e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008b16:	2b0b      	cmp	r3, #11
 8008b18:	d004      	beq.n	8008b24 <RadioSetRxGenericConfig+0x2b0>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008b20:	2b0c      	cmp	r3, #12
 8008b22:	d104      	bne.n	8008b2e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008b2c:	e00f      	b.n	8008b4e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008b2e:	4b02      	ldr	r3, [pc, #8]	@ (8008b38 <RadioSetRxGenericConfig+0x2c4>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008b36:	e00a      	b.n	8008b4e <RadioSetRxGenericConfig+0x2da>
 8008b38:	20000288 	.word	0x20000288
 8008b3c:	20000284 	.word	0x20000284
 8008b40:	200002fc 	.word	0x200002fc
 8008b44:	200002c0 	.word	0x200002c0
 8008b48:	20000296 	.word	0x20000296
            break;
 8008b4c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008b4e:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008b58:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b5a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8008b62:	4b23      	ldr	r3, [pc, #140]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b64:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008b66:	4a22      	ldr	r2, [pc, #136]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b6c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8008b74:	4b1e      	ldr	r3, [pc, #120]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b76:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8008b80:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8008b86:	f7ff f98e 	bl	8007ea6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	f7fe fb22 	bl	80071d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b90:	4818      	ldr	r0, [pc, #96]	@ (8008bf4 <RadioSetRxGenericConfig+0x380>)
 8008b92:	f000 ff7d 	bl	8009a90 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b96:	4818      	ldr	r0, [pc, #96]	@ (8008bf8 <RadioSetRxGenericConfig+0x384>)
 8008b98:	f001 f84c 	bl	8009c34 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008b9c:	4b14      	ldr	r3, [pc, #80]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d10d      	bne.n	8008bc2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008ba6:	f240 7036 	movw	r0, #1846	@ 0x736
 8008baa:	f001 f99f 	bl	8009eec <SUBGRF_ReadRegister>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f023 0304 	bic.w	r3, r3, #4
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f240 7036 	movw	r0, #1846	@ 0x736
 8008bbc:	f001 f982 	bl	8009ec4 <SUBGRF_WriteRegister>
 8008bc0:	e00c      	b.n	8008bdc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008bc2:	f240 7036 	movw	r0, #1846	@ 0x736
 8008bc6:	f001 f991 	bl	8009eec <SUBGRF_ReadRegister>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f043 0304 	orr.w	r3, r3, #4
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	f240 7036 	movw	r0, #1846	@ 0x736
 8008bd8:	f001 f974 	bl	8009ec4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <RadioSetRxGenericConfig+0x37c>)
 8008bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008be2:	609a      	str	r2, [r3, #8]
        break;
 8008be4:	bf00      	nop
    }
    return status;
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3730      	adds	r7, #48	@ 0x30
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000288 	.word	0x20000288
 8008bf4:	200002c0 	.word	0x200002c0
 8008bf8:	20000296 	.word	0x20000296

08008bfc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08e      	sub	sp, #56	@ 0x38
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008c0e:	2300      	movs	r3, #0
 8008c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c12:	2300      	movs	r3, #0
 8008c14:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008c16:	f001 fc3c 	bl	800a492 <RFW_DeInit>
    switch( modem )
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	f200 8204 	bhi.w	800902a <RadioSetTxGenericConfig+0x42e>
 8008c22:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <RadioSetTxGenericConfig+0x2c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008dad 	.word	0x08008dad
 8008c2c:	08008ef5 	.word	0x08008ef5
 8008c30:	08008fed 	.word	0x08008fed
 8008c34:	08008c39 	.word	0x08008c39
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	7c9b      	ldrb	r3, [r3, #18]
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d902      	bls.n	8008c46 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c44:	e206      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6899      	ldr	r1, [r3, #8]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	7c9b      	ldrb	r3, [r3, #18]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fdbd 	bl	800a7d4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c66:	e1f5      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d813      	bhi.n	8008c9c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008c74:	2302      	movs	r3, #2
 8008c76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008c7a:	4b99      	ldr	r3, [pc, #612]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008c80:	4b97      	ldr	r3, [pc, #604]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008c82:	2203      	movs	r2, #3
 8008c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a94      	ldr	r2, [pc, #592]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008c8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	7cda      	ldrb	r2, [r3, #19]
 8008c94:	4b92      	ldr	r3, [pc, #584]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c9a:	e017      	b.n	8008ccc <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a8a      	ldr	r2, [pc, #552]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	7cda      	ldrb	r2, [r3, #19]
 8008cbc:	4b88      	ldr	r3, [pc, #544]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	4a85      	ldr	r2, [pc, #532]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cca:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	4b82      	ldr	r3, [pc, #520]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cd8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008cda:	4b81      	ldr	r3, [pc, #516]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cdc:	2204      	movs	r2, #4
 8008cde:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	7c9b      	ldrb	r3, [r3, #18]
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008cec:	4b7c      	ldr	r3, [pc, #496]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	7d9b      	ldrb	r3, [r3, #22]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d003      	beq.n	8008d02 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d12b      	bne.n	8008d5a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	7d5b      	ldrb	r3, [r3, #21]
 8008d06:	2bf1      	cmp	r3, #241	@ 0xf1
 8008d08:	d00a      	beq.n	8008d20 <RadioSetTxGenericConfig+0x124>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7d5b      	ldrb	r3, [r3, #21]
 8008d0e:	2bf2      	cmp	r3, #242	@ 0xf2
 8008d10:	d006      	beq.n	8008d20 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	7d5b      	ldrb	r3, [r3, #21]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d002      	beq.n	8008d20 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d1e:	e199      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8008ee4 <RadioSetTxGenericConfig+0x2e8>)
 8008d2c:	6819      	ldr	r1, [r3, #0]
 8008d2e:	f107 0320 	add.w	r3, r7, #32
 8008d32:	4a6d      	ldr	r2, [pc, #436]	@ (8008ee8 <RadioSetTxGenericConfig+0x2ec>)
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 fb9f 	bl	800a478 <RFW_Init>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d44:	e186      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d46:	4b66      	ldr	r3, [pc, #408]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d4c:	4b64      	ldr	r3, [pc, #400]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d52:	4b63      	ldr	r3, [pc, #396]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	755a      	strb	r2, [r3, #21]
        {
 8008d58:	e00b      	b.n	8008d72 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	7d5a      	ldrb	r2, [r3, #21]
 8008d5e:	4b60      	ldr	r3, [pc, #384]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d60:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7d9a      	ldrb	r2, [r3, #22]
 8008d66:	4b5e      	ldr	r3, [pc, #376]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d68:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	7d1a      	ldrb	r2, [r3, #20]
 8008d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008d70:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008d72:	f7ff f898 	bl	8007ea6 <RadioStandby>
        RadioSetModem( radio_modem );
 8008d76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fa2a 	bl	80071d4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d80:	485a      	ldr	r0, [pc, #360]	@ (8008eec <RadioSetTxGenericConfig+0x2f0>)
 8008d82:	f000 fe85 	bl	8009a90 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d86:	485a      	ldr	r0, [pc, #360]	@ (8008ef0 <RadioSetTxGenericConfig+0x2f4>)
 8008d88:	f000 ff54 	bl	8009c34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fa18 	bl	80091c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	8a1b      	ldrh	r3, [r3, #16]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fa62 	bl	8009264 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	899b      	ldrh	r3, [r3, #12]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fa3d 	bl	8009224 <SUBGRF_SetCrcPolynomial>
        break;
 8008daa:	e13f      	b.n	800902c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008db8:	e14c      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	7c9b      	ldrb	r3, [r3, #18]
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d902      	bls.n	8008dc8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dc6:	e145      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	6899      	ldr	r1, [r3, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	7c9b      	ldrb	r3, [r3, #18]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fcfc 	bl	800a7d4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ddc:	4b40      	ldr	r3, [pc, #256]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a3d      	ldr	r2, [pc, #244]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7cda      	ldrb	r2, [r3, #19]
 8008df0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	4a39      	ldr	r2, [pc, #228]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008dfc:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008dfe:	4b38      	ldr	r3, [pc, #224]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	4b34      	ldr	r3, [pc, #208]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e10:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008e12:	4b33      	ldr	r3, [pc, #204]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e14:	2204      	movs	r2, #4
 8008e16:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	7c9b      	ldrb	r3, [r3, #18]
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e22:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008e24:	4b2e      	ldr	r3, [pc, #184]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	7d9b      	ldrb	r3, [r3, #22]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d003      	beq.n	8008e3a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	7d1b      	ldrb	r3, [r3, #20]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d12a      	bne.n	8008e90 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	7d5b      	ldrb	r3, [r3, #21]
 8008e3e:	2bf1      	cmp	r3, #241	@ 0xf1
 8008e40:	d00a      	beq.n	8008e58 <RadioSetTxGenericConfig+0x25c>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	7d5b      	ldrb	r3, [r3, #21]
 8008e46:	2bf2      	cmp	r3, #242	@ 0xf2
 8008e48:	d006      	beq.n	8008e58 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	7d5b      	ldrb	r3, [r3, #21]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d002      	beq.n	8008e58 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e56:	e0fd      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008e60:	4b20      	ldr	r3, [pc, #128]	@ (8008ee4 <RadioSetTxGenericConfig+0x2e8>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	f107 0314 	add.w	r3, r7, #20
 8008e68:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee8 <RadioSetTxGenericConfig+0x2ec>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fb04 	bl	800a478 <RFW_Init>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e7a:	e0eb      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008e7c:	4b18      	ldr	r3, [pc, #96]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008e82:	4b17      	ldr	r3, [pc, #92]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008e88:	4b15      	ldr	r3, [pc, #84]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	755a      	strb	r2, [r3, #21]
        {
 8008e8e:	e00b      	b.n	8008ea8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	7d5a      	ldrb	r2, [r3, #21]
 8008e94:	4b12      	ldr	r3, [pc, #72]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	7d9a      	ldrb	r2, [r3, #22]
 8008e9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008e9e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	7d1a      	ldrb	r2, [r3, #20]
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee0 <RadioSetTxGenericConfig+0x2e4>)
 8008ea6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008ea8:	f7fe fffd 	bl	8007ea6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7fe f991 	bl	80071d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008eb2:	480e      	ldr	r0, [pc, #56]	@ (8008eec <RadioSetTxGenericConfig+0x2f0>)
 8008eb4:	f000 fdec 	bl	8009a90 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008eb8:	480d      	ldr	r0, [pc, #52]	@ (8008ef0 <RadioSetTxGenericConfig+0x2f4>)
 8008eba:	f000 febb 	bl	8009c34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f97f 	bl	80091c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	8a1b      	ldrh	r3, [r3, #16]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f9c9 	bl	8009264 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	899b      	ldrh	r3, [r3, #12]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f9a4 	bl	8009224 <SUBGRF_SetCrcPolynomial>
        break;
 8008edc:	e0a6      	b.n	800902c <RadioSetTxGenericConfig+0x430>
 8008ede:	bf00      	nop
 8008ee0:	20000288 	.word	0x20000288
 8008ee4:	20000284 	.word	0x20000284
 8008ee8:	200002e4 	.word	0x200002e4
 8008eec:	200002c0 	.word	0x200002c0
 8008ef0:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ef4:	4b59      	ldr	r3, [pc, #356]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b56      	ldr	r3, [pc, #344]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	785a      	ldrb	r2, [r3, #1]
 8008f0a:	4b54      	ldr	r3, [pc, #336]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	789a      	ldrb	r2, [r3, #2]
 8008f14:	4b51      	ldr	r3, [pc, #324]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f16:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	78db      	ldrb	r3, [r3, #3]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d010      	beq.n	8008f44 <RadioSetTxGenericConfig+0x348>
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	dc20      	bgt.n	8008f68 <RadioSetTxGenericConfig+0x36c>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <RadioSetTxGenericConfig+0x334>
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d005      	beq.n	8008f3a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008f2e:	e01b      	b.n	8008f68 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008f30:	4b4a      	ldr	r3, [pc, #296]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008f38:	e017      	b.n	8008f6a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008f3a:	4b48      	ldr	r3, [pc, #288]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008f42:	e012      	b.n	8008f6a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b0b      	cmp	r3, #11
 8008f4a:	d003      	beq.n	8008f54 <RadioSetTxGenericConfig+0x358>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b0c      	cmp	r3, #12
 8008f52:	d104      	bne.n	8008f5e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008f54:	4b41      	ldr	r3, [pc, #260]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008f5c:	e005      	b.n	8008f6a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008f66:	e000      	b.n	8008f6a <RadioSetTxGenericConfig+0x36e>
            break;
 8008f68:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	889a      	ldrh	r2, [r3, #4]
 8008f74:	4b39      	ldr	r3, [pc, #228]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f76:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	799a      	ldrb	r2, [r3, #6]
 8008f7c:	4b37      	ldr	r3, [pc, #220]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f7e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	79da      	ldrb	r2, [r3, #7]
 8008f84:	4b35      	ldr	r3, [pc, #212]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f86:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	7a1a      	ldrb	r2, [r3, #8]
 8008f8e:	4b33      	ldr	r3, [pc, #204]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008f90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8008f94:	f7fe ff87 	bl	8007ea6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7fe f91b 	bl	80071d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f9e:	4830      	ldr	r0, [pc, #192]	@ (8009060 <RadioSetTxGenericConfig+0x464>)
 8008fa0:	f000 fd76 	bl	8009a90 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fa4:	482f      	ldr	r0, [pc, #188]	@ (8009064 <RadioSetTxGenericConfig+0x468>)
 8008fa6:	f000 fe45 	bl	8009c34 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008faa:	4b2c      	ldr	r3, [pc, #176]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8008fac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fb0:	2b06      	cmp	r3, #6
 8008fb2:	d10d      	bne.n	8008fd0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008fb4:	f640 0089 	movw	r0, #2185	@ 0x889
 8008fb8:	f000 ff98 	bl	8009eec <SUBGRF_ReadRegister>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f023 0304 	bic.w	r3, r3, #4
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f640 0089 	movw	r0, #2185	@ 0x889
 8008fca:	f000 ff7b 	bl	8009ec4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8008fce:	e02d      	b.n	800902c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008fd0:	f640 0089 	movw	r0, #2185	@ 0x889
 8008fd4:	f000 ff8a 	bl	8009eec <SUBGRF_ReadRegister>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f043 0304 	orr.w	r3, r3, #4
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f640 0089 	movw	r0, #2185	@ 0x889
 8008fe6:	f000 ff6d 	bl	8009ec4 <SUBGRF_WriteRegister>
        break;
 8008fea:	e01f      	b.n	800902c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d004      	beq.n	8008ffe <RadioSetTxGenericConfig+0x402>
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ffc:	d902      	bls.n	8009004 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009002:	e027      	b.n	8009054 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009004:	2003      	movs	r0, #3
 8009006:	f7fe f8e5 	bl	80071d4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800900a:	4b14      	ldr	r3, [pc, #80]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 800900c:	2202      	movs	r2, #2
 800900e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a11      	ldr	r2, [pc, #68]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8009018:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800901a:	4b10      	ldr	r3, [pc, #64]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 800901c:	2216      	movs	r2, #22
 800901e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009022:	480f      	ldr	r0, [pc, #60]	@ (8009060 <RadioSetTxGenericConfig+0x464>)
 8009024:	f000 fd34 	bl	8009a90 <SUBGRF_SetModulationParams>
        break;
 8009028:	e000      	b.n	800902c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800902a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800902c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f863 	bl	800a0fc <SUBGRF_SetRfTxPower>
 8009036:	4603      	mov	r3, r0
 8009038:	461a      	mov	r2, r3
 800903a:	4b08      	ldr	r3, [pc, #32]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 800903c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009040:	4b06      	ldr	r3, [pc, #24]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 8009042:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fa37 	bl	800a4ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800904c:	4a03      	ldr	r2, [pc, #12]	@ (800905c <RadioSetTxGenericConfig+0x460>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6053      	str	r3, [r2, #4]
    return 0;
 8009052:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009054:	4618      	mov	r0, r3
 8009056:	3738      	adds	r7, #56	@ 0x38
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000288 	.word	0x20000288
 8009060:	200002c0 	.word	0x200002c0
 8009064:	20000296 	.word	0x20000296

08009068 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009070:	2301      	movs	r3, #1
 8009072:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr

08009080 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800908a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr
	...

08009098 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80090a6:	4a1d      	ldr	r2, [pc, #116]	@ (800911c <SUBGRF_Init+0x84>)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80090ac:	f7f7 faec 	bl	8000688 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80090b0:	2002      	movs	r0, #2
 80090b2:	f001 f8ff 	bl	800a2b4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <SUBGRF_Init+0x88>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80090bc:	2000      	movs	r0, #0
 80090be:	f000 f97d 	bl	80093bc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80090c2:	f001 fab6 	bl	800a632 <RBI_IsTCXO>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d10e      	bne.n	80090ea <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80090cc:	2140      	movs	r1, #64	@ 0x40
 80090ce:	2001      	movs	r0, #1
 80090d0:	f000 fb82 	bl	80097d8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80090d4:	2100      	movs	r1, #0
 80090d6:	f640 1011 	movw	r0, #2321	@ 0x911
 80090da:	f000 fef3 	bl	8009ec4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80090de:	237f      	movs	r3, #127	@ 0x7f
 80090e0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80090e2:	7b38      	ldrb	r0, [r7, #12]
 80090e4:	f000 fa8b 	bl	80095fe <SUBGRF_Calibrate>
 80090e8:	e009      	b.n	80090fe <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80090ea:	2120      	movs	r1, #32
 80090ec:	f640 1011 	movw	r0, #2321	@ 0x911
 80090f0:	f000 fee8 	bl	8009ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80090f4:	2120      	movs	r1, #32
 80090f6:	f640 1012 	movw	r0, #2322	@ 0x912
 80090fa:	f000 fee3 	bl	8009ec4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80090fe:	210e      	movs	r1, #14
 8009100:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009104:	f000 fede 	bl	8009ec4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009108:	f001 fa70 	bl	800a5ec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <SUBGRF_Init+0x8c>)
 800910e:	2201      	movs	r2, #1
 8009110:	701a      	strb	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000320 	.word	0x20000320
 8009120:	2000031c 	.word	0x2000031c
 8009124:	20000314 	.word	0x20000314

08009128 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800912c:	4b02      	ldr	r3, [pc, #8]	@ (8009138 <SUBGRF_GetOperatingMode+0x10>)
 800912e:	781b      	ldrb	r3, [r3, #0]
}
 8009130:	4618      	mov	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr
 8009138:	20000314 	.word	0x20000314

0800913c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	461a      	mov	r2, r3
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	2000      	movs	r0, #0
 8009150:	f000 ff24 	bl	8009f9c <SUBGRF_WriteBuffer>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800916e:	f107 0317 	add.w	r3, r7, #23
 8009172:	4619      	mov	r1, r3
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f000 fe27 	bl	8009dc8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	79fa      	ldrb	r2, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d201      	bcs.n	8009188 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009184:	2301      	movs	r3, #1
 8009186:	e007      	b.n	8009198 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009188:	7df8      	ldrb	r0, [r7, #23]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	68f9      	ldr	r1, [r7, #12]
 8009192:	f000 ff25 	bl	8009fe0 <SUBGRF_ReadBuffer>

    return 0;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	460b      	mov	r3, r1
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	4619      	mov	r1, r3
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff ffc2 	bl	800913c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f91b 	bl	80093f4 <SUBGRF_SetTx>
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80091ce:	2208      	movs	r2, #8
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80091d6:	f000 fe9d 	bl	8009f14 <SUBGRF_WriteRegisters>
    return 0;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80091ee:	88fb      	ldrh	r3, [r7, #6]
 80091f0:	0a1b      	lsrs	r3, r3, #8
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80091fe:	f000 fb6f 	bl	80098e0 <SUBGRF_GetPacketType>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d108      	bne.n	800921a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009208:	f107 030c 	add.w	r3, r7, #12
 800920c:	2202      	movs	r2, #2
 800920e:	4619      	mov	r1, r3
 8009210:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009214:	f000 fe7e 	bl	8009f14 <SUBGRF_WriteRegisters>
            break;
 8009218:	e000      	b.n	800921c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800921a:	bf00      	nop
    }
}
 800921c:	bf00      	nop
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	b29b      	uxth	r3, r3
 8009234:	b2db      	uxtb	r3, r3
 8009236:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800923e:	f000 fb4f 	bl	80098e0 <SUBGRF_GetPacketType>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d108      	bne.n	800925a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	2202      	movs	r2, #2
 800924e:	4619      	mov	r1, r3
 8009250:	f240 60be 	movw	r0, #1726	@ 0x6be
 8009254:	f000 fe5e 	bl	8009f14 <SUBGRF_WriteRegisters>
            break;
 8009258:	e000      	b.n	800925c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800925a:	bf00      	nop
    }
}
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009272:	f000 fb35 	bl	80098e0 <SUBGRF_GetPacketType>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d121      	bne.n	80092c0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800927c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009280:	f000 fe34 	bl	8009eec <SUBGRF_ReadRegister>
 8009284:	4603      	mov	r3, r0
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b29b      	uxth	r3, r3
 8009292:	b25b      	sxtb	r3, r3
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	b25a      	sxtb	r2, r3
 800929a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929e:	4313      	orrs	r3, r2
 80092a0:	b25b      	sxtb	r3, r3
 80092a2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4619      	mov	r1, r3
 80092a8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80092ac:	f000 fe0a 	bl	8009ec4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80092ba:	f000 fe03 	bl	8009ec4 <SUBGRF_WriteRegister>
            break;
 80092be:	e000      	b.n	80092c2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80092c0:	bf00      	nop
    }
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80092dc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80092e0:	f000 fe04 	bl	8009eec <SUBGRF_ReadRegister>
 80092e4:	4603      	mov	r3, r0
 80092e6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	f023 0301 	bic.w	r3, r3, #1
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4619      	mov	r1, r3
 80092f2:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80092f6:	f000 fde5 	bl	8009ec4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80092fa:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80092fe:	f000 fdf5 	bl	8009eec <SUBGRF_ReadRegister>
 8009302:	4603      	mov	r3, r0
 8009304:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009306:	79bb      	ldrb	r3, [r7, #6]
 8009308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930c:	b2db      	uxtb	r3, r3
 800930e:	4619      	mov	r1, r3
 8009310:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009314:	f000 fdd6 	bl	8009ec4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009318:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800931c:	f000 f88a 	bl	8009434 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009320:	463b      	mov	r3, r7
 8009322:	2204      	movs	r2, #4
 8009324:	4619      	mov	r1, r3
 8009326:	f640 0019 	movw	r0, #2073	@ 0x819
 800932a:	f000 fe15 	bl	8009f58 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800932e:	2000      	movs	r0, #0
 8009330:	f000 f844 	bl	80093bc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	4619      	mov	r1, r3
 8009338:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800933c:	f000 fdc2 	bl	8009ec4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009340:	79bb      	ldrb	r3, [r7, #6]
 8009342:	4619      	mov	r1, r3
 8009344:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009348:	f000 fdbc 	bl	8009ec4 <SUBGRF_WriteRegister>

    return number;
 800934c:	683b      	ldr	r3, [r7, #0]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009360:	2000      	movs	r0, #0
 8009362:	f001 f94e 	bl	800a602 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009366:	2002      	movs	r0, #2
 8009368:	f000 ffa4 	bl	800a2b4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800936c:	793b      	ldrb	r3, [r7, #4]
 800936e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009372:	b2db      	uxtb	r3, r3
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009378:	793b      	ldrb	r3, [r7, #4]
 800937a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800937e:	b2db      	uxtb	r3, r3
 8009380:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009382:	b25b      	sxtb	r3, r3
 8009384:	4313      	orrs	r3, r2
 8009386:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009388:	793b      	ldrb	r3, [r7, #4]
 800938a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800938e:	b2db      	uxtb	r3, r3
 8009390:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009392:	4313      	orrs	r3, r2
 8009394:	b25b      	sxtb	r3, r3
 8009396:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009398:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800939a:	f107 030f 	add.w	r3, r7, #15
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	2084      	movs	r0, #132	@ 0x84
 80093a4:	f000 fe3e 	bl	800a024 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80093a8:	4b03      	ldr	r3, [pc, #12]	@ (80093b8 <SUBGRF_SetSleep+0x60>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000314 	.word	0x20000314

080093bc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80093c6:	1dfb      	adds	r3, r7, #7
 80093c8:	2201      	movs	r2, #1
 80093ca:	4619      	mov	r1, r3
 80093cc:	2080      	movs	r0, #128	@ 0x80
 80093ce:	f000 fe29 	bl	800a024 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d103      	bne.n	80093e0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80093d8:	4b05      	ldr	r3, [pc, #20]	@ (80093f0 <SUBGRF_SetStandby+0x34>)
 80093da:	2201      	movs	r2, #1
 80093dc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80093de:	e002      	b.n	80093e6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80093e0:	4b03      	ldr	r3, [pc, #12]	@ (80093f0 <SUBGRF_SetStandby+0x34>)
 80093e2:	2202      	movs	r2, #2
 80093e4:	701a      	strb	r2, [r3, #0]
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20000314 	.word	0x20000314

080093f4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80093fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009430 <SUBGRF_SetTx+0x3c>)
 80093fe:	2204      	movs	r2, #4
 8009400:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	b2db      	uxtb	r3, r3
 8009408:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	b2db      	uxtb	r3, r3
 8009410:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	2203      	movs	r2, #3
 800941e:	4619      	mov	r1, r3
 8009420:	2083      	movs	r0, #131	@ 0x83
 8009422:	f000 fdff 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000314 	.word	0x20000314

08009434 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800943c:	4b0c      	ldr	r3, [pc, #48]	@ (8009470 <SUBGRF_SetRx+0x3c>)
 800943e:	2205      	movs	r2, #5
 8009440:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	b2db      	uxtb	r3, r3
 8009448:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	0a1b      	lsrs	r3, r3, #8
 800944e:	b2db      	uxtb	r3, r3
 8009450:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	2203      	movs	r2, #3
 800945e:	4619      	mov	r1, r3
 8009460:	2082      	movs	r0, #130	@ 0x82
 8009462:	f000 fddf 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000314 	.word	0x20000314

08009474 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800947c:	4b0e      	ldr	r3, [pc, #56]	@ (80094b8 <SUBGRF_SetRxBoosted+0x44>)
 800947e:	2205      	movs	r2, #5
 8009480:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009482:	2197      	movs	r1, #151	@ 0x97
 8009484:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8009488:	f000 fd1c 	bl	8009ec4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	0c1b      	lsrs	r3, r3, #16
 8009490:	b2db      	uxtb	r3, r3
 8009492:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	b2db      	uxtb	r3, r3
 800949a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	2203      	movs	r2, #3
 80094a8:	4619      	mov	r1, r3
 80094aa:	2082      	movs	r0, #130	@ 0x82
 80094ac:	f000 fdba 	bl	800a024 <SUBGRF_WriteCommand>
}
 80094b0:	bf00      	nop
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000314 	.word	0x20000314

080094bc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	0a1b      	lsrs	r3, r3, #8
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	0c1b      	lsrs	r3, r3, #16
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80094f2:	f107 0308 	add.w	r3, r7, #8
 80094f6:	2206      	movs	r2, #6
 80094f8:	4619      	mov	r1, r3
 80094fa:	2094      	movs	r0, #148	@ 0x94
 80094fc:	f000 fd92 	bl	800a024 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009500:	4b03      	ldr	r3, [pc, #12]	@ (8009510 <SUBGRF_SetRxDutyCycle+0x54>)
 8009502:	2206      	movs	r2, #6
 8009504:	701a      	strb	r2, [r3, #0]
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20000314 	.word	0x20000314

08009514 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	20c5      	movs	r0, #197	@ 0xc5
 800951e:	f000 fd81 	bl	800a024 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009522:	4b02      	ldr	r3, [pc, #8]	@ (800952c <SUBGRF_SetCad+0x18>)
 8009524:	2207      	movs	r2, #7
 8009526:	701a      	strb	r2, [r3, #0]
}
 8009528:	bf00      	nop
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000314 	.word	0x20000314

08009530 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009534:	2200      	movs	r2, #0
 8009536:	2100      	movs	r1, #0
 8009538:	20d1      	movs	r0, #209	@ 0xd1
 800953a:	f000 fd73 	bl	800a024 <SUBGRF_WriteCommand>
}
 800953e:	bf00      	nop
 8009540:	bd80      	pop	{r7, pc}

08009542 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009542:	b580      	push	{r7, lr}
 8009544:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009546:	2200      	movs	r2, #0
 8009548:	2100      	movs	r1, #0
 800954a:	20d2      	movs	r0, #210	@ 0xd2
 800954c:	f000 fd6a 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009550:	bf00      	nop
 8009552:	bd80      	pop	{r7, pc}

08009554 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800955e:	1dfb      	adds	r3, r7, #7
 8009560:	2201      	movs	r2, #1
 8009562:	4619      	mov	r1, r3
 8009564:	209f      	movs	r0, #159	@ 0x9f
 8009566:	f000 fd5d 	bl	800a024 <SUBGRF_WriteCommand>
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	4603      	mov	r3, r0
 800957a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800957c:	1dfb      	adds	r3, r7, #7
 800957e:	2201      	movs	r2, #1
 8009580:	4619      	mov	r1, r3
 8009582:	20a0      	movs	r0, #160	@ 0xa0
 8009584:	f000 fd4e 	bl	800a024 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b3f      	cmp	r3, #63	@ 0x3f
 800958c:	d91c      	bls.n	80095c8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800959c:	e005      	b.n	80095aa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	089b      	lsrs	r3, r3, #2
 80095a2:	73fb      	strb	r3, [r7, #15]
            exp++;
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	3301      	adds	r3, #1
 80095a8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	2b1f      	cmp	r3, #31
 80095ae:	d8f6      	bhi.n	800959e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	4413      	add	r3, r2
 80095ba:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80095bc:	7b7b      	ldrb	r3, [r7, #13]
 80095be:	4619      	mov	r1, r3
 80095c0:	f240 7006 	movw	r0, #1798	@ 0x706
 80095c4:	f000 fc7e 	bl	8009ec4 <SUBGRF_WriteRegister>
    }
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80095d6:	f001 f837 	bl	800a648 <RBI_IsDCDC>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d102      	bne.n	80095e6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80095e0:	2301      	movs	r3, #1
 80095e2:	71fb      	strb	r3, [r7, #7]
 80095e4:	e001      	b.n	80095ea <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80095e6:	2300      	movs	r3, #0
 80095e8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80095ea:	1dfb      	adds	r3, r7, #7
 80095ec:	2201      	movs	r2, #1
 80095ee:	4619      	mov	r1, r3
 80095f0:	2096      	movs	r0, #150	@ 0x96
 80095f2:	f000 fd17 	bl	800a024 <SUBGRF_WriteCommand>
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009606:	793b      	ldrb	r3, [r7, #4]
 8009608:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	019b      	lsls	r3, r3, #6
 8009610:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009612:	793b      	ldrb	r3, [r7, #4]
 8009614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009618:	b2db      	uxtb	r3, r3
 800961a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800961c:	b25b      	sxtb	r3, r3
 800961e:	4313      	orrs	r3, r2
 8009620:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009622:	793b      	ldrb	r3, [r7, #4]
 8009624:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800962c:	b25b      	sxtb	r3, r3
 800962e:	4313      	orrs	r3, r2
 8009630:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009632:	793b      	ldrb	r3, [r7, #4]
 8009634:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009638:	b2db      	uxtb	r3, r3
 800963a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800963c:	b25b      	sxtb	r3, r3
 800963e:	4313      	orrs	r3, r2
 8009640:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009642:	793b      	ldrb	r3, [r7, #4]
 8009644:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800964c:	b25b      	sxtb	r3, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009652:	793b      	ldrb	r3, [r7, #4]
 8009654:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800965c:	b25b      	sxtb	r3, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009662:	793b      	ldrb	r3, [r7, #4]
 8009664:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009668:	b2db      	uxtb	r3, r3
 800966a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800966c:	4313      	orrs	r3, r2
 800966e:	b25b      	sxtb	r3, r3
 8009670:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009672:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009674:	f107 030f 	add.w	r3, r7, #15
 8009678:	2201      	movs	r2, #1
 800967a:	4619      	mov	r1, r3
 800967c:	2089      	movs	r0, #137	@ 0x89
 800967e:	f000 fcd1 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1d      	ldr	r2, [pc, #116]	@ (800970c <SUBGRF_CalibrateImage+0x80>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d904      	bls.n	80096a6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800969c:	23e1      	movs	r3, #225	@ 0xe1
 800969e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80096a0:	23e9      	movs	r3, #233	@ 0xe9
 80096a2:	737b      	strb	r3, [r7, #13]
 80096a4:	e027      	b.n	80096f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a19      	ldr	r2, [pc, #100]	@ (8009710 <SUBGRF_CalibrateImage+0x84>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d904      	bls.n	80096b8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80096ae:	23d7      	movs	r3, #215	@ 0xd7
 80096b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80096b2:	23db      	movs	r3, #219	@ 0xdb
 80096b4:	737b      	strb	r3, [r7, #13]
 80096b6:	e01e      	b.n	80096f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a16      	ldr	r2, [pc, #88]	@ (8009714 <SUBGRF_CalibrateImage+0x88>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d904      	bls.n	80096ca <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80096c0:	23c1      	movs	r3, #193	@ 0xc1
 80096c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80096c4:	23c5      	movs	r3, #197	@ 0xc5
 80096c6:	737b      	strb	r3, [r7, #13]
 80096c8:	e015      	b.n	80096f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a12      	ldr	r2, [pc, #72]	@ (8009718 <SUBGRF_CalibrateImage+0x8c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d904      	bls.n	80096dc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80096d2:	2375      	movs	r3, #117	@ 0x75
 80096d4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80096d6:	2381      	movs	r3, #129	@ 0x81
 80096d8:	737b      	strb	r3, [r7, #13]
 80096da:	e00c      	b.n	80096f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a0f      	ldr	r2, [pc, #60]	@ (800971c <SUBGRF_CalibrateImage+0x90>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d904      	bls.n	80096ee <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80096e4:	236b      	movs	r3, #107	@ 0x6b
 80096e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80096e8:	236f      	movs	r3, #111	@ 0x6f
 80096ea:	737b      	strb	r3, [r7, #13]
 80096ec:	e003      	b.n	80096f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80096ee:	2329      	movs	r3, #41	@ 0x29
 80096f0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80096f2:	232b      	movs	r3, #43	@ 0x2b
 80096f4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	2202      	movs	r2, #2
 80096fc:	4619      	mov	r1, r3
 80096fe:	2098      	movs	r0, #152	@ 0x98
 8009700:	f000 fc90 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	35a4e900 	.word	0x35a4e900
 8009710:	32a9f880 	.word	0x32a9f880
 8009714:	2de54480 	.word	0x2de54480
 8009718:	1b6b0b00 	.word	0x1b6b0b00
 800971c:	1954fc40 	.word	0x1954fc40

08009720 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	4611      	mov	r1, r2
 800972c:	461a      	mov	r2, r3
 800972e:	4623      	mov	r3, r4
 8009730:	71fb      	strb	r3, [r7, #7]
 8009732:	4603      	mov	r3, r0
 8009734:	71bb      	strb	r3, [r7, #6]
 8009736:	460b      	mov	r3, r1
 8009738:	717b      	strb	r3, [r7, #5]
 800973a:	4613      	mov	r3, r2
 800973c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009742:	79bb      	ldrb	r3, [r7, #6]
 8009744:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009746:	797b      	ldrb	r3, [r7, #5]
 8009748:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800974a:	793b      	ldrb	r3, [r7, #4]
 800974c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800974e:	f107 030c 	add.w	r3, r7, #12
 8009752:	2204      	movs	r2, #4
 8009754:	4619      	mov	r1, r3
 8009756:	2095      	movs	r0, #149	@ 0x95
 8009758:	f000 fc64 	bl	800a024 <SUBGRF_WriteCommand>
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	bd90      	pop	{r4, r7, pc}

08009764 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4623      	mov	r3, r4
 8009774:	80fb      	strh	r3, [r7, #6]
 8009776:	4603      	mov	r3, r0
 8009778:	80bb      	strh	r3, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	807b      	strh	r3, [r7, #2]
 800977e:	4613      	mov	r3, r2
 8009780:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	0a1b      	lsrs	r3, r3, #8
 8009786:	b29b      	uxth	r3, r3
 8009788:	b2db      	uxtb	r3, r3
 800978a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009792:	88bb      	ldrh	r3, [r7, #4]
 8009794:	0a1b      	lsrs	r3, r3, #8
 8009796:	b29b      	uxth	r3, r3
 8009798:	b2db      	uxtb	r3, r3
 800979a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800979c:	88bb      	ldrh	r3, [r7, #4]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80097a2:	887b      	ldrh	r3, [r7, #2]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80097ac:	887b      	ldrh	r3, [r7, #2]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80097b2:	883b      	ldrh	r3, [r7, #0]
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80097bc:	883b      	ldrh	r3, [r7, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	2208      	movs	r2, #8
 80097c8:	4619      	mov	r1, r3
 80097ca:	2008      	movs	r0, #8
 80097cc:	f000 fc2a 	bl	800a024 <SUBGRF_WriteCommand>
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	6039      	str	r1, [r7, #0]
 80097e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	0c1b      	lsrs	r3, r3, #16
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	0a1b      	lsrs	r3, r3, #8
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009804:	f107 030c 	add.w	r3, r7, #12
 8009808:	2204      	movs	r2, #4
 800980a:	4619      	mov	r1, r3
 800980c:	2097      	movs	r0, #151	@ 0x97
 800980e:	f000 fc09 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800981c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800982a:	4b1d      	ldr	r3, [pc, #116]	@ (80098a0 <SUBGRF_SetRfFrequency+0x84>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	f083 0301 	eor.w	r3, r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ff27 	bl	800968c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800983e:	4b18      	ldr	r3, [pc, #96]	@ (80098a0 <SUBGRF_SetRfFrequency+0x84>)
 8009840:	2201      	movs	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	461c      	mov	r4, r3
 800984a:	4615      	mov	r5, r2
 800984c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009850:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009854:	4a13      	ldr	r2, [pc, #76]	@ (80098a4 <SUBGRF_SetRfFrequency+0x88>)
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f6 fc93 	bl	8000188 <__aeabi_uldivmod>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4613      	mov	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	0e1b      	lsrs	r3, r3, #24
 800986e:	b2db      	uxtb	r3, r3
 8009870:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	0c1b      	lsrs	r3, r3, #16
 8009876:	b2db      	uxtb	r3, r3
 8009878:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	b2db      	uxtb	r3, r3
 8009880:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	2204      	movs	r2, #4
 800988e:	4619      	mov	r1, r3
 8009890:	2086      	movs	r0, #134	@ 0x86
 8009892:	f000 fbc7 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80098a0:	2000031c 	.word	0x2000031c
 80098a4:	01e84800 	.word	0x01e84800

080098a8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80098b2:	79fa      	ldrb	r2, [r7, #7]
 80098b4:	4b09      	ldr	r3, [pc, #36]	@ (80098dc <SUBGRF_SetPacketType+0x34>)
 80098b6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80098be:	2100      	movs	r1, #0
 80098c0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80098c4:	f000 fafe 	bl	8009ec4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80098c8:	1dfb      	adds	r3, r7, #7
 80098ca:	2201      	movs	r2, #1
 80098cc:	4619      	mov	r1, r3
 80098ce:	208a      	movs	r0, #138	@ 0x8a
 80098d0:	f000 fba8 	bl	800a024 <SUBGRF_WriteCommand>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000315 	.word	0x20000315

080098e0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80098e0:	b480      	push	{r7}
 80098e2:	af00      	add	r7, sp, #0
    return PacketType;
 80098e4:	4b02      	ldr	r3, [pc, #8]	@ (80098f0 <SUBGRF_GetPacketType+0x10>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr
 80098f0:	20000315 	.word	0x20000315

080098f4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	71fb      	strb	r3, [r7, #7]
 80098fe:	460b      	mov	r3, r1
 8009900:	71bb      	strb	r3, [r7, #6]
 8009902:	4613      	mov	r3, r2
 8009904:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d149      	bne.n	80099a0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800990c:	2000      	movs	r0, #0
 800990e:	f000 fea6 	bl	800a65e <RBI_GetRFOMaxPowerConfig>
 8009912:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009914:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	da01      	bge.n	8009922 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b0e      	cmp	r3, #14
 8009926:	d10e      	bne.n	8009946 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009928:	2301      	movs	r3, #1
 800992a:	2201      	movs	r2, #1
 800992c:	2100      	movs	r1, #0
 800992e:	2004      	movs	r0, #4
 8009930:	f7ff fef6 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009934:	79ba      	ldrb	r2, [r7, #6]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	b2db      	uxtb	r3, r3
 800993e:	330e      	adds	r3, #14
 8009940:	b2db      	uxtb	r3, r3
 8009942:	71bb      	strb	r3, [r7, #6]
 8009944:	e01f      	b.n	8009986 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b0a      	cmp	r3, #10
 800994a:	d10e      	bne.n	800996a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800994c:	2301      	movs	r3, #1
 800994e:	2201      	movs	r2, #1
 8009950:	2100      	movs	r1, #0
 8009952:	2001      	movs	r0, #1
 8009954:	f7ff fee4 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009958:	79ba      	ldrb	r2, [r7, #6]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	b2db      	uxtb	r3, r3
 8009962:	330d      	adds	r3, #13
 8009964:	b2db      	uxtb	r3, r3
 8009966:	71bb      	strb	r3, [r7, #6]
 8009968:	e00d      	b.n	8009986 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800996a:	2301      	movs	r3, #1
 800996c:	2201      	movs	r2, #1
 800996e:	2100      	movs	r1, #0
 8009970:	2007      	movs	r0, #7
 8009972:	f7ff fed5 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009976:	79ba      	ldrb	r2, [r7, #6]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	b2db      	uxtb	r3, r3
 8009980:	330e      	adds	r3, #14
 8009982:	b2db      	uxtb	r3, r3
 8009984:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009986:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800998a:	f113 0f11 	cmn.w	r3, #17
 800998e:	da01      	bge.n	8009994 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009990:	23ef      	movs	r3, #239	@ 0xef
 8009992:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009994:	2118      	movs	r1, #24
 8009996:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800999a:	f000 fa93 	bl	8009ec4 <SUBGRF_WriteRegister>
 800999e:	e067      	b.n	8009a70 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80099a0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80099a4:	f000 faa2 	bl	8009eec <SUBGRF_ReadRegister>
 80099a8:	4603      	mov	r3, r0
 80099aa:	f043 031e 	orr.w	r3, r3, #30
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	4619      	mov	r1, r3
 80099b2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80099b6:	f000 fa85 	bl	8009ec4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80099ba:	2001      	movs	r0, #1
 80099bc:	f000 fe4f 	bl	800a65e <RBI_GetRFOMaxPowerConfig>
 80099c0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80099c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	da01      	bge.n	80099d0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b14      	cmp	r3, #20
 80099d4:	d10e      	bne.n	80099f4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80099d6:	2301      	movs	r3, #1
 80099d8:	2200      	movs	r2, #0
 80099da:	2105      	movs	r1, #5
 80099dc:	2003      	movs	r0, #3
 80099de:	f7ff fe9f 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80099e2:	79ba      	ldrb	r2, [r7, #6]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	3316      	adds	r3, #22
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	71bb      	strb	r3, [r7, #6]
 80099f2:	e031      	b.n	8009a58 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b11      	cmp	r3, #17
 80099f8:	d10e      	bne.n	8009a18 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80099fa:	2301      	movs	r3, #1
 80099fc:	2200      	movs	r2, #0
 80099fe:	2103      	movs	r1, #3
 8009a00:	2002      	movs	r0, #2
 8009a02:	f7ff fe8d 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009a06:	79ba      	ldrb	r2, [r7, #6]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	3316      	adds	r3, #22
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	71bb      	strb	r3, [r7, #6]
 8009a16:	e01f      	b.n	8009a58 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b0e      	cmp	r3, #14
 8009a1c:	d10e      	bne.n	8009a3c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009a1e:	2301      	movs	r3, #1
 8009a20:	2200      	movs	r2, #0
 8009a22:	2102      	movs	r1, #2
 8009a24:	2002      	movs	r0, #2
 8009a26:	f7ff fe7b 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009a2a:	79ba      	ldrb	r2, [r7, #6]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	330e      	adds	r3, #14
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	71bb      	strb	r3, [r7, #6]
 8009a3a:	e00d      	b.n	8009a58 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2107      	movs	r1, #7
 8009a42:	2004      	movs	r0, #4
 8009a44:	f7ff fe6c 	bl	8009720 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009a48:	79ba      	ldrb	r2, [r7, #6]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	3316      	adds	r3, #22
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009a58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a5c:	f113 0f09 	cmn.w	r3, #9
 8009a60:	da01      	bge.n	8009a66 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009a62:	23f7      	movs	r3, #247	@ 0xf7
 8009a64:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009a66:	2138      	movs	r1, #56	@ 0x38
 8009a68:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009a6c:	f000 fa2a 	bl	8009ec4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009a70:	79bb      	ldrb	r3, [r7, #6]
 8009a72:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009a74:	797b      	ldrb	r3, [r7, #5]
 8009a76:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	208e      	movs	r0, #142	@ 0x8e
 8009a82:	f000 facf 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009a90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009a9e:	4a61      	ldr	r2, [pc, #388]	@ (8009c24 <SUBGRF_SetModulationParams+0x194>)
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009aa8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	781a      	ldrb	r2, [r3, #0]
 8009ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8009c28 <SUBGRF_SetModulationParams+0x198>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d004      	beq.n	8009ac2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fef3 	bl	80098a8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	f200 80a5 	bhi.w	8009c16 <SUBGRF_SetModulationParams+0x186>
 8009acc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <SUBGRF_SetModulationParams+0x44>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009ae5 	.word	0x08009ae5
 8009ad8:	08009ba5 	.word	0x08009ba5
 8009adc:	08009b67 	.word	0x08009b67
 8009ae0:	08009bd3 	.word	0x08009bd3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4a4f      	ldr	r2, [pc, #316]	@ (8009c2c <SUBGRF_SetModulationParams+0x19c>)
 8009aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	0c1b      	lsrs	r3, r3, #16
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7b1b      	ldrb	r3, [r3, #12]
 8009b0e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7b5b      	ldrb	r3, [r3, #13]
 8009b14:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	461c      	mov	r4, r3
 8009b1e:	4615      	mov	r5, r2
 8009b20:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009b24:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009b28:	4a41      	ldr	r2, [pc, #260]	@ (8009c30 <SUBGRF_SetModulationParams+0x1a0>)
 8009b2a:	f04f 0300 	mov.w	r3, #0
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 fb29 	bl	8000188 <__aeabi_uldivmod>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	0c1b      	lsrs	r3, r3, #16
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	208b      	movs	r0, #139	@ 0x8b
 8009b60:	f000 fa60 	bl	800a024 <SUBGRF_WriteCommand>
        break;
 8009b64:	e058      	b.n	8009c18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009b66:	2304      	movs	r3, #4
 8009b68:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8009c2c <SUBGRF_SetModulationParams+0x19c>)
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	0c1b      	lsrs	r3, r3, #16
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	7d1b      	ldrb	r3, [r3, #20]
 8009b90:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b92:	7cfb      	ldrb	r3, [r7, #19]
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	208b      	movs	r0, #139	@ 0x8b
 8009b9e:	f000 fa41 	bl	800a024 <SUBGRF_WriteCommand>
        break;
 8009ba2:	e039      	b.n	8009c18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009ba4:	2304      	movs	r3, #4
 8009ba6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7e1b      	ldrb	r3, [r3, #24]
 8009bac:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7e5b      	ldrb	r3, [r3, #25]
 8009bb2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7e9b      	ldrb	r3, [r3, #26]
 8009bb8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7edb      	ldrb	r3, [r3, #27]
 8009bbe:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009bc0:	7cfb      	ldrb	r3, [r7, #19]
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	f107 0308 	add.w	r3, r7, #8
 8009bc8:	4619      	mov	r1, r3
 8009bca:	208b      	movs	r0, #139	@ 0x8b
 8009bcc:	f000 fa2a 	bl	800a024 <SUBGRF_WriteCommand>

        break;
 8009bd0:	e022      	b.n	8009c18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009bd2:	2305      	movs	r3, #5
 8009bd4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4a14      	ldr	r2, [pc, #80]	@ (8009c2c <SUBGRF_SetModulationParams+0x19c>)
 8009bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	0a1b      	lsrs	r3, r3, #8
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7b1b      	ldrb	r3, [r3, #12]
 8009bfc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7b5b      	ldrb	r3, [r3, #13]
 8009c02:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	f107 0308 	add.w	r3, r7, #8
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	208b      	movs	r0, #139	@ 0x8b
 8009c10:	f000 fa08 	bl	800a024 <SUBGRF_WriteCommand>
        break;
 8009c14:	e000      	b.n	8009c18 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009c16:	bf00      	nop
    }
}
 8009c18:	bf00      	nop
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c22:	bf00      	nop
 8009c24:	0800bbd4 	.word	0x0800bbd4
 8009c28:	20000315 	.word	0x20000315
 8009c2c:	3d090000 	.word	0x3d090000
 8009c30:	01e84800 	.word	0x01e84800

08009c34 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c40:	4a48      	ldr	r2, [pc, #288]	@ (8009d64 <SUBGRF_SetPacketParams+0x130>)
 8009c42:	f107 030c 	add.w	r3, r7, #12
 8009c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c48:	c303      	stmia	r3!, {r0, r1}
 8009c4a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	781a      	ldrb	r2, [r3, #0]
 8009c50:	4b45      	ldr	r3, [pc, #276]	@ (8009d68 <SUBGRF_SetPacketParams+0x134>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d004      	beq.n	8009c62 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fe23 	bl	80098a8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d878      	bhi.n	8009d5c <SUBGRF_SetPacketParams+0x128>
 8009c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c70 <SUBGRF_SetPacketParams+0x3c>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009d11 	.word	0x08009d11
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009c81 	.word	0x08009c81
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7a5b      	ldrb	r3, [r3, #9]
 8009c84:	2bf1      	cmp	r3, #241	@ 0xf1
 8009c86:	d10a      	bne.n	8009c9e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009c88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009c8c:	f7ff faaa 	bl	80091e4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009c90:	f248 0005 	movw	r0, #32773	@ 0x8005
 8009c94:	f7ff fac6 	bl	8009224 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	75bb      	strb	r3, [r7, #22]
 8009c9c:	e011      	b.n	8009cc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	7a5b      	ldrb	r3, [r3, #9]
 8009ca2:	2bf2      	cmp	r3, #242	@ 0xf2
 8009ca4:	d10a      	bne.n	8009cbc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009ca6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8009caa:	f7ff fa9b 	bl	80091e4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009cae:	f241 0021 	movw	r0, #4129	@ 0x1021
 8009cb2:	f7ff fab7 	bl	8009224 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009cb6:	2306      	movs	r3, #6
 8009cb8:	75bb      	strb	r3, [r7, #22]
 8009cba:	e002      	b.n	8009cc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7a5b      	ldrb	r3, [r3, #9]
 8009cc0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009cc2:	2309      	movs	r3, #9
 8009cc4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	885b      	ldrh	r3, [r3, #2]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	795b      	ldrb	r3, [r3, #5]
 8009ce4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	799b      	ldrb	r3, [r3, #6]
 8009cea:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	79db      	ldrb	r3, [r3, #7]
 8009cf0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7a1b      	ldrb	r3, [r3, #8]
 8009cf6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009cf8:	7dbb      	ldrb	r3, [r7, #22]
 8009cfa:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7a9b      	ldrb	r3, [r3, #10]
 8009d00:	753b      	strb	r3, [r7, #20]
        break;
 8009d02:	e022      	b.n	8009d4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009d04:	2301      	movs	r3, #1
 8009d06:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7b1b      	ldrb	r3, [r3, #12]
 8009d0c:	733b      	strb	r3, [r7, #12]
        break;
 8009d0e:	e01c      	b.n	8009d4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009d10:	2306      	movs	r3, #6
 8009d12:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	89db      	ldrh	r3, [r3, #14]
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	89db      	ldrh	r3, [r3, #14]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7c1a      	ldrb	r2, [r3, #16]
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d6c <SUBGRF_SetPacketParams+0x138>)
 8009d2e:	4611      	mov	r1, r2
 8009d30:	7019      	strb	r1, [r3, #0]
 8009d32:	4613      	mov	r3, r2
 8009d34:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7c5b      	ldrb	r3, [r3, #17]
 8009d3a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7c9b      	ldrb	r3, [r3, #18]
 8009d40:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7cdb      	ldrb	r3, [r3, #19]
 8009d46:	747b      	strb	r3, [r7, #17]
        break;
 8009d48:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	f107 030c 	add.w	r3, r7, #12
 8009d52:	4619      	mov	r1, r3
 8009d54:	208c      	movs	r0, #140	@ 0x8c
 8009d56:	f000 f965 	bl	800a024 <SUBGRF_WriteCommand>
 8009d5a:	e000      	b.n	8009d5e <SUBGRF_SetPacketParams+0x12a>
        return;
 8009d5c:	bf00      	nop
}
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	0800bbdc 	.word	0x0800bbdc
 8009d68:	20000315 	.word	0x20000315
 8009d6c:	20000316 	.word	0x20000316

08009d70 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	460a      	mov	r2, r1
 8009d7a:	71fb      	strb	r3, [r7, #7]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009d84:	79bb      	ldrb	r3, [r7, #6]
 8009d86:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	4619      	mov	r1, r3
 8009d90:	208f      	movs	r0, #143	@ 0x8f
 8009d92:	f000 f947 	bl	800a024 <SUBGRF_WriteCommand>
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009da8:	1d3b      	adds	r3, r7, #4
 8009daa:	2201      	movs	r2, #1
 8009dac:	4619      	mov	r1, r3
 8009dae:	2015      	movs	r0, #21
 8009db0:	f000 f95a 	bl	800a068 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009db4:	793b      	ldrb	r3, [r7, #4]
 8009db6:	425b      	negs	r3, r3
 8009db8:	105b      	asrs	r3, r3, #1
 8009dba:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009dd2:	f107 030c 	add.w	r3, r7, #12
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2013      	movs	r0, #19
 8009ddc:	f000 f944 	bl	800a068 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009de0:	f7ff fd7e 	bl	80098e0 <SUBGRF_GetPacketType>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d10d      	bne.n	8009e06 <SUBGRF_GetRxBufferStatus+0x3e>
 8009dea:	4b0c      	ldr	r3, [pc, #48]	@ (8009e1c <SUBGRF_GetRxBufferStatus+0x54>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d108      	bne.n	8009e06 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009df4:	f240 7002 	movw	r0, #1794	@ 0x702
 8009df8:	f000 f878 	bl	8009eec <SUBGRF_ReadRegister>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	e002      	b.n	8009e0c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009e06:	7b3a      	ldrb	r2, [r7, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	701a      	strb	r2, [r3, #0]
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000316 	.word	0x20000316

08009e20 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	4619      	mov	r1, r3
 8009e30:	2014      	movs	r0, #20
 8009e32:	f000 f919 	bl	800a068 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009e36:	f7ff fd53 	bl	80098e0 <SUBGRF_GetPacketType>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <SUBGRF_GetPacketStatus+0x30>
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d013      	beq.n	8009e76 <SUBGRF_GetPacketStatus+0x56>
 8009e4e:	e02a      	b.n	8009ea6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009e50:	7b3a      	ldrb	r2, [r7, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009e56:	7b7b      	ldrb	r3, [r7, #13]
 8009e58:	425b      	negs	r3, r3
 8009e5a:	105b      	asrs	r3, r3, #1
 8009e5c:	b25a      	sxtb	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	425b      	negs	r3, r3
 8009e66:	105b      	asrs	r3, r3, #1
 8009e68:	b25a      	sxtb	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	609a      	str	r2, [r3, #8]
            break;
 8009e74:	e020      	b.n	8009eb8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009e76:	7b3b      	ldrb	r3, [r7, #12]
 8009e78:	425b      	negs	r3, r3
 8009e7a:	105b      	asrs	r3, r3, #1
 8009e7c:	b25a      	sxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009e82:	7b7b      	ldrb	r3, [r7, #13]
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	3302      	adds	r3, #2
 8009e88:	109b      	asrs	r3, r3, #2
 8009e8a:	b25a      	sxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	425b      	negs	r3, r3
 8009e94:	105b      	asrs	r3, r3, #1
 8009e96:	b25a      	sxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009e9c:	4b08      	ldr	r3, [pc, #32]	@ (8009ec0 <SUBGRF_GetPacketStatus+0xa0>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	611a      	str	r2, [r3, #16]
            break;
 8009ea4:	e008      	b.n	8009eb8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009ea6:	2214      	movs	r2, #20
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fcb1 	bl	800a812 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	220f      	movs	r2, #15
 8009eb4:	701a      	strb	r2, [r3, #0]
            break;
 8009eb6:	bf00      	nop
    }
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000318 	.word	0x20000318

08009ec4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	460a      	mov	r2, r1
 8009ece:	80fb      	strh	r3, [r7, #6]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009ed4:	1d7a      	adds	r2, r7, #5
 8009ed6:	88f9      	ldrh	r1, [r7, #6]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	4803      	ldr	r0, [pc, #12]	@ (8009ee8 <SUBGRF_WriteRegister+0x24>)
 8009edc:	f7fa fb12 	bl	8004504 <HAL_SUBGHZ_WriteRegisters>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000070 	.word	0x20000070

08009eec <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009ef6:	f107 020f 	add.w	r2, r7, #15
 8009efa:	88f9      	ldrh	r1, [r7, #6]
 8009efc:	2301      	movs	r3, #1
 8009efe:	4804      	ldr	r0, [pc, #16]	@ (8009f10 <SUBGRF_ReadRegister+0x24>)
 8009f00:	f7fa fb5f 	bl	80045c2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000070 	.word	0x20000070

08009f14 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	80fb      	strh	r3, [r7, #6]
 8009f20:	4613      	mov	r3, r2
 8009f22:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f24:	f3ef 8310 	mrs	r3, PRIMASK
 8009f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f2e:	b672      	cpsid	i
}
 8009f30:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009f32:	88bb      	ldrh	r3, [r7, #4]
 8009f34:	88f9      	ldrh	r1, [r7, #6]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	4806      	ldr	r0, [pc, #24]	@ (8009f54 <SUBGRF_WriteRegisters+0x40>)
 8009f3a:	f7fa fae3 	bl	8004504 <HAL_SUBGHZ_WriteRegisters>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f383 8810 	msr	PRIMASK, r3
}
 8009f48:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f4a:	bf00      	nop
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000070 	.word	0x20000070

08009f58 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	6039      	str	r1, [r7, #0]
 8009f62:	80fb      	strh	r3, [r7, #6]
 8009f64:	4613      	mov	r3, r2
 8009f66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f68:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f72:	b672      	cpsid	i
}
 8009f74:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009f76:	88bb      	ldrh	r3, [r7, #4]
 8009f78:	88f9      	ldrh	r1, [r7, #6]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4806      	ldr	r0, [pc, #24]	@ (8009f98 <SUBGRF_ReadRegisters+0x40>)
 8009f7e:	f7fa fb20 	bl	80045c2 <HAL_SUBGHZ_ReadRegisters>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f383 8810 	msr	PRIMASK, r3
}
 8009f8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f8e:	bf00      	nop
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000070 	.word	0x20000070

08009f9c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fac:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009fb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fb6:	b672      	cpsid	i
}
 8009fb8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009fba:	79bb      	ldrb	r3, [r7, #6]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	79f9      	ldrb	r1, [r7, #7]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	4806      	ldr	r0, [pc, #24]	@ (8009fdc <SUBGRF_WriteBuffer+0x40>)
 8009fc4:	f7fa fc11 	bl	80047ea <HAL_SUBGHZ_WriteBuffer>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f383 8810 	msr	PRIMASK, r3
}
 8009fd2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009fd4:	bf00      	nop
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20000070 	.word	0x20000070

08009fe0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	71fb      	strb	r3, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ffa:	b672      	cpsid	i
}
 8009ffc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009ffe:	79bb      	ldrb	r3, [r7, #6]
 800a000:	b29b      	uxth	r3, r3
 800a002:	79f9      	ldrb	r1, [r7, #7]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4806      	ldr	r0, [pc, #24]	@ (800a020 <SUBGRF_ReadBuffer+0x40>)
 800a008:	f7fa fc42 	bl	8004890 <HAL_SUBGHZ_ReadBuffer>
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f383 8810 	msr	PRIMASK, r3
}
 800a016:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20000070 	.word	0x20000070

0800a024 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	71fb      	strb	r3, [r7, #7]
 800a030:	4613      	mov	r3, r2
 800a032:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a034:	f3ef 8310 	mrs	r3, PRIMASK
 800a038:	60fb      	str	r3, [r7, #12]
  return(result);
 800a03a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a03c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a03e:	b672      	cpsid	i
}
 800a040:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a042:	88bb      	ldrh	r3, [r7, #4]
 800a044:	79f9      	ldrb	r1, [r7, #7]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4806      	ldr	r0, [pc, #24]	@ (800a064 <SUBGRF_WriteCommand+0x40>)
 800a04a:	f7fa fb1b 	bl	8004684 <HAL_SUBGHZ_ExecSetCmd>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f383 8810 	msr	PRIMASK, r3
}
 800a058:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000070 	.word	0x20000070

0800a068 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	6039      	str	r1, [r7, #0]
 800a072:	71fb      	strb	r3, [r7, #7]
 800a074:	4613      	mov	r3, r2
 800a076:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a078:	f3ef 8310 	mrs	r3, PRIMASK
 800a07c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a082:	b672      	cpsid	i
}
 800a084:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a086:	88bb      	ldrh	r3, [r7, #4]
 800a088:	79f9      	ldrb	r1, [r7, #7]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4806      	ldr	r0, [pc, #24]	@ (800a0a8 <SUBGRF_ReadCommand+0x40>)
 800a08e:	f7fa fb58 	bl	8004742 <HAL_SUBGHZ_ExecGetCmd>
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f383 8810 	msr	PRIMASK, r3
}
 800a09c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000070 	.word	0x20000070

0800a0ac <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	460a      	mov	r2, r1
 800a0b6:	71fb      	strb	r3, [r7, #7]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a0c0:	79bb      	ldrb	r3, [r7, #6]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d10d      	bne.n	800a0e2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d104      	bne.n	800a0d6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a0d0:	2004      	movs	r0, #4
 800a0d2:	f000 f8ef 	bl	800a2b4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d107      	bne.n	800a0ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	73fb      	strb	r3, [r7, #15]
 800a0e0:	e004      	b.n	800a0ec <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a0e2:	79bb      	ldrb	r3, [r7, #6]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fa87 	bl	800a602 <RBI_ConfigRFSwitch>
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a106:	2301      	movs	r3, #1
 800a108:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a10a:	f000 fa87 	bl	800a61c <RBI_GetTxConfig>
 800a10e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d016      	beq.n	800a144 <SUBGRF_SetRfTxPower+0x48>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	dc16      	bgt.n	800a14a <SUBGRF_SetRfTxPower+0x4e>
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <SUBGRF_SetRfTxPower+0x2e>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d00a      	beq.n	800a13e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a128:	e00f      	b.n	800a14a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a12e:	2b0f      	cmp	r3, #15
 800a130:	dd02      	ble.n	800a138 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a132:	2302      	movs	r3, #2
 800a134:	73fb      	strb	r3, [r7, #15]
            break;
 800a136:	e009      	b.n	800a14c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]
            break;
 800a13c:	e006      	b.n	800a14c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a13e:	2301      	movs	r3, #1
 800a140:	73fb      	strb	r3, [r7, #15]
            break;
 800a142:	e003      	b.n	800a14c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a144:	2302      	movs	r3, #2
 800a146:	73fb      	strb	r3, [r7, #15]
            break;
 800a148:	e000      	b.n	800a14c <SUBGRF_SetRfTxPower+0x50>
            break;
 800a14a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a14c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2202      	movs	r2, #2
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff fbcd 	bl	80098f4 <SUBGRF_SetTxParams>

    return paSelect;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a168:	2301      	movs	r3, #1
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr
	...

0800a174 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a17c:	4b03      	ldr	r3, [pc, #12]	@ (800a18c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2001      	movs	r0, #1
 800a182:	4798      	blx	r3
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000320 	.word	0x20000320

0800a190 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a198:	4b03      	ldr	r3, [pc, #12]	@ (800a1a8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2002      	movs	r0, #2
 800a19e:	4798      	blx	r3
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000320 	.word	0x20000320

0800a1ac <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a1b4:	4b03      	ldr	r3, [pc, #12]	@ (800a1c4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2040      	movs	r0, #64	@ 0x40
 800a1ba:	4798      	blx	r3
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000320 	.word	0x20000320

0800a1c8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d005      	beq.n	800a1ea <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a1de:	e00a      	b.n	800a1f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2080      	movs	r0, #128	@ 0x80
 800a1e6:	4798      	blx	r3
            break;
 800a1e8:	e005      	b.n	800a1f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a1ea:	4b05      	ldr	r3, [pc, #20]	@ (800a200 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a1f2:	4798      	blx	r3
            break;
 800a1f4:	bf00      	nop
    }
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000320 	.word	0x20000320

0800a204 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a20c:	4b04      	ldr	r3, [pc, #16]	@ (800a220 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a214:	4798      	blx	r3
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000320 	.word	0x20000320

0800a224 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a22c:	4b03      	ldr	r3, [pc, #12]	@ (800a23c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2020      	movs	r0, #32
 800a232:	4798      	blx	r3
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000320 	.word	0x20000320

0800a240 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a248:	4b03      	ldr	r3, [pc, #12]	@ (800a258 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2004      	movs	r0, #4
 800a24e:	4798      	blx	r3
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20000320 	.word	0x20000320

0800a25c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a264:	4b03      	ldr	r3, [pc, #12]	@ (800a274 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2008      	movs	r0, #8
 800a26a:	4798      	blx	r3
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000320 	.word	0x20000320

0800a278 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a280:	4b03      	ldr	r3, [pc, #12]	@ (800a290 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2010      	movs	r0, #16
 800a286:	4798      	blx	r3
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000320 	.word	0x20000320

0800a294 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a29c:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a2a4:	4798      	blx	r3
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000320 	.word	0x20000320

0800a2b4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a2be:	f000 f9c3 	bl	800a648 <RBI_IsDCDC>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d112      	bne.n	800a2ee <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a2c8:	f640 1023 	movw	r0, #2339	@ 0x923
 800a2cc:	f7ff fe0e 	bl	8009eec <SUBGRF_ReadRegister>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	f023 0306 	bic.w	r3, r3, #6
 800a2da:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a2dc:	7bfa      	ldrb	r2, [r7, #15]
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f640 1023 	movw	r0, #2339	@ 0x923
 800a2ea:	f7ff fdeb 	bl	8009ec4 <SUBGRF_WriteRegister>
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a306:	231f      	movs	r3, #31
 800a308:	e017      	b.n	800a33a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
 800a30e:	e00f      	b.n	800a330 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	4a0c      	ldr	r2, [pc, #48]	@ (800a344 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a314:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d205      	bcs.n	800a32a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	4a08      	ldr	r2, [pc, #32]	@ (800a344 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	4413      	add	r3, r2
 800a326:	791b      	ldrb	r3, [r3, #4]
 800a328:	e007      	b.n	800a33a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	3301      	adds	r3, #1
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	2b15      	cmp	r3, #21
 800a334:	d9ec      	bls.n	800a310 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a336:	bf00      	nop
 800a338:	e7fd      	b.n	800a336 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr
 800a344:	0800be00 	.word	0x0800be00

0800a348 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	@ 0x28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a352:	4b35      	ldr	r3, [pc, #212]	@ (800a428 <SUBGRF_GetCFO+0xe0>)
 800a354:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a356:	f640 0007 	movw	r0, #2055	@ 0x807
 800a35a:	f7ff fdc7 	bl	8009eec <SUBGRF_ReadRegister>
 800a35e:	4603      	mov	r3, r0
 800a360:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a362:	7ffb      	ldrb	r3, [r7, #31]
 800a364:	08db      	lsrs	r3, r3, #3
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	3328      	adds	r3, #40	@ 0x28
 800a36e:	443b      	add	r3, r7
 800a370:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a374:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a376:	7ffb      	ldrb	r3, [r7, #31]
 800a378:	f003 0307 	and.w	r3, r3, #7
 800a37c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a37e:	7fba      	ldrb	r2, [r7, #30]
 800a380:	7f7b      	ldrb	r3, [r7, #29]
 800a382:	3301      	adds	r3, #1
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	4b28      	ldr	r3, [pc, #160]	@ (800a42c <SUBGRF_GetCFO+0xe4>)
 800a38c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ac:	2b07      	cmp	r3, #7
 800a3ae:	d802      	bhi.n	800a3b6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800a3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d802      	bhi.n	800a3ca <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a3ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	fb02 f303 	mul.w	r3, r2, r3
 800a3d4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a3d6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800a3da:	f7ff fd87 	bl	8009eec <SUBGRF_ReadRegister>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a3e6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a3e8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800a3ec:	f7ff fd7e 	bl	8009eec <SUBGRF_ReadRegister>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a40a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a40e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	095b      	lsrs	r3, r3, #5
 800a414:	6a3a      	ldr	r2, [r7, #32]
 800a416:	fb02 f303 	mul.w	r3, r2, r3
 800a41a:	11da      	asrs	r2, r3, #7
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	bf00      	nop
 800a422:	3728      	adds	r7, #40	@ 0x28
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0c0a0804 	.word	0x0c0a0804
 800a42c:	01e84800 	.word	0x01e84800

0800a430 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a446:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a448:	697b      	ldr	r3, [r7, #20]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc80      	pop	{r7}
 800a452:	4770      	bx	lr

0800a454 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a46a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a46c:	697b      	ldr	r3, [r7, #20]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	bc80      	pop	{r7}
 800a476:	4770      	bx	lr

0800a478 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr

0800a492 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a492:	b480      	push	{r7}
 800a494:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a496:	bf00      	nop
 800a498:	46bd      	mov	sp, r7
 800a49a:	bc80      	pop	{r7}
 800a49c:	4770      	bx	lr

0800a49e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a49e:	b480      	push	{r7}
 800a4a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a4a2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr

0800a4ac <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a4b0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr

0800a4ba <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b087      	sub	sp, #28
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a4dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4e0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a4e2:	697b      	ldr	r3, [r7, #20]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr

0800a4ee <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr

0800a4fe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a4fe:	b480      	push	{r7}
 800a500:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a502:	bf00      	nop
 800a504:	46bd      	mov	sp, r7
 800a506:	bc80      	pop	{r7}
 800a508:	4770      	bx	lr

0800a50a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a50a:	b480      	push	{r7}
 800a50c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a50e:	bf00      	nop
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	4603      	mov	r3, r0
 800a51e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr

0800a52a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a52e:	f7f6 fb9f 	bl	8000c70 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a532:	f000 f80b 	bl	800a54c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a536:	bf00      	nop
 800a538:	bd80      	pop	{r7, pc}

0800a53a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a542:	f000 fc59 	bl	800adf8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a546:	bf00      	nop
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <SubghzApp_Init+0x30>)
 800a552:	4a0b      	ldr	r2, [pc, #44]	@ (800a580 <SubghzApp_Init+0x34>)
 800a554:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a556:	4b09      	ldr	r3, [pc, #36]	@ (800a57c <SubghzApp_Init+0x30>)
 800a558:	4a0a      	ldr	r2, [pc, #40]	@ (800a584 <SubghzApp_Init+0x38>)
 800a55a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a55c:	4b07      	ldr	r3, [pc, #28]	@ (800a57c <SubghzApp_Init+0x30>)
 800a55e:	4a0a      	ldr	r2, [pc, #40]	@ (800a588 <SubghzApp_Init+0x3c>)
 800a560:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a562:	4b06      	ldr	r3, [pc, #24]	@ (800a57c <SubghzApp_Init+0x30>)
 800a564:	4a09      	ldr	r2, [pc, #36]	@ (800a58c <SubghzApp_Init+0x40>)
 800a566:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a568:	4b04      	ldr	r3, [pc, #16]	@ (800a57c <SubghzApp_Init+0x30>)
 800a56a:	4a09      	ldr	r2, [pc, #36]	@ (800a590 <SubghzApp_Init+0x44>)
 800a56c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a56e:	4b09      	ldr	r3, [pc, #36]	@ (800a594 <SubghzApp_Init+0x48>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4802      	ldr	r0, [pc, #8]	@ (800a57c <SubghzApp_Init+0x30>)
 800a574:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a576:	bf00      	nop
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000324 	.word	0x20000324
 800a580:	0800a599 	.word	0x0800a599
 800a584:	0800a5a5 	.word	0x0800a5a5
 800a588:	0800a5c9 	.word	0x0800a5c9
 800a58c:	0800a5d5 	.word	0x0800a5d5
 800a590:	0800a5e1 	.word	0x0800a5e1
 800a594:	0800bd70 	.word	0x0800bd70

0800a598 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a59c:	bf00      	nop
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bc80      	pop	{r7}
 800a5a2:	4770      	bx	lr

0800a5a4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	817b      	strh	r3, [r7, #10]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	813b      	strh	r3, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a5be:	bf00      	nop
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bc80      	pop	{r7}
 800a5c6:	4770      	bx	lr

0800a5c8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a5d8:	bf00      	nop
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <OnRxError>:

static void OnRxError(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr

0800a5ec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a5f6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a602:	b480      	push	{r7}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	4603      	mov	r3, r0
 800a60a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a610:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a612:	4618      	mov	r0, r3
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	bc80      	pop	{r7}
 800a61a:	4770      	bx	lr

0800a61c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a622:	2300      	movs	r3, #0
 800a624:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800a626:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr

0800a632 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a638:	2301      	movs	r3, #1
 800a63a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800a63c:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	bc80      	pop	{r7}
 800a646:	4770      	bx	lr

0800a648 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a64e:	2301      	movs	r3, #1
 800a650:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800a652:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr

0800a65e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	4603      	mov	r3, r0
 800a666:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800a672:	230f      	movs	r3, #15
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	e001      	b.n	800a67c <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800a678:	2316      	movs	r3, #22
 800a67a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a67c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr

0800a688 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a68c:	4b04      	ldr	r3, [pc, #16]	@ (800a6a0 <UTIL_LPM_Init+0x18>)
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a692:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <UTIL_LPM_Init+0x1c>)
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a698:	bf00      	nop
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bc80      	pop	{r7}
 800a69e:	4770      	bx	lr
 800a6a0:	20000340 	.word	0x20000340
 800a6a4:	20000344 	.word	0x20000344

0800a6a8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a6ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a6bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6be:	b672      	cpsid	i
}
 800a6c0:	bf00      	nop
  
  switch( state )
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <UTIL_LPM_SetStopMode+0x32>
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d10e      	bne.n	800a6ea <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a704 <UTIL_LPM_SetStopMode+0x5c>)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a704 <UTIL_LPM_SetStopMode+0x5c>)
 800a6d6:	6013      	str	r3, [r2, #0]
      break;
 800a6d8:	e008      	b.n	800a6ec <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	43da      	mvns	r2, r3
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <UTIL_LPM_SetStopMode+0x5c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	4a07      	ldr	r2, [pc, #28]	@ (800a704 <UTIL_LPM_SetStopMode+0x5c>)
 800a6e6:	6013      	str	r3, [r2, #0]
      break;
 800a6e8:	e000      	b.n	800a6ec <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a6ea:	bf00      	nop
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f383 8810 	msr	PRIMASK, r3
}
 800a6f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a6f8:	bf00      	nop
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	20000340 	.word	0x20000340

0800a708 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a714:	f3ef 8310 	mrs	r3, PRIMASK
 800a718:	613b      	str	r3, [r7, #16]
  return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a71c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a71e:	b672      	cpsid	i
}
 800a720:	bf00      	nop
  
  switch(state)
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <UTIL_LPM_SetOffMode+0x32>
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d10e      	bne.n	800a74a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a72c:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <UTIL_LPM_SetOffMode+0x5c>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4313      	orrs	r3, r2
 800a734:	4a0b      	ldr	r2, [pc, #44]	@ (800a764 <UTIL_LPM_SetOffMode+0x5c>)
 800a736:	6013      	str	r3, [r2, #0]
      break;
 800a738:	e008      	b.n	800a74c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	43da      	mvns	r2, r3
 800a73e:	4b09      	ldr	r3, [pc, #36]	@ (800a764 <UTIL_LPM_SetOffMode+0x5c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4013      	ands	r3, r2
 800a744:	4a07      	ldr	r2, [pc, #28]	@ (800a764 <UTIL_LPM_SetOffMode+0x5c>)
 800a746:	6013      	str	r3, [r2, #0]
      break;
 800a748:	e000      	b.n	800a74c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a74a:	bf00      	nop
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f383 8810 	msr	PRIMASK, r3
}
 800a756:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a758:	bf00      	nop
 800a75a:	371c      	adds	r7, #28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bc80      	pop	{r7}
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000344 	.word	0x20000344

0800a768 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a76e:	f3ef 8310 	mrs	r3, PRIMASK
 800a772:	60bb      	str	r3, [r7, #8]
  return(result);
 800a774:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a776:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a778:	b672      	cpsid	i
}
 800a77a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a77c:	4b12      	ldr	r3, [pc, #72]	@ (800a7c8 <UTIL_LPM_EnterLowPower+0x60>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d006      	beq.n	800a792 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a784:	4b11      	ldr	r3, [pc, #68]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a78a:	4b10      	ldr	r3, [pc, #64]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4798      	blx	r3
 800a790:	e010      	b.n	800a7b4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a792:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d0 <UTIL_LPM_EnterLowPower+0x68>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d006      	beq.n	800a7a8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a79a:	4b0c      	ldr	r3, [pc, #48]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	4798      	blx	r3
 800a7a6:	e005      	b.n	800a7b4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a7a8:	4b08      	ldr	r3, [pc, #32]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a7ae:	4b07      	ldr	r3, [pc, #28]	@ (800a7cc <UTIL_LPM_EnterLowPower+0x64>)
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	4798      	blx	r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f383 8810 	msr	PRIMASK, r3
}
 800a7be:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000340 	.word	0x20000340
 800a7cc:	0800bc40 	.word	0x0800bc40
 800a7d0:	20000344 	.word	0x20000344

0800a7d4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a7ea:	e007      	b.n	800a7fc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	1c53      	adds	r3, r2, #1
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	1c59      	adds	r1, r3, #1
 800a7f6:	6179      	str	r1, [r7, #20]
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	1e5a      	subs	r2, r3, #1
 800a800:	80fa      	strh	r2, [r7, #6]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f2      	bne.n	800a7ec <UTIL_MEM_cpy_8+0x18>
    }
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	371c      	adds	r7, #28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr

0800a812 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
 800a81e:	4613      	mov	r3, r2
 800a820:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a826:	e004      	b.n	800a832 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	60fa      	str	r2, [r7, #12]
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a832:	883b      	ldrh	r3, [r7, #0]
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	803a      	strh	r2, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f5      	bne.n	800a828 <UTIL_MEM_set_8+0x16>
  }
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	bc80      	pop	{r7}
 800a846:	4770      	bx	lr

0800a848 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800a848:	b082      	sub	sp, #8
 800a84a:	b480      	push	{r7}
 800a84c:	b087      	sub	sp, #28
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	1d38      	adds	r0, r7, #4
 800a854:	e880 0006 	stmia.w	r0, {r1, r2}
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	2300      	movs	r3, #0
 800a860:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a866:	4413      	add	r3, r2
 800a868:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a86a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a874:	b29b      	uxth	r3, r3
 800a876:	4413      	add	r3, r2
 800a878:	b29b      	uxth	r3, r3
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800a87e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a886:	db0a      	blt.n	800a89e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3301      	adds	r3, #1
 800a88c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800a88e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a892:	b29b      	uxth	r3, r3
 800a894:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b21b      	sxth	r3, r3
 800a89c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f107 0310 	add.w	r3, r7, #16
 800a8a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	b002      	add	sp, #8
 800a8b8:	4770      	bx	lr
	...

0800a8bc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08a      	sub	sp, #40	@ 0x28
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	613b      	str	r3, [r7, #16]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a8d4:	4b14      	ldr	r3, [pc, #80]	@ (800a928 <SysTimeGet+0x6c>)
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	f107 0218 	add.w	r2, r7, #24
 800a8dc:	3204      	adds	r2, #4
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4798      	blx	r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a8e6:	4b10      	ldr	r3, [pc, #64]	@ (800a928 <SysTimeGet+0x6c>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	4798      	blx	r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	b21b      	sxth	r3, r3
 800a8f0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <SysTimeGet+0x6c>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4798      	blx	r3
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800a8fc:	f107 0010 	add.w	r0, r7, #16
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	f107 0208 	add.w	r2, r7, #8
 800a90a:	ca06      	ldmia	r2, {r1, r2}
 800a90c:	f7ff ff9c 	bl	800a848 <SysTimeAdd>

  return sysTime;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	461a      	mov	r2, r3
 800a914:	f107 0310 	add.w	r3, r7, #16
 800a918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a91c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	0800bd24 	.word	0x0800bd24

0800a92c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  int i = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a938:	e00e      	b.n	800a958 <ee_skip_atoi+0x2c>
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	4618      	mov	r0, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	1c59      	adds	r1, r3, #1
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6011      	str	r1, [r2, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	4403      	add	r3, r0
 800a954:	3b30      	subs	r3, #48	@ 0x30
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a960:	d904      	bls.n	800a96c <ee_skip_atoi+0x40>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b39      	cmp	r3, #57	@ 0x39
 800a96a:	d9e6      	bls.n	800a93a <ee_skip_atoi+0xe>
  return i;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800a978:	b480      	push	{r7}
 800a97a:	b099      	sub	sp, #100	@ 0x64
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800a986:	4b71      	ldr	r3, [pc, #452]	@ (800ab4c <ee_number+0x1d4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800a98c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a98e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <ee_number+0x24>
 800a996:	4b6e      	ldr	r3, [pc, #440]	@ (800ab50 <ee_number+0x1d8>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	dd02      	ble.n	800a9a8 <ee_number+0x30>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b24      	cmp	r3, #36	@ 0x24
 800a9a6:	dd01      	ble.n	800a9ac <ee_number+0x34>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	e0ca      	b.n	800ab42 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800a9ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <ee_number+0x42>
 800a9b6:	2330      	movs	r3, #48	@ 0x30
 800a9b8:	e000      	b.n	800a9bc <ee_number+0x44>
 800a9ba:	2320      	movs	r3, #32
 800a9bc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800a9c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <ee_number+0x70>
  {
    if (num < 0)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	da08      	bge.n	800a9e8 <ee_number+0x70>
    {
      sign = '-';
 800a9d6:	232d      	movs	r3, #45	@ 0x2d
 800a9d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	425b      	negs	r3, r3
 800a9e0:	607b      	str	r3, [r7, #4]
      size--;
 800a9e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d11e      	bne.n	800aa30 <ee_number+0xb8>
    tmp[i++] = '0';
 800a9f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	657a      	str	r2, [r7, #84]	@ 0x54
 800a9f8:	3360      	adds	r3, #96	@ 0x60
 800a9fa:	443b      	add	r3, r7
 800a9fc:	2230      	movs	r2, #48	@ 0x30
 800a9fe:	f803 2c50 	strb.w	r2, [r3, #-80]
 800aa02:	e018      	b.n	800aa36 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa0c:	fb01 f202 	mul.w	r2, r1, r2
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa14:	441a      	add	r2, r3
 800aa16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa18:	1c59      	adds	r1, r3, #1
 800aa1a:	6579      	str	r1, [r7, #84]	@ 0x54
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	3360      	adds	r3, #96	@ 0x60
 800aa20:	443b      	add	r3, r7
 800aa22:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e6      	bne.n	800aa04 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800aa36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	dd01      	ble.n	800aa42 <ee_number+0xca>
 800aa3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800aa42:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800aa4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d112      	bne.n	800aa7a <ee_number+0x102>
 800aa54:	e00c      	b.n	800aa70 <ee_number+0xf8>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	60fa      	str	r2, [r7, #12]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	60bb      	str	r3, [r7, #8]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <ee_number+0xf8>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	e068      	b.n	800ab42 <ee_number+0x1ca>
 800aa70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa72:	1e5a      	subs	r2, r3, #1
 800aa74:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dced      	bgt.n	800aa56 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800aa7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d01b      	beq.n	800aaba <ee_number+0x142>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	60fa      	str	r2, [r7, #12]
 800aa88:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	60bb      	str	r3, [r7, #8]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10f      	bne.n	800aaba <ee_number+0x142>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	e051      	b.n	800ab42 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	60fa      	str	r2, [r7, #12]
 800aaa4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800aaa8:	701a      	strb	r2, [r3, #0]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	60bb      	str	r3, [r7, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <ee_number+0x142>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	e043      	b.n	800ab42 <ee_number+0x1ca>
 800aaba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dcec      	bgt.n	800aa9e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800aac4:	e00c      	b.n	800aae0 <ee_number+0x168>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	60fa      	str	r2, [r7, #12]
 800aacc:	2230      	movs	r2, #48	@ 0x30
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	60bb      	str	r3, [r7, #8]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <ee_number+0x168>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	e030      	b.n	800ab42 <ee_number+0x1ca>
 800aae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aae6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aae8:	429a      	cmp	r2, r3
 800aaea:	dbec      	blt.n	800aac6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800aaec:	e010      	b.n	800ab10 <ee_number+0x198>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	60fa      	str	r2, [r7, #12]
 800aaf4:	f107 0110 	add.w	r1, r7, #16
 800aaf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aafa:	440a      	add	r2, r1
 800aafc:	7812      	ldrb	r2, [r2, #0]
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	60bb      	str	r3, [r7, #8]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <ee_number+0x198>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	e018      	b.n	800ab42 <ee_number+0x1ca>
 800ab10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab12:	1e5a      	subs	r2, r3, #1
 800ab14:	657a      	str	r2, [r7, #84]	@ 0x54
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dce9      	bgt.n	800aaee <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800ab1a:	e00c      	b.n	800ab36 <ee_number+0x1be>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	60fa      	str	r2, [r7, #12]
 800ab22:	2220      	movs	r2, #32
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	60bb      	str	r3, [r7, #8]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <ee_number+0x1be>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	e005      	b.n	800ab42 <ee_number+0x1ca>
 800ab36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab38:	1e5a      	subs	r2, r3, #1
 800ab3a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dced      	bgt.n	800ab1c <ee_number+0x1a4>

  return str;
 800ab40:	68fb      	ldr	r3, [r7, #12]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3764      	adds	r7, #100	@ 0x64
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr
 800ab4c:	2000000c 	.word	0x2000000c
 800ab50:	20000010 	.word	0x20000010

0800ab54 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b092      	sub	sp, #72	@ 0x48
 800ab58:	af04      	add	r7, sp, #16
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dc01      	bgt.n	800ab6c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e13e      	b.n	800adea <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab70:	e128      	b.n	800adc4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800ab72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	1ad2      	subs	r2, r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	f280 812e 	bge.w	800adde <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b25      	cmp	r3, #37	@ 0x25
 800ab88:	d006      	beq.n	800ab98 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8e:	1c59      	adds	r1, r3, #1
 800ab90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ab92:	7812      	ldrb	r2, [r2, #0]
 800ab94:	701a      	strb	r2, [r3, #0]
      continue;
 800ab96:	e112      	b.n	800adbe <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b30      	cmp	r3, #48	@ 0x30
 800aba8:	d103      	bne.n	800abb2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	f043 0301 	orr.w	r3, r3, #1
 800abb0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abb6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b2f      	cmp	r3, #47	@ 0x2f
 800abbe:	d908      	bls.n	800abd2 <tiny_vsnprintf_like+0x7e>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b39      	cmp	r3, #57	@ 0x39
 800abc6:	d804      	bhi.n	800abd2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff feae 	bl	800a92c <ee_skip_atoi>
 800abd0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800abd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abd6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800abd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abdc:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800abde:	230a      	movs	r3, #10
 800abe0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	3b58      	subs	r3, #88	@ 0x58
 800abe8:	2b20      	cmp	r3, #32
 800abea:	f200 8094 	bhi.w	800ad16 <tiny_vsnprintf_like+0x1c2>
 800abee:	a201      	add	r2, pc, #4	@ (adr r2, 800abf4 <tiny_vsnprintf_like+0xa0>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800acff 	.word	0x0800acff
 800abf8:	0800ad17 	.word	0x0800ad17
 800abfc:	0800ad17 	.word	0x0800ad17
 800ac00:	0800ad17 	.word	0x0800ad17
 800ac04:	0800ad17 	.word	0x0800ad17
 800ac08:	0800ad17 	.word	0x0800ad17
 800ac0c:	0800ad17 	.word	0x0800ad17
 800ac10:	0800ad17 	.word	0x0800ad17
 800ac14:	0800ad17 	.word	0x0800ad17
 800ac18:	0800ad17 	.word	0x0800ad17
 800ac1c:	0800ad17 	.word	0x0800ad17
 800ac20:	0800ac83 	.word	0x0800ac83
 800ac24:	0800ad0d 	.word	0x0800ad0d
 800ac28:	0800ad17 	.word	0x0800ad17
 800ac2c:	0800ad17 	.word	0x0800ad17
 800ac30:	0800ad17 	.word	0x0800ad17
 800ac34:	0800ad17 	.word	0x0800ad17
 800ac38:	0800ad0d 	.word	0x0800ad0d
 800ac3c:	0800ad17 	.word	0x0800ad17
 800ac40:	0800ad17 	.word	0x0800ad17
 800ac44:	0800ad17 	.word	0x0800ad17
 800ac48:	0800ad17 	.word	0x0800ad17
 800ac4c:	0800ad17 	.word	0x0800ad17
 800ac50:	0800ad17 	.word	0x0800ad17
 800ac54:	0800ad17 	.word	0x0800ad17
 800ac58:	0800ad17 	.word	0x0800ad17
 800ac5c:	0800ad17 	.word	0x0800ad17
 800ac60:	0800aca3 	.word	0x0800aca3
 800ac64:	0800ad17 	.word	0x0800ad17
 800ac68:	0800ad63 	.word	0x0800ad63
 800ac6c:	0800ad17 	.word	0x0800ad17
 800ac70:	0800ad17 	.word	0x0800ad17
 800ac74:	0800ad07 	.word	0x0800ad07
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac7e:	2220      	movs	r2, #32
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	61fb      	str	r3, [r7, #28]
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dcf4      	bgt.n	800ac78 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	1d1a      	adds	r2, r3, #4
 800ac92:	603a      	str	r2, [r7, #0]
 800ac94:	6819      	ldr	r1, [r3, #0]
 800ac96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac9c:	b2ca      	uxtb	r2, r1
 800ac9e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800aca0:	e08d      	b.n	800adbe <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	603a      	str	r2, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800acac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <tiny_vsnprintf_like+0x162>
 800acb2:	4b50      	ldr	r3, [pc, #320]	@ (800adf4 <tiny_vsnprintf_like+0x2a0>)
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800acb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acb8:	f7f5 fa5e 	bl	8000178 <strlen>
 800acbc:	4603      	mov	r3, r0
 800acbe:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800acc0:	e004      	b.n	800accc <tiny_vsnprintf_like+0x178>
 800acc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acc8:	2220      	movs	r2, #32
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	61fa      	str	r2, [r7, #28]
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	dbf4      	blt.n	800acc2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800acd8:	2300      	movs	r3, #0
 800acda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acdc:	e00a      	b.n	800acf4 <tiny_vsnprintf_like+0x1a0>
 800acde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace0:	1c53      	adds	r3, r2, #1
 800ace2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ace4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace6:	1c59      	adds	r1, r3, #1
 800ace8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf0:	3301      	adds	r3, #1
 800acf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	dbf0      	blt.n	800acde <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800acfc:	e05f      	b.n	800adbe <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad04:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800ad06:	2310      	movs	r3, #16
 800ad08:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800ad0a:	e02b      	b.n	800ad64 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	f043 0302 	orr.w	r3, r3, #2
 800ad12:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800ad14:	e025      	b.n	800ad62 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b25      	cmp	r3, #37	@ 0x25
 800ad1c:	d004      	beq.n	800ad28 <tiny_vsnprintf_like+0x1d4>
 800ad1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad24:	2225      	movs	r2, #37	@ 0x25
 800ad26:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800ad28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	1ad2      	subs	r2, r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	429a      	cmp	r2, r3
 800ad34:	da16      	bge.n	800ad64 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d006      	beq.n	800ad4c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ad46:	7812      	ldrb	r2, [r2, #0]
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800ad52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	db2d      	blt.n	800adbc <tiny_vsnprintf_like+0x268>
 800ad60:	e000      	b.n	800ad64 <tiny_vsnprintf_like+0x210>
        break;
 800ad62:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b6c      	cmp	r3, #108	@ 0x6c
 800ad68:	d105      	bne.n	800ad76 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	1d1a      	adds	r2, r3, #4
 800ad6e:	603a      	str	r2, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad74:	e00f      	b.n	800ad96 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	603a      	str	r2, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad8a:	e004      	b.n	800ad96 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	603a      	str	r2, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	1e5a      	subs	r2, r3, #1
 800ad9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	1acb      	subs	r3, r1, r3
 800ada0:	1ad1      	subs	r1, r2, r3
 800ada2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	9302      	str	r3, [sp, #8]
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adb4:	f7ff fde0 	bl	800a978 <ee_number>
 800adb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800adba:	e000      	b.n	800adbe <tiny_vsnprintf_like+0x26a>
        continue;
 800adbc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3301      	adds	r3, #1
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f47f aed2 	bne.w	800ab72 <tiny_vsnprintf_like+0x1e>
 800adce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	3b01      	subs	r3, #1
 800add8:	429a      	cmp	r2, r3
 800adda:	f6bf aeca 	bge.w	800ab72 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800adde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800ade4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	1ad3      	subs	r3, r2, r3
}
 800adea:	4618      	mov	r0, r3
 800adec:	3738      	adds	r7, #56	@ 0x38
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0800bc38 	.word	0x0800bc38

0800adf8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b090      	sub	sp, #64	@ 0x40
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ae00:	4b73      	ldr	r3, [pc, #460]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ae06:	4b72      	ldr	r3, [pc, #456]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	4a70      	ldr	r2, [pc, #448]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800ae10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ae12:	4b70      	ldr	r3, [pc, #448]	@ (800afd4 <UTIL_SEQ_Run+0x1dc>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ae18:	4b6f      	ldr	r3, [pc, #444]	@ (800afd8 <UTIL_SEQ_Run+0x1e0>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ae1e:	4b6f      	ldr	r3, [pc, #444]	@ (800afdc <UTIL_SEQ_Run+0x1e4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800ae24:	4b6e      	ldr	r3, [pc, #440]	@ (800afe0 <UTIL_SEQ_Run+0x1e8>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ae2a:	e08d      	b.n	800af48 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ae30:	e002      	b.n	800ae38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ae32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae34:	3301      	adds	r3, #1
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ae38:	4a6a      	ldr	r2, [pc, #424]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800ae3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	401a      	ands	r2, r3
 800ae44:	4b62      	ldr	r3, [pc, #392]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4013      	ands	r3, r2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f1      	beq.n	800ae32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ae4e:	4a65      	ldr	r2, [pc, #404]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800ae50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	401a      	ands	r2, r3
 800ae5a:	4b5d      	ldr	r3, [pc, #372]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ae62:	4a60      	ldr	r2, [pc, #384]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800ae64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4413      	add	r3, r2
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ae74:	4a5b      	ldr	r2, [pc, #364]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800ae76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ae82:	4a58      	ldr	r2, [pc, #352]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800ae84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	4413      	add	r3, r2
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	4013      	ands	r3, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f8b9 	bl	800b008 <SEQ_BitPosition>
 800ae96:	4603      	mov	r3, r0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4b53      	ldr	r3, [pc, #332]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800ae9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ae9e:	4a51      	ldr	r2, [pc, #324]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800aea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	4b4f      	ldr	r3, [pc, #316]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2101      	movs	r1, #1
 800aeae:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb2:	43db      	mvns	r3, r3
 800aeb4:	401a      	ands	r2, r3
 800aeb6:	494b      	ldr	r1, [pc, #300]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	440b      	add	r3, r1
 800aebe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec0:	f3ef 8310 	mrs	r3, PRIMASK
 800aec4:	61bb      	str	r3, [r7, #24]
  return(result);
 800aec6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aec8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeca:	b672      	cpsid	i
}
 800aecc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800aece:	4b46      	ldr	r3, [pc, #280]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2201      	movs	r2, #1
 800aed4:	fa02 f303 	lsl.w	r3, r2, r3
 800aed8:	43da      	mvns	r2, r3
 800aeda:	4b3e      	ldr	r3, [pc, #248]	@ (800afd4 <UTIL_SEQ_Run+0x1dc>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4013      	ands	r3, r2
 800aee0:	4a3c      	ldr	r2, [pc, #240]	@ (800afd4 <UTIL_SEQ_Run+0x1dc>)
 800aee2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800aee4:	2301      	movs	r3, #1
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aee8:	e013      	b.n	800af12 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800aeea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeec:	3b01      	subs	r3, #1
 800aeee:	4a3d      	ldr	r2, [pc, #244]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800aef0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800aef4:	4b3c      	ldr	r3, [pc, #240]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2201      	movs	r2, #1
 800aefa:	fa02 f303 	lsl.w	r3, r2, r3
 800aefe:	43da      	mvns	r2, r3
 800af00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af02:	3b01      	subs	r3, #1
 800af04:	400a      	ands	r2, r1
 800af06:	4937      	ldr	r1, [pc, #220]	@ (800afe4 <UTIL_SEQ_Run+0x1ec>)
 800af08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800af0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af0e:	3b01      	subs	r3, #1
 800af10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e8      	bne.n	800aeea <UTIL_SEQ_Run+0xf2>
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f383 8810 	msr	PRIMASK, r3
}
 800af22:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800af24:	4b30      	ldr	r3, [pc, #192]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a30      	ldr	r2, [pc, #192]	@ (800afec <UTIL_SEQ_Run+0x1f4>)
 800af2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af2e:	4798      	blx	r3

    local_taskset = TaskSet;
 800af30:	4b28      	ldr	r3, [pc, #160]	@ (800afd4 <UTIL_SEQ_Run+0x1dc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800af36:	4b28      	ldr	r3, [pc, #160]	@ (800afd8 <UTIL_SEQ_Run+0x1e0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800af3c:	4b27      	ldr	r3, [pc, #156]	@ (800afdc <UTIL_SEQ_Run+0x1e4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800af42:	4b27      	ldr	r3, [pc, #156]	@ (800afe0 <UTIL_SEQ_Run+0x1e8>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800af48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	401a      	ands	r2, r3
 800af4e:	4b20      	ldr	r3, [pc, #128]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4013      	ands	r3, r2
 800af54:	2b00      	cmp	r3, #0
 800af56:	d005      	beq.n	800af64 <UTIL_SEQ_Run+0x16c>
 800af58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	4013      	ands	r3, r2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f43f af64 	beq.w	800ae2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800af64:	4b20      	ldr	r3, [pc, #128]	@ (800afe8 <UTIL_SEQ_Run+0x1f0>)
 800af66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af6a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800af6c:	f000 f840 	bl	800aff0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af70:	f3ef 8310 	mrs	r3, PRIMASK
 800af74:	613b      	str	r3, [r7, #16]
  return(result);
 800af76:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800af78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af7a:	b672      	cpsid	i
}
 800af7c:	bf00      	nop
  local_taskset = TaskSet;
 800af7e:	4b15      	ldr	r3, [pc, #84]	@ (800afd4 <UTIL_SEQ_Run+0x1dc>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800af84:	4b14      	ldr	r3, [pc, #80]	@ (800afd8 <UTIL_SEQ_Run+0x1e0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800af8a:	4b14      	ldr	r3, [pc, #80]	@ (800afdc <UTIL_SEQ_Run+0x1e4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800af90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	401a      	ands	r2, r3
 800af96:	4b0e      	ldr	r3, [pc, #56]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4013      	ands	r3, r2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d107      	bne.n	800afb0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800afa0:	4b0f      	ldr	r3, [pc, #60]	@ (800afe0 <UTIL_SEQ_Run+0x1e8>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa6:	4013      	ands	r3, r2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800afac:	f7f5 fe80 	bl	8000cb0 <UTIL_SEQ_Idle>
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f383 8810 	msr	PRIMASK, r3
}
 800afba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800afbc:	f000 f81e 	bl	800affc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800afc0:	4a03      	ldr	r2, [pc, #12]	@ (800afd0 <UTIL_SEQ_Run+0x1d8>)
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	6013      	str	r3, [r2, #0]

  return;
 800afc6:	bf00      	nop
}
 800afc8:	3740      	adds	r7, #64	@ 0x40
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000018 	.word	0x20000018
 800afd4:	20000348 	.word	0x20000348
 800afd8:	2000034c 	.word	0x2000034c
 800afdc:	20000014 	.word	0x20000014
 800afe0:	20000350 	.word	0x20000350
 800afe4:	2000035c 	.word	0x2000035c
 800afe8:	20000354 	.word	0x20000354
 800afec:	20000358 	.word	0x20000358

0800aff0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aff4:	bf00      	nop
}
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bc80      	pop	{r7}
 800affa:	4770      	bx	lr

0800affc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b000:	bf00      	nop
}
 800b002:	46bd      	mov	sp, r7
 800b004:	bc80      	pop	{r7}
 800b006:	4770      	bx	lr

0800b008 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b01e:	d204      	bcs.n	800b02a <SEQ_BitPosition+0x22>
 800b020:	2310      	movs	r3, #16
 800b022:	73fb      	strb	r3, [r7, #15]
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	041b      	lsls	r3, r3, #16
 800b028:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b030:	d205      	bcs.n	800b03e <SEQ_BitPosition+0x36>
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	3308      	adds	r3, #8
 800b036:	73fb      	strb	r3, [r7, #15]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b044:	d205      	bcs.n	800b052 <SEQ_BitPosition+0x4a>
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	3304      	adds	r3, #4
 800b04a:	73fb      	strb	r3, [r7, #15]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	0f1b      	lsrs	r3, r3, #28
 800b056:	4a07      	ldr	r2, [pc, #28]	@ (800b074 <SEQ_BitPosition+0x6c>)
 800b058:	5cd2      	ldrb	r2, [r2, r3]
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	4413      	add	r3, r2
 800b05e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	f1c3 031f 	rsb	r3, r3, #31
 800b066:	b2db      	uxtb	r3, r3
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	0800beb0 	.word	0x0800beb0

0800b078 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b07c:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <UTIL_TIMER_Init+0x18>)
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b082:	4b04      	ldr	r3, [pc, #16]	@ (800b094 <UTIL_TIMER_Init+0x1c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000364 	.word	0x20000364
 800b094:	0800bcf8 	.word	0x0800bcf8

0800b098 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d023      	beq.n	800b0f6 <UTIL_TIMER_Create+0x5e>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d020      	beq.n	800b0f6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b0ba:	4b11      	ldr	r3, [pc, #68]	@ (800b100 <UTIL_TIMER_Create+0x68>)
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0be:	68b8      	ldr	r0, [r7, #8]
 800b0c0:	4798      	blx	r3
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	79fa      	ldrb	r2, [r7, #7]
 800b0ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e000      	b.n	800b0f8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b0f6:	2301      	movs	r3, #1
  }
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	0800bcf8 	.word	0x0800bcf8

0800b104 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	@ 0x28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d056      	beq.n	800b1c6 <UTIL_TIMER_Start+0xc2>
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9a9 	bl	800b470 <TimerExists>
 800b11e:	4603      	mov	r3, r0
 800b120:	f083 0301 	eor.w	r3, r3, #1
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d04d      	beq.n	800b1c6 <UTIL_TIMER_Start+0xc2>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	7a5b      	ldrb	r3, [r3, #9]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d149      	bne.n	800b1c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b132:	f3ef 8310 	mrs	r3, PRIMASK
 800b136:	613b      	str	r3, [r7, #16]
  return(result);
 800b138:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b13a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b13c:	b672      	cpsid	i
}
 800b13e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b146:	4b24      	ldr	r3, [pc, #144]	@ (800b1d8 <UTIL_TIMER_Start+0xd4>)
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	4798      	blx	r3
 800b14c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b14e:	6a3a      	ldr	r2, [r7, #32]
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	429a      	cmp	r2, r3
 800b154:	d201      	bcs.n	800b15a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a3a      	ldr	r2, [r7, #32]
 800b15e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b172:	4b1a      	ldr	r3, [pc, #104]	@ (800b1dc <UTIL_TIMER_Start+0xd8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b17a:	4b17      	ldr	r3, [pc, #92]	@ (800b1d8 <UTIL_TIMER_Start+0xd4>)
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f9eb 	bl	800b55c <TimerInsertNewHeadTimer>
 800b186:	e017      	b.n	800b1b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b188:	4b13      	ldr	r3, [pc, #76]	@ (800b1d8 <UTIL_TIMER_Start+0xd4>)
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	4798      	blx	r3
 800b18e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	441a      	add	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b1dc <UTIL_TIMER_Start+0xd8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d203      	bcs.n	800b1b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9d6 	bl	800b55c <TimerInsertNewHeadTimer>
 800b1b0:	e002      	b.n	800b1b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f9a2 	bl	800b4fc <TimerInsertTimer>
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f383 8810 	msr	PRIMASK, r3
}
 800b1c2:	bf00      	nop
  {
 800b1c4:	e002      	b.n	800b1cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800b1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3728      	adds	r7, #40	@ 0x28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	0800bcf8 	.word	0x0800bcf8
 800b1dc:	20000364 	.word	0x20000364

0800b1e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d05b      	beq.n	800b2aa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1fc:	b672      	cpsid	i
}
 800b1fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b200:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b206:	4b2c      	ldr	r3, [pc, #176]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b212:	4b29      	ldr	r3, [pc, #164]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d041      	beq.n	800b29e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b220:	4b25      	ldr	r3, [pc, #148]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d134      	bne.n	800b294 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b22a:	4b23      	ldr	r3, [pc, #140]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b232:	4b21      	ldr	r3, [pc, #132]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b23c:	4b1e      	ldr	r3, [pc, #120]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	4a1d      	ldr	r2, [pc, #116]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b244:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b246:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 f92c 	bl	800b4a8 <TimerSetTimeout>
 800b250:	e023      	b.n	800b29a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b252:	4b1a      	ldr	r3, [pc, #104]	@ (800b2bc <UTIL_TIMER_Stop+0xdc>)
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	4798      	blx	r3
            TimerListHead = NULL;
 800b258:	4b17      	ldr	r3, [pc, #92]	@ (800b2b8 <UTIL_TIMER_Stop+0xd8>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e01c      	b.n	800b29a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d110      	bne.n	800b28a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d006      	beq.n	800b27e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b27c:	e00d      	b.n	800b29a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	615a      	str	r2, [r3, #20]
            break;
 800b288:	e007      	b.n	800b29a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e2      	bne.n	800b260 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	77fb      	strb	r3, [r7, #31]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f383 8810 	msr	PRIMASK, r3
}
 800b2a8:	e001      	b.n	800b2ae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b2ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000364 	.word	0x20000364
 800b2bc:	0800bcf8 	.word	0x0800bcf8

0800b2c0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
 800b2d8:	e014      	b.n	800b304 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b2da:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <UTIL_TIMER_SetPeriod+0x50>)
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	6838      	ldr	r0, [r7, #0]
 800b2e0:	4798      	blx	r3
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f8c1 	bl	800b470 <TimerExists>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff ff73 	bl	800b1e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ff02 	bl	800b104 <UTIL_TIMER_Start>
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	0800bcf8 	.word	0x0800bcf8

0800b314 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b089      	sub	sp, #36	@ 0x24
 800b318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
 800b31e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b320:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b322:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b324:	b672      	cpsid	i
}
 800b326:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b328:	4b38      	ldr	r3, [pc, #224]	@ (800b40c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	4798      	blx	r3
 800b32e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b330:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	4798      	blx	r3
 800b336:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b340:	4b33      	ldr	r3, [pc, #204]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d037      	beq.n	800b3b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b348:	4b31      	ldr	r3, [pc, #196]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	429a      	cmp	r2, r3
 800b356:	d206      	bcs.n	800b366 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	1ad2      	subs	r2, r2, r3
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	e002      	b.n	800b36c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1ea      	bne.n	800b34e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b378:	e01e      	b.n	800b3b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b37a:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b380:	4b23      	ldr	r3, [pc, #140]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	4a22      	ldr	r2, [pc, #136]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b388:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2200      	movs	r2, #0
 800b38e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2200      	movs	r2, #0
 800b394:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	6912      	ldr	r2, [r2, #16]
 800b39e:	4610      	mov	r0, r2
 800b3a0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	7adb      	ldrb	r3, [r3, #11]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d106      	bne.n	800b3b8 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	7a9b      	ldrb	r3, [r3, #10]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b3b2:	69f8      	ldr	r0, [r7, #28]
 800b3b4:	f7ff fea6 	bl	800b104 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b3b8:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00d      	beq.n	800b3dc <UTIL_TIMER_IRQ_Handler+0xc8>
 800b3c0:	4b13      	ldr	r3, [pc, #76]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0d7      	beq.n	800b37a <UTIL_TIMER_IRQ_Handler+0x66>
 800b3ca:	4b11      	ldr	r3, [pc, #68]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b40c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	4798      	blx	r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	d3ce      	bcc.n	800b37a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d009      	beq.n	800b3f8 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	7a1b      	ldrb	r3, [r3, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b3ee:	4b08      	ldr	r3, [pc, #32]	@ (800b410 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 f858 	bl	800b4a8 <TimerSetTimeout>
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f383 8810 	msr	PRIMASK, r3
}
 800b402:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b404:	bf00      	nop
 800b406:	3724      	adds	r7, #36	@ 0x24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd90      	pop	{r4, r7, pc}
 800b40c:	0800bcf8 	.word	0x0800bcf8
 800b410:	20000364 	.word	0x20000364

0800b414 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b41a:	4b06      	ldr	r3, [pc, #24]	@ (800b434 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	4798      	blx	r3
 800b420:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b422:	4b04      	ldr	r3, [pc, #16]	@ (800b434 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
 800b42a:	4603      	mov	r3, r0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	0800bcf8 	.word	0x0800bcf8

0800b438 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b440:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	4798      	blx	r3
 800b446:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b448:	4b08      	ldr	r3, [pc, #32]	@ (800b46c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	4798      	blx	r3
 800b450:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b452:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	1a8a      	subs	r2, r1, r2
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	4603      	mov	r3, r0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	0800bcf8 	.word	0x0800bcf8

0800b470 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b478:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a4 <TimerExists+0x34>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b47e:	e008      	b.n	800b492 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d101      	bne.n	800b48c <TimerExists+0x1c>
    {
      return true;
 800b488:	2301      	movs	r3, #1
 800b48a:	e006      	b.n	800b49a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1f3      	bne.n	800b480 <TimerExists+0x10>
  }
  return false;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr
 800b4a4:	20000364 	.word	0x20000364

0800b4a8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b4a8:	b590      	push	{r4, r7, lr}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b4b0:	4b11      	ldr	r3, [pc, #68]	@ (800b4f8 <TimerSetTimeout+0x50>)
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	4798      	blx	r3
 800b4b6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681c      	ldr	r4, [r3, #0]
 800b4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f8 <TimerSetTimeout+0x50>)
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	4798      	blx	r3
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	429c      	cmp	r4, r3
 800b4d0:	d207      	bcs.n	800b4e2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b4d2:	4b09      	ldr	r3, [pc, #36]	@ (800b4f8 <TimerSetTimeout+0x50>)
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	4798      	blx	r3
 800b4d8:	4602      	mov	r2, r0
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	441a      	add	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b4e2:	4b05      	ldr	r3, [pc, #20]	@ (800b4f8 <TimerSetTimeout+0x50>)
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4798      	blx	r3
}
 800b4ee:	bf00      	nop
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd90      	pop	{r4, r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	0800bcf8 	.word	0x0800bcf8

0800b4fc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b504:	4b14      	ldr	r3, [pc, #80]	@ (800b558 <TimerInsertTimer+0x5c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b50a:	4b13      	ldr	r3, [pc, #76]	@ (800b558 <TimerInsertTimer+0x5c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b512:	e012      	b.n	800b53a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d905      	bls.n	800b52c <TimerInsertTimer+0x30>
    {
        cur = next;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	60bb      	str	r3, [r7, #8]
 800b52a:	e006      	b.n	800b53a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	615a      	str	r2, [r3, #20]
        return;
 800b538:	e009      	b.n	800b54e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e8      	bne.n	800b514 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	615a      	str	r2, [r3, #20]
}
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	20000364 	.word	0x20000364

0800b55c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b564:	4b0b      	ldr	r3, [pc, #44]	@ (800b594 <TimerInsertNewHeadTimer+0x38>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b57c:	4a05      	ldr	r2, [pc, #20]	@ (800b594 <TimerInsertNewHeadTimer+0x38>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b582:	4b04      	ldr	r3, [pc, #16]	@ (800b594 <TimerInsertNewHeadTimer+0x38>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff ff8e 	bl	800b4a8 <TimerSetTimeout>
}
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000364 	.word	0x20000364

0800b598 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b59c:	2218      	movs	r2, #24
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4807      	ldr	r0, [pc, #28]	@ (800b5c0 <UTIL_ADV_TRACE_Init+0x28>)
 800b5a2:	f7ff f936 	bl	800a812 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b5a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4805      	ldr	r0, [pc, #20]	@ (800b5c4 <UTIL_ADV_TRACE_Init+0x2c>)
 800b5ae:	f7ff f930 	bl	800a812 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b5b2:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <UTIL_ADV_TRACE_Init+0x30>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4805      	ldr	r0, [pc, #20]	@ (800b5cc <UTIL_ADV_TRACE_Init+0x34>)
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20000368 	.word	0x20000368
 800b5c4:	20000380 	.word	0x20000380
 800b5c8:	0800bd38 	.word	0x0800bd38
 800b5cc:	0800b815 	.word	0x0800b815

0800b5d0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b5d0:	b408      	push	{r3}
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b08d      	sub	sp, #52	@ 0x34
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b5e6:	4b37      	ldr	r3, [pc, #220]	@ (800b6c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5e8:	7a1b      	ldrb	r3, [r3, #8]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d902      	bls.n	800b5f8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b5f2:	f06f 0304 	mvn.w	r3, #4
 800b5f6:	e05e      	b.n	800b6b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b5f8:	4b32      	ldr	r3, [pc, #200]	@ (800b6c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	4013      	ands	r3, r2
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	d002      	beq.n	800b60c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b606:	f06f 0305 	mvn.w	r3, #5
 800b60a:	e054      	b.n	800b6b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b60c:	4b2d      	ldr	r3, [pc, #180]	@ (800b6c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00a      	beq.n	800b62a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d007      	beq.n	800b62a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b61a:	4b2a      	ldr	r3, [pc, #168]	@ (800b6c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f107 0116 	add.w	r1, r7, #22
 800b622:	f107 0218 	add.w	r2, r7, #24
 800b626:	4610      	mov	r0, r2
 800b628:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b62a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b62e:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b638:	4823      	ldr	r0, [pc, #140]	@ (800b6c8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b63a:	f7ff fa8b 	bl	800ab54 <tiny_vsnprintf_like>
 800b63e:	4603      	mov	r3, r0
 800b640:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800b642:	f000 f9f1 	bl	800ba28 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b646:	8afa      	ldrh	r2, [r7, #22]
 800b648:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b64a:	4413      	add	r3, r2
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	f107 0214 	add.w	r2, r7, #20
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f000 f969 	bl	800b92c <TRACE_AllocateBufer>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b660:	d025      	beq.n	800b6ae <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b662:	2300      	movs	r3, #0
 800b664:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b666:	e00e      	b.n	800b686 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b668:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b66a:	8aba      	ldrh	r2, [r7, #20]
 800b66c:	3330      	adds	r3, #48	@ 0x30
 800b66e:	443b      	add	r3, r7
 800b670:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b674:	4b15      	ldr	r3, [pc, #84]	@ (800b6cc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b676:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b678:	8abb      	ldrh	r3, [r7, #20]
 800b67a:	3301      	adds	r3, #1
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b680:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b682:	3301      	adds	r3, #1
 800b684:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b686:	8afb      	ldrh	r3, [r7, #22]
 800b688:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d3ec      	bcc.n	800b668 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b68e:	8abb      	ldrh	r3, [r7, #20]
 800b690:	461a      	mov	r2, r3
 800b692:	4b0e      	ldr	r3, [pc, #56]	@ (800b6cc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b694:	18d0      	adds	r0, r2, r3
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b69a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b69e:	f7ff fa59 	bl	800ab54 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800b6a2:	f000 f9df 	bl	800ba64 <TRACE_UnLock>

    return TRACE_Send();
 800b6a6:	f000 f831 	bl	800b70c <TRACE_Send>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	e003      	b.n	800b6b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800b6ae:	f000 f9d9 	bl	800ba64 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800b6b2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3734      	adds	r7, #52	@ 0x34
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6c0:	b001      	add	sp, #4
 800b6c2:	4770      	bx	lr
 800b6c4:	20000368 	.word	0x20000368
 800b6c8:	20000580 	.word	0x20000580
 800b6cc:	20000380 	.word	0x20000380

0800b6d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800b6d8:	4a03      	ldr	r2, [pc, #12]	@ (800b6e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6053      	str	r3, [r2, #4]
}
 800b6de:	bf00      	nop
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bc80      	pop	{r7}
 800b6e6:	4770      	bx	lr
 800b6e8:	20000368 	.word	0x20000368

0800b6ec <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800b6f6:	4a04      	ldr	r2, [pc, #16]	@ (800b708 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	7213      	strb	r3, [r2, #8]
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	bc80      	pop	{r7}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000368 	.word	0x20000368

0800b70c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b71a:	f3ef 8310 	mrs	r3, PRIMASK
 800b71e:	613b      	str	r3, [r7, #16]
  return(result);
 800b720:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b724:	b672      	cpsid	i
}
 800b726:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800b728:	f000 f9ba 	bl	800baa0 <TRACE_IsLocked>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d15d      	bne.n	800b7ee <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800b732:	f000 f979 	bl	800ba28 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800b736:	4b34      	ldr	r3, [pc, #208]	@ (800b808 <TRACE_Send+0xfc>)
 800b738:	8a1a      	ldrh	r2, [r3, #16]
 800b73a:	4b33      	ldr	r3, [pc, #204]	@ (800b808 <TRACE_Send+0xfc>)
 800b73c:	8a5b      	ldrh	r3, [r3, #18]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d04d      	beq.n	800b7de <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b742:	4b31      	ldr	r3, [pc, #196]	@ (800b808 <TRACE_Send+0xfc>)
 800b744:	789b      	ldrb	r3, [r3, #2]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d117      	bne.n	800b77a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800b74a:	4b2f      	ldr	r3, [pc, #188]	@ (800b808 <TRACE_Send+0xfc>)
 800b74c:	881a      	ldrh	r2, [r3, #0]
 800b74e:	4b2e      	ldr	r3, [pc, #184]	@ (800b808 <TRACE_Send+0xfc>)
 800b750:	8a1b      	ldrh	r3, [r3, #16]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	b29a      	uxth	r2, r3
 800b756:	4b2c      	ldr	r3, [pc, #176]	@ (800b808 <TRACE_Send+0xfc>)
 800b758:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b75a:	4b2b      	ldr	r3, [pc, #172]	@ (800b808 <TRACE_Send+0xfc>)
 800b75c:	2202      	movs	r2, #2
 800b75e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b760:	4b29      	ldr	r3, [pc, #164]	@ (800b808 <TRACE_Send+0xfc>)
 800b762:	2200      	movs	r2, #0
 800b764:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b766:	4b28      	ldr	r3, [pc, #160]	@ (800b808 <TRACE_Send+0xfc>)
 800b768:	8a9b      	ldrh	r3, [r3, #20]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d105      	bne.n	800b77a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b76e:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <TRACE_Send+0xfc>)
 800b770:	2200      	movs	r2, #0
 800b772:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b774:	4b24      	ldr	r3, [pc, #144]	@ (800b808 <TRACE_Send+0xfc>)
 800b776:	2200      	movs	r2, #0
 800b778:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b77a:	4b23      	ldr	r3, [pc, #140]	@ (800b808 <TRACE_Send+0xfc>)
 800b77c:	789b      	ldrb	r3, [r3, #2]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d115      	bne.n	800b7ae <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b782:	4b21      	ldr	r3, [pc, #132]	@ (800b808 <TRACE_Send+0xfc>)
 800b784:	8a5a      	ldrh	r2, [r3, #18]
 800b786:	4b20      	ldr	r3, [pc, #128]	@ (800b808 <TRACE_Send+0xfc>)
 800b788:	8a1b      	ldrh	r3, [r3, #16]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d908      	bls.n	800b7a0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b78e:	4b1e      	ldr	r3, [pc, #120]	@ (800b808 <TRACE_Send+0xfc>)
 800b790:	8a5a      	ldrh	r2, [r3, #18]
 800b792:	4b1d      	ldr	r3, [pc, #116]	@ (800b808 <TRACE_Send+0xfc>)
 800b794:	8a1b      	ldrh	r3, [r3, #16]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	b29a      	uxth	r2, r3
 800b79a:	4b1b      	ldr	r3, [pc, #108]	@ (800b808 <TRACE_Send+0xfc>)
 800b79c:	829a      	strh	r2, [r3, #20]
 800b79e:	e006      	b.n	800b7ae <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b7a0:	4b19      	ldr	r3, [pc, #100]	@ (800b808 <TRACE_Send+0xfc>)
 800b7a2:	8a1b      	ldrh	r3, [r3, #16]
 800b7a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	4b17      	ldr	r3, [pc, #92]	@ (800b808 <TRACE_Send+0xfc>)
 800b7ac:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b7ae:	4b16      	ldr	r3, [pc, #88]	@ (800b808 <TRACE_Send+0xfc>)
 800b7b0:	8a1b      	ldrh	r3, [r3, #16]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4b15      	ldr	r3, [pc, #84]	@ (800b80c <TRACE_Send+0x100>)
 800b7b6:	4413      	add	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f383 8810 	msr	PRIMASK, r3
}
 800b7c4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800b7c6:	f7f5 fa99 	bl	8000cfc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b7ca:	4b11      	ldr	r3, [pc, #68]	@ (800b810 <TRACE_Send+0x104>)
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b808 <TRACE_Send+0xfc>)
 800b7d0:	8a92      	ldrh	r2, [r2, #20]
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	69b8      	ldr	r0, [r7, #24]
 800b7d6:	4798      	blx	r3
 800b7d8:	4603      	mov	r3, r0
 800b7da:	77fb      	strb	r3, [r7, #31]
 800b7dc:	e00d      	b.n	800b7fa <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800b7de:	f000 f941 	bl	800ba64 <TRACE_UnLock>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f383 8810 	msr	PRIMASK, r3
}
 800b7ec:	e005      	b.n	800b7fa <TRACE_Send+0xee>
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f383 8810 	msr	PRIMASK, r3
}
 800b7f8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800b7fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20000368 	.word	0x20000368
 800b80c:	20000380 	.word	0x20000380
 800b810:	0800bd38 	.word	0x0800bd38

0800b814 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b820:	f3ef 8310 	mrs	r3, PRIMASK
 800b824:	617b      	str	r3, [r7, #20]
  return(result);
 800b826:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b828:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b82a:	b672      	cpsid	i
}
 800b82c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800b82e:	4b3c      	ldr	r3, [pc, #240]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b830:	789b      	ldrb	r3, [r3, #2]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d106      	bne.n	800b844 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b836:	4b3a      	ldr	r3, [pc, #232]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b838:	2200      	movs	r2, #0
 800b83a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b83c:	4b38      	ldr	r3, [pc, #224]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b83e:	2200      	movs	r2, #0
 800b840:	821a      	strh	r2, [r3, #16]
 800b842:	e00a      	b.n	800b85a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b844:	4b36      	ldr	r3, [pc, #216]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b846:	8a1a      	ldrh	r2, [r3, #16]
 800b848:	4b35      	ldr	r3, [pc, #212]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b84a:	8a9b      	ldrh	r3, [r3, #20]
 800b84c:	4413      	add	r3, r2
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b854:	b29a      	uxth	r2, r3
 800b856:	4b32      	ldr	r3, [pc, #200]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b858:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800b85a:	4b31      	ldr	r3, [pc, #196]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b85c:	8a1a      	ldrh	r2, [r3, #16]
 800b85e:	4b30      	ldr	r3, [pc, #192]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b860:	8a5b      	ldrh	r3, [r3, #18]
 800b862:	429a      	cmp	r2, r3
 800b864:	d04d      	beq.n	800b902 <TRACE_TxCpltCallback+0xee>
 800b866:	4b2e      	ldr	r3, [pc, #184]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b868:	8adb      	ldrh	r3, [r3, #22]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d149      	bne.n	800b902 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b86e:	4b2c      	ldr	r3, [pc, #176]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b870:	789b      	ldrb	r3, [r3, #2]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d117      	bne.n	800b8a6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800b876:	4b2a      	ldr	r3, [pc, #168]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b878:	881a      	ldrh	r2, [r3, #0]
 800b87a:	4b29      	ldr	r3, [pc, #164]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b87c:	8a1b      	ldrh	r3, [r3, #16]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	b29a      	uxth	r2, r3
 800b882:	4b27      	ldr	r3, [pc, #156]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b884:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b886:	4b26      	ldr	r3, [pc, #152]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b888:	2202      	movs	r2, #2
 800b88a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b88c:	4b24      	ldr	r3, [pc, #144]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b88e:	2200      	movs	r2, #0
 800b890:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b892:	4b23      	ldr	r3, [pc, #140]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b894:	8a9b      	ldrh	r3, [r3, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d105      	bne.n	800b8a6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b89a:	4b21      	ldr	r3, [pc, #132]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b8a0:	4b1f      	ldr	r3, [pc, #124]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b8a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8a8:	789b      	ldrb	r3, [r3, #2]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d115      	bne.n	800b8da <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b8ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8b0:	8a5a      	ldrh	r2, [r3, #18]
 800b8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8b4:	8a1b      	ldrh	r3, [r3, #16]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d908      	bls.n	800b8cc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b8ba:	4b19      	ldr	r3, [pc, #100]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8bc:	8a5a      	ldrh	r2, [r3, #18]
 800b8be:	4b18      	ldr	r3, [pc, #96]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8c0:	8a1b      	ldrh	r3, [r3, #16]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	4b16      	ldr	r3, [pc, #88]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8c8:	829a      	strh	r2, [r3, #20]
 800b8ca:	e006      	b.n	800b8da <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b8cc:	4b14      	ldr	r3, [pc, #80]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8ce:	8a1b      	ldrh	r3, [r3, #16]
 800b8d0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	4b12      	ldr	r3, [pc, #72]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8d8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b8da:	4b11      	ldr	r3, [pc, #68]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8dc:	8a1b      	ldrh	r3, [r3, #16]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <TRACE_TxCpltCallback+0x110>)
 800b8e2:	4413      	add	r3, r2
 800b8e4:	61fb      	str	r3, [r7, #28]
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f383 8810 	msr	PRIMASK, r3
}
 800b8f0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b928 <TRACE_TxCpltCallback+0x114>)
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b920 <TRACE_TxCpltCallback+0x10c>)
 800b8f8:	8a92      	ldrh	r2, [r2, #20]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	69f8      	ldr	r0, [r7, #28]
 800b8fe:	4798      	blx	r3
 800b900:	e00a      	b.n	800b918 <TRACE_TxCpltCallback+0x104>
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f383 8810 	msr	PRIMASK, r3
}
 800b90c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800b90e:	f7f5 f9fd 	bl	8000d0c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800b912:	f000 f8a7 	bl	800ba64 <TRACE_UnLock>
  }
}
 800b916:	bf00      	nop
 800b918:	bf00      	nop
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20000368 	.word	0x20000368
 800b924:	20000380 	.word	0x20000380
 800b928:	0800bd38 	.word	0x0800bd38

0800b92c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	6039      	str	r1, [r7, #0]
 800b936:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800b938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b93c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b93e:	f3ef 8310 	mrs	r3, PRIMASK
 800b942:	60fb      	str	r3, [r7, #12]
  return(result);
 800b944:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b948:	b672      	cpsid	i
}
 800b94a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800b94c:	4b35      	ldr	r3, [pc, #212]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b94e:	8a5a      	ldrh	r2, [r3, #18]
 800b950:	4b34      	ldr	r3, [pc, #208]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b952:	8a1b      	ldrh	r3, [r3, #16]
 800b954:	429a      	cmp	r2, r3
 800b956:	d11b      	bne.n	800b990 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800b958:	4b32      	ldr	r3, [pc, #200]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b95a:	8a5b      	ldrh	r3, [r3, #18]
 800b95c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b960:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800b962:	88fa      	ldrh	r2, [r7, #6]
 800b964:	8afb      	ldrh	r3, [r7, #22]
 800b966:	429a      	cmp	r2, r3
 800b968:	d33a      	bcc.n	800b9e0 <TRACE_AllocateBufer+0xb4>
 800b96a:	4b2e      	ldr	r3, [pc, #184]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b96c:	8a1b      	ldrh	r3, [r3, #16]
 800b96e:	88fa      	ldrh	r2, [r7, #6]
 800b970:	429a      	cmp	r2, r3
 800b972:	d235      	bcs.n	800b9e0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800b974:	4b2b      	ldr	r3, [pc, #172]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b976:	2201      	movs	r2, #1
 800b978:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800b97a:	4b2a      	ldr	r3, [pc, #168]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b97c:	8a5a      	ldrh	r2, [r3, #18]
 800b97e:	4b29      	ldr	r3, [pc, #164]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b980:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800b982:	4b28      	ldr	r3, [pc, #160]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b984:	8a1b      	ldrh	r3, [r3, #16]
 800b986:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800b988:	4b26      	ldr	r3, [pc, #152]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	825a      	strh	r2, [r3, #18]
 800b98e:	e027      	b.n	800b9e0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b990:	4b24      	ldr	r3, [pc, #144]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b992:	8a5a      	ldrh	r2, [r3, #18]
 800b994:	4b23      	ldr	r3, [pc, #140]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b996:	8a1b      	ldrh	r3, [r3, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d91b      	bls.n	800b9d4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800b99c:	4b21      	ldr	r3, [pc, #132]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b99e:	8a5b      	ldrh	r3, [r3, #18]
 800b9a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b9a4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800b9a6:	88fa      	ldrh	r2, [r7, #6]
 800b9a8:	8afb      	ldrh	r3, [r7, #22]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d318      	bcc.n	800b9e0 <TRACE_AllocateBufer+0xb4>
 800b9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9b0:	8a1b      	ldrh	r3, [r3, #16]
 800b9b2:	88fa      	ldrh	r2, [r7, #6]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d213      	bcs.n	800b9e0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800b9b8:	4b1a      	ldr	r3, [pc, #104]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800b9be:	4b19      	ldr	r3, [pc, #100]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9c0:	8a5a      	ldrh	r2, [r3, #18]
 800b9c2:	4b18      	ldr	r3, [pc, #96]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9c4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800b9c6:	4b17      	ldr	r3, [pc, #92]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9c8:	8a1b      	ldrh	r3, [r3, #16]
 800b9ca:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800b9cc:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	825a      	strh	r2, [r3, #18]
 800b9d2:	e005      	b.n	800b9e0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800b9d4:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9d6:	8a1a      	ldrh	r2, [r3, #16]
 800b9d8:	4b12      	ldr	r3, [pc, #72]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9da:	8a5b      	ldrh	r3, [r3, #18]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800b9e0:	8afa      	ldrh	r2, [r7, #22]
 800b9e2:	88fb      	ldrh	r3, [r7, #6]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d90f      	bls.n	800ba08 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800b9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9ea:	8a5a      	ldrh	r2, [r3, #18]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800b9f2:	8a5a      	ldrh	r2, [r3, #18]
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	4b08      	ldr	r3, [pc, #32]	@ (800ba24 <TRACE_AllocateBufer+0xf8>)
 800ba02:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	82bb      	strh	r3, [r7, #20]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f383 8810 	msr	PRIMASK, r3
}
 800ba12:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800ba14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	371c      	adds	r7, #28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20000368 	.word	0x20000368

0800ba28 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba32:	607b      	str	r3, [r7, #4]
  return(result);
 800ba34:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba38:	b672      	cpsid	i
}
 800ba3a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800ba3c:	4b08      	ldr	r3, [pc, #32]	@ (800ba60 <TRACE_Lock+0x38>)
 800ba3e:	8adb      	ldrh	r3, [r3, #22]
 800ba40:	3301      	adds	r3, #1
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	4b06      	ldr	r3, [pc, #24]	@ (800ba60 <TRACE_Lock+0x38>)
 800ba46:	82da      	strh	r2, [r3, #22]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f383 8810 	msr	PRIMASK, r3
}
 800ba52:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20000368 	.word	0x20000368

0800ba64 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba6e:	607b      	str	r3, [r7, #4]
  return(result);
 800ba70:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba74:	b672      	cpsid	i
}
 800ba76:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800ba78:	4b08      	ldr	r3, [pc, #32]	@ (800ba9c <TRACE_UnLock+0x38>)
 800ba7a:	8adb      	ldrh	r3, [r3, #22]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	4b06      	ldr	r3, [pc, #24]	@ (800ba9c <TRACE_UnLock+0x38>)
 800ba82:	82da      	strh	r2, [r3, #22]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f383 8810 	msr	PRIMASK, r3
}
 800ba8e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ba90:	bf00      	nop
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20000368 	.word	0x20000368

0800baa0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800baa4:	4b05      	ldr	r3, [pc, #20]	@ (800babc <TRACE_IsLocked+0x1c>)
 800baa6:	8adb      	ldrh	r3, [r3, #22]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bf14      	ite	ne
 800baac:	2301      	movne	r3, #1
 800baae:	2300      	moveq	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bc80      	pop	{r7}
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	20000368 	.word	0x20000368

0800bac0 <memset>:
 800bac0:	4402      	add	r2, r0
 800bac2:	4603      	mov	r3, r0
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d100      	bne.n	800baca <memset+0xa>
 800bac8:	4770      	bx	lr
 800baca:	f803 1b01 	strb.w	r1, [r3], #1
 800bace:	e7f9      	b.n	800bac4 <memset+0x4>

0800bad0 <__libc_init_array>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4d0d      	ldr	r5, [pc, #52]	@ (800bb08 <__libc_init_array+0x38>)
 800bad4:	4c0d      	ldr	r4, [pc, #52]	@ (800bb0c <__libc_init_array+0x3c>)
 800bad6:	1b64      	subs	r4, r4, r5
 800bad8:	10a4      	asrs	r4, r4, #2
 800bada:	2600      	movs	r6, #0
 800badc:	42a6      	cmp	r6, r4
 800bade:	d109      	bne.n	800baf4 <__libc_init_array+0x24>
 800bae0:	4d0b      	ldr	r5, [pc, #44]	@ (800bb10 <__libc_init_array+0x40>)
 800bae2:	4c0c      	ldr	r4, [pc, #48]	@ (800bb14 <__libc_init_array+0x44>)
 800bae4:	f000 f818 	bl	800bb18 <_init>
 800bae8:	1b64      	subs	r4, r4, r5
 800baea:	10a4      	asrs	r4, r4, #2
 800baec:	2600      	movs	r6, #0
 800baee:	42a6      	cmp	r6, r4
 800baf0:	d105      	bne.n	800bafe <__libc_init_array+0x2e>
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf8:	4798      	blx	r3
 800bafa:	3601      	adds	r6, #1
 800bafc:	e7ee      	b.n	800badc <__libc_init_array+0xc>
 800bafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb02:	4798      	blx	r3
 800bb04:	3601      	adds	r6, #1
 800bb06:	e7f2      	b.n	800baee <__libc_init_array+0x1e>
 800bb08:	0800bec8 	.word	0x0800bec8
 800bb0c:	0800bec8 	.word	0x0800bec8
 800bb10:	0800bec8 	.word	0x0800bec8
 800bb14:	0800becc 	.word	0x0800becc

0800bb18 <_init>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	bf00      	nop
 800bb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1e:	bc08      	pop	{r3}
 800bb20:	469e      	mov	lr, r3
 800bb22:	4770      	bx	lr

0800bb24 <_fini>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr
