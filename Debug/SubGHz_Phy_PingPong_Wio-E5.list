
SubGHz_Phy_PingPong_Wio-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb20  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800cc58  0800cc58  0000dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1a4  0800d1a4  0000f01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1a4  0800d1a4  0000e1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1ac  0800d1ac  0000f01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1ac  0800d1ac  0000e1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1b0  0800d1b0  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800d1b4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  2000001c  0800d1d0  0000f01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800d1d0  0000f8f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024898  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000593f  00000000  00000000  000338de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002388  00000000  00000000  00039220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b23  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d8c  00000000  00000000  0003d0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025baa  00000000  00000000  0005de57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcc47  00000000  00000000  00083a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094b4  00000000  00000000  0014068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00149b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800cc40 	.word	0x0800cc40

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800cc40 	.word	0x0800cc40

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 f919 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f80f 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f9a7 	bl	8000860 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 f993 	bl	800083c <MX_DMA_Init>
  MX_RTC_Init();
 8000516:	f000 f867 	bl	80005e8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f943 	bl	80007a4 <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 800051e:	f00a fd74 	bl	800b00a <MX_SubGHz_Phy_Init>
  MX_TIM16_Init();
 8000522:	f000 f8c5 	bl	80006b0 <MX_TIM16_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000526:	f00a fd78 	bl	800b01a <MX_SubGHz_Phy_Process>
 800052a:	e7fc      	b.n	8000526 <main+0x24>

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b09a      	sub	sp, #104	@ 0x68
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2248      	movs	r2, #72	@ 0x48
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00c fb46 	bl	800cbcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000552:	f002 f899 	bl	8002688 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ff8e 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <SystemClock_Config+0xb8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000564:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <SystemClock_Config+0xb8>)
 8000566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <SystemClock_Config+0xb8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000578:	232c      	movs	r3, #44	@ 0x2c
 800057a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2381      	movs	r3, #129	@ 0x81
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000584:	2300      	movs	r3, #0
 8000586:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000588:	23b0      	movs	r3, #176	@ 0xb0
 800058a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fbbf 	bl	8002d20 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a8:	f000 f9b4 	bl	8000914 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005ac:	234f      	movs	r3, #79	@ 0x4f
 80005ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff2a 	bl	8003424 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f99d 	bl	8000914 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3768      	adds	r7, #104	@ 0x68
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	58000400 	.word	0x58000400

080005e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	@ 0x30
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	222c      	movs	r2, #44	@ 0x2c
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00c fae9 	bl	800cbcc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <MX_RTC_Init+0x9c>)
 80005fc:	4a22      	ldr	r2, [pc, #136]	@ (8000688 <MX_RTC_Init+0xa0>)
 80005fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000602:	221f      	movs	r2, #31
 8000604:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_RTC_Init+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000618:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_RTC_Init+0x9c>)
 800061a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000630:	f003 fbb4 	bl	8003d9c <HAL_RTC_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800063a:	f000 f96b 	bl	8000914 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <MX_RTC_Init+0x9c>)
 8000640:	f003 feaa 	bl	8004398 <HAL_RTCEx_SetSSRU_IT>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800064a:	f000 f963 	bl	8000914 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800065a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800065e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_RTC_Init+0x9c>)
 800066e:	f003 fc17 	bl	8003ea0 <HAL_RTC_SetAlarm_IT>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 f94c 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3730      	adds	r7, #48	@ 0x30
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000038 	.word	0x20000038
 8000688:	40002800 	.word	0x40002800

0800068c <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_SUBGHZ_Init+0x20>)
 8000692:	2208      	movs	r2, #8
 8000694:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_SUBGHZ_Init+0x20>)
 8000698:	f003 ffa6 	bl	80045e8 <HAL_SUBGHZ_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006a2:	f000 f937 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000070 	.word	0x20000070

080006b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2234      	movs	r2, #52	@ 0x34
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00c fa7b 	bl	800cbcc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006d6:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_TIM16_Init+0xec>)
 80006d8:	4a31      	ldr	r2, [pc, #196]	@ (80007a0 <MX_TIM16_Init+0xf0>)
 80006da:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80006dc:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <MX_TIM16_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <MX_TIM16_Init+0xec>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006e8:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <MX_TIM16_Init+0xec>)
 80006ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_TIM16_Init+0xec>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006f6:	4b29      	ldr	r3, [pc, #164]	@ (800079c <MX_TIM16_Init+0xec>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_TIM16_Init+0xec>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000702:	4826      	ldr	r0, [pc, #152]	@ (800079c <MX_TIM16_Init+0xec>)
 8000704:	f004 fb90 	bl	8004e28 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800070e:	f000 f901 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000712:	4822      	ldr	r0, [pc, #136]	@ (800079c <MX_TIM16_Init+0xec>)
 8000714:	f004 fbdf 	bl	8004ed6 <HAL_TIM_OC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800071e:	f000 f8f9 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000722:	2300      	movs	r3, #0
 8000724:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072e:	2300      	movs	r3, #0
 8000730:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	4815      	ldr	r0, [pc, #84]	@ (800079c <MX_TIM16_Init+0xec>)
 8000748:	f004 fc26 	bl	8004f98 <HAL_TIM_OC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000752:	f000 f8df 	bl	8000914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	@ (800079c <MX_TIM16_Init+0xec>)
 800077e:	f004 ff5f 	bl	8005640 <HAL_TIMEx_ConfigBreakDeadTime>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000788:	f000 f8c4 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <MX_TIM16_Init+0xec>)
 800078e:	f000 f9ef 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	@ 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	40014400 	.word	0x40014400

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_USART1_UART_Init+0x94>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007ee:	f004 ffd6 	bl	800579e <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f88c 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000800:	f007 f8f9 	bl	80079f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 f883 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000812:	f007 f92e 	bl	8007a72 <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 f87a 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000822:	f007 f8ad 	bl	8007980 <HAL_UARTEx_EnableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f872 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000c8 	.word	0x200000c8
 8000838:	40013800 	.word	0x40013800

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000840:	2004      	movs	r0, #4
 8000842:	f7ff fe2e 	bl	80004a2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe2b 	bl	80004a2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	200f      	movs	r0, #15
 8000852:	f001 f89a 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000856:	200f      	movs	r0, #15
 8000858:	f001 f8b1 	bl	80019be <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fe2c 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe29 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fe26 	bl	80004d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|PROB2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800088c:	4820      	ldr	r0, [pc, #128]	@ (8000910 <MX_GPIO_Init+0xb0>)
 800088e:	f001 fecb 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PROB1_GPIO_Port, PROB1_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2101      	movs	r1, #1
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f001 fec5 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <MX_GPIO_Init+0xb0>)
 80008b4:	f001 fc8a 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PROB1_Pin */
  GPIO_InitStruct.Pin = PROB1_Pin;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PROB1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f001 fc7c 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	480a      	ldr	r0, [pc, #40]	@ (8000910 <MX_GPIO_Init+0xb0>)
 80008e8:	f001 fc70 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PROB2_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PROB2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4803      	ldr	r0, [pc, #12]	@ (8000910 <MX_GPIO_Init+0xb0>)
 8000904:	f001 fc62 	bl	80021cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	48000400 	.word	0x48000400

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000926:	2201      	movs	r2, #1
 8000928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	58000400 	.word	0x58000400

08000938 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000954:	f000 ff12 	bl	800177c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000958:	f7ff ffe2 	bl	8000920 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800095c:	2001      	movs	r0, #1
 800095e:	f001 ff25 	bl	80027ac <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800096a:	f000 ff15 	bl	8001798 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800096e:	f000 fe3b 	bl	80015e8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}

08000976 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800097a:	f000 feff 	bl	800177c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800097e:	2101      	movs	r1, #1
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fe8f 	bl	80026a4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}

0800098a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800098e:	f000 ff03 	bl	8001798 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}

08000996 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800099a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800099e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <LL_AHB2_GRP1_EnableClock>:
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	@ 0x40
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2238      	movs	r2, #56	@ 0x38
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00c f887 	bl	800cbcc <memset>
  if(hrtc->Instance==RTC)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <HAL_RTC_MspInit+0x74>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d125      	bne.n	8000b14 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000acc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 f845 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ae4:	f7ff ff16 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ae8:	f7ff ff55 	bl	8000996 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000aec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000af0:	f7ff ff79 	bl	80009e6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2002      	movs	r0, #2
 8000afa:	f000 ff46 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f000 ff5d 	bl	80019be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	202a      	movs	r0, #42	@ 0x2a
 8000b0a:	f000 ff3e 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b0e:	202a      	movs	r0, #42	@ 0x2a
 8000b10:	f000 ff55 	bl	80019be <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3740      	adds	r7, #64	@ 0x40
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40002800 	.word	0x40002800

08000b20 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff ff9e 	bl	8000a6a <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2032      	movs	r0, #50	@ 0x32
 8000b34:	f000 ff29 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b38:	2032      	movs	r0, #50	@ 0x32
 8000b3a:	f000 ff40 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <HAL_TIM_Base_MspInit+0x24>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d103      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b5a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b5e:	f7ff ff5a 	bl	8000a16 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40014400 	.word	0x40014400

08000b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_TIM_MspPostInit+0x54>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d113      	bne.n	8000bba <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff ff0f 	bl	80009b6 <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000baa:	230e      	movs	r3, #14
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <HAL_TIM_MspPostInit+0x58>)
 8000bb6:	f001 fb09 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40014400 	.word	0x40014400
 8000bc8:	48000400 	.word	0x48000400

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b096      	sub	sp, #88	@ 0x58
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2238      	movs	r2, #56	@ 0x38
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00b ffed 	bl	800cbcc <memset>
  if(huart->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <HAL_UART_MspInit+0xe8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d156      	bne.n	8000caa <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c00:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000c04:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 ffac 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c16:	f7ff fe7d 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c1e:	f7ff fefa 	bl	8000a16 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff fec7 	bl	80009b6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8000c28:	23c0      	movs	r3, #192	@ 0xc0
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c40:	4619      	mov	r1, r3
 8000c42:	481d      	ldr	r0, [pc, #116]	@ (8000cb8 <HAL_UART_MspInit+0xec>)
 8000c44:	f001 fac2 	bl	80021cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c50:	2212      	movs	r2, #18
 8000c52:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c56:	2210      	movs	r2, #16
 8000c58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c7e:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c80:	f000 feba 	bl	80019f8 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000c8a:	f7ff fe43 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c92:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000c94:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2024      	movs	r0, #36	@ 0x24
 8000ca0:	f000 fe73 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca4:	2024      	movs	r0, #36	@ 0x24
 8000ca6:	f000 fe8a 	bl	80019be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000caa:	bf00      	nop
 8000cac:	3758      	adds	r7, #88	@ 0x58
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	2000015c 	.word	0x2000015c
 8000cc0:	40020058 	.word	0x40020058

08000cc4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <HAL_UART_MspDeInit+0x3c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10f      	bne.n	8000cf6 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000cd6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000cda:	f7ff feb4 	bl	8000a46 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8000cde:	21c0      	movs	r1, #192	@ 0xc0
 8000ce0:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <HAL_UART_MspDeInit+0x40>)
 8000ce2:	f001 fbd3 	bl	800248c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ff2c 	bl	8001b48 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000cf0:	2024      	movs	r0, #36	@ 0x24
 8000cf2:	f000 fe72 	bl	80019da <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40013800 	.word	0x40013800
 8000d04:	48000400 	.word	0x48000400

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000d66:	f003 fb53 	bl	8004410 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000038 	.word	0x20000038

08000d74 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <DMA1_Channel5_IRQHandler+0x10>)
 8000d7a:	f001 f8b7 	bl	8001eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000015c 	.word	0x2000015c

08000d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <USART1_IRQHandler+0x10>)
 8000d8e:	f004 fe23 	bl	80059d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c8 	.word	0x200000c8

08000d9c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <RTC_Alarm_IRQHandler+0x10>)
 8000da2:	f003 f9e5 	bl	8004170 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000038 	.word	0x20000038

08000db0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000db6:	f003 fe99 	bl	8004aec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000070 	.word	0x20000070

08000dc4 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ffe7 	bl	8000dc4 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000df6:	f00b f9b3 	bl	800c160 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <SystemApp_Init+0x38>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000e00:	f000 f8b6 	bl	8000f70 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000e04:	f00b fc3c 	bl	800c680 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000e08:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <SystemApp_Init+0x3c>)
 8000e0a:	f00b fcd5 	bl	800c7b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f00b fce0 	bl	800c7d4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000e14:	f00a fc5e 	bl	800b6d4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f00a fc9a 	bl	800b754 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001bc 	.word	0x200001bc
 8000e28:	08000e39 	.word	0x08000e39

08000e2c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000e30:	f00a fcc0 	bl	800b7b4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00a fd5e 	bl	800b908 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <TimestampNow+0x3c>)
 8000e56:	2110      	movs	r1, #16
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f81d 	bl	8000e98 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff f98a 	bl	8000178 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	0800cc58 	.word	0x0800cc58

08000e78 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f00a fc38 	bl	800b6f4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f00a fc30 	bl	800b6f4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000e98:	b40c      	push	{r2, r3}
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f00a fe75 	bl	800bba0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec0:	b002      	add	sp, #8
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_GetTick+0x24>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000eea:	f000 f945 	bl	8001178 <TIMER_IF_GetTimerValue>
 8000eee:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001bc 	.word	0x200001bc

08000f00 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f9bb 	bl	8001286 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <LL_AHB2_GRP1_EnableClock>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f56:	4905      	ldr	r1, [pc, #20]	@ (8000f6c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	58000800 	.word	0x58000800

08000f70 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000f76:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f7a:	f7ff ffe5 	bl	8000f48 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f7e:	f000 fc19 	bl	80017b4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f82:	f000 fc1d 	bl	80017c0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000f86:	f000 fc21 	bl	80017cc <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ffb7 	bl	8000f18 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000faa:	2002      	movs	r0, #2
 8000fac:	f7ff ffb4 	bl	8000f18 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f001 f906 	bl	80021cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <DBG_Init+0x80>)
 8000fcc:	f001 f8fe 	bl	80021cc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f001 fb26 	bl	8002628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <DBG_Init+0x80>)
 8000fe4:	f001 fb20 	bl	8002628 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
	...

08001018 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <TIMER_IF_Init+0x5c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01b      	beq.n	8001068 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <TIMER_IF_Init+0x60>)
 8001032:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001036:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001038:	f7ff fad6 	bl	80005e8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800103c:	f000 f856 	bl	80010ec <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <TIMER_IF_Init+0x60>)
 8001046:	f003 f837 	bl	80040b8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <TIMER_IF_Init+0x60>)
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001050:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001052:	4809      	ldr	r0, [pc, #36]	@ (8001078 <TIMER_IF_Init+0x60>)
 8001054:	f003 f96e 	bl	8004334 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001058:	2000      	movs	r0, #0
 800105a:	f000 f9d3 	bl	8001404 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800105e:	f000 f85f 	bl	8001120 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <TIMER_IF_Init+0x5c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001068:	79fb      	ldrb	r3, [r7, #7]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001bd 	.word	0x200001bd
 8001078:	20000038 	.word	0x20000038

0800107c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	@ 0x38
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	222c      	movs	r2, #44	@ 0x2c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00b fd9a 	bl	800cbcc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001098:	f000 f828 	bl	80010ec <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <TIMER_IF_StartTimer+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80010b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010b8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80010ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <TIMER_IF_StartTimer+0x6c>)
 80010ca:	f002 fee9 	bl	8003ea0 <HAL_RTC_SetAlarm_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80010d4:	f7ff fc1e 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80010d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3738      	adds	r7, #56	@ 0x38
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001c0 	.word	0x200001c0
 80010e8:	20000038 	.word	0x20000038

080010ec <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <TIMER_IF_StopTimer+0x2c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80010fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001100:	4806      	ldr	r0, [pc, #24]	@ (800111c <TIMER_IF_StopTimer+0x30>)
 8001102:	f002 ffd9 	bl	80040b8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <TIMER_IF_StopTimer+0x30>)
 8001108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800110c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800110e:	79fb      	ldrb	r3, [r7, #7]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40002800 	.word	0x40002800
 800111c:	20000038 	.word	0x20000038

08001120 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001124:	f000 f98e 	bl	8001444 <GetTimerTicks>
 8001128:	4603      	mov	r3, r0
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <TIMER_IF_SetTimerContext+0x18>)
 800112c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800112e:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <TIMER_IF_SetTimerContext+0x18>)
 8001130:	681b      	ldr	r3, [r3, #0]
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001c0 	.word	0x200001c0

0800113c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001140:	4b02      	ldr	r3, [pc, #8]	@ (800114c <TIMER_IF_GetTimerContext+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	200001c0 	.word	0x200001c0

08001150 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800115a:	f000 f973 	bl	8001444 <GetTimerTicks>
 800115e:	4602      	mov	r2, r0
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001c0 	.word	0x200001c0

08001178 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <TIMER_IF_GetTimerValue+0x24>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800118a:	f000 f95b 	bl	8001444 <GetTimerTicks>
 800118e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001bd 	.word	0x200001bd

080011a0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80011ba:	b5b0      	push	{r4, r5, r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80011c2:	2100      	movs	r1, #0
 80011c4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	2000      	movs	r0, #0
 80011ca:	460a      	mov	r2, r1
 80011cc:	4603      	mov	r3, r0
 80011ce:	0d95      	lsrs	r5, r2, #22
 80011d0:	0294      	lsls	r4, r2, #10
 80011d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7fe ffd3 	bl	8000188 <__aeabi_uldivmod>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4613      	mov	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bdb0      	pop	{r4, r5, r7, pc}

080011f4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80011f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011f8:	b085      	sub	sp, #20
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80011fe:	2100      	movs	r1, #0
 8001200:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2000      	movs	r0, #0
 8001206:	460c      	mov	r4, r1
 8001208:	4605      	mov	r5, r0
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f04f 0a00 	mov.w	sl, #0
 8001212:	f04f 0b00 	mov.w	fp, #0
 8001216:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800121a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800121e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001222:	4650      	mov	r0, sl
 8001224:	4659      	mov	r1, fp
 8001226:	1b02      	subs	r2, r0, r4
 8001228:	eb61 0305 	sbc.w	r3, r1, r5
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	f04f 0100 	mov.w	r1, #0
 8001234:	0099      	lsls	r1, r3, #2
 8001236:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800123a:	0090      	lsls	r0, r2, #2
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	eb12 0804 	adds.w	r8, r2, r4
 8001244:	eb43 0905 	adc.w	r9, r3, r5
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001254:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001258:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800125c:	4690      	mov	r8, r2
 800125e:	4699      	mov	r9, r3
 8001260:	4640      	mov	r0, r8
 8001262:	4649      	mov	r1, r9
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	0a82      	lsrs	r2, r0, #10
 800126e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001272:	0a8b      	lsrs	r3, r1, #10
 8001274:	4613      	mov	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001278:	68fb      	ldr	r3, [r7, #12]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001284:	4770      	bx	lr

08001286 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff93 	bl	80011ba <TIMER_IF_Convert_ms2Tick>
 8001294:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001296:	f000 f8d5 	bl	8001444 <GetTimerTicks>
 800129a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800129c:	e000      	b.n	80012a0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800129e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80012a0:	f000 f8d0 	bl	8001444 <GetTimerTicks>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f6      	bhi.n	800129e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80012c2:	f00b f89b 	bl	800c3fc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80012d6:	f000 f8a5 	bl	8001424 <TIMER_IF_BkUp_Read_MSBticks>
 80012da:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f88f 	bl	8001404 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80012ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80012fc:	f000 f8a2 	bl	8001444 <GetTimerTicks>
 8001300:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001302:	f000 f88f 	bl	8001424 <TIMER_IF_BkUp_Read_MSBticks>
 8001306:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	2200      	movs	r2, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	60fa      	str	r2, [r7, #12]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	000b      	movs	r3, r1
 800131c:	2200      	movs	r2, #0
 800131e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001320:	2000      	movs	r0, #0
 8001322:	460c      	mov	r4, r1
 8001324:	4605      	mov	r5, r0
 8001326:	eb12 0804 	adds.w	r8, r2, r4
 800132a:	eb43 0905 	adc.w	r9, r3, r5
 800132e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	0a82      	lsrs	r2, r0, #10
 8001340:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001344:	0a8b      	lsrs	r3, r1, #10
 8001346:	4613      	mov	r3, r2
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2200      	movs	r2, #0
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001358:	f04f 0b00 	mov.w	fp, #0
 800135c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff46 	bl	80011f4 <TIMER_IF_Convert_Tick2ms>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001372:	4618      	mov	r0, r3
 8001374:	3730      	adds	r7, #48	@ 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800137c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	2100      	movs	r1, #0
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800138a:	f003 f865 	bl	8004458 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000038 	.word	0x20000038

0800139c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4803      	ldr	r0, [pc, #12]	@ (80013b8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80013aa:	f003 f855 	bl	8004458 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000038 	.word	0x20000038

080013bc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80013ca:	f003 f85d 	bl	8004488 <HAL_RTCEx_BKUPRead>
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000038 	.word	0x20000038

080013e0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80013ea:	2101      	movs	r1, #1
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80013ee:	f003 f84b 	bl	8004488 <HAL_RTCEx_BKUPRead>
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000038 	.word	0x20000038

08001404 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	2102      	movs	r1, #2
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001412:	f003 f821 	bl	8004458 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000038 	.word	0x20000038

08001424 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800142a:	2102      	movs	r1, #2
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800142e:	f003 f82b 	bl	8004488 <HAL_RTCEx_BKUPRead>
 8001432:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001434:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000038 	.word	0x20000038

08001444 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800144a:	480b      	ldr	r0, [pc, #44]	@ (8001478 <GetTimerTicks+0x34>)
 800144c:	f7ff fdd8 	bl	8001000 <LL_RTC_TIME_GetSubSecond>
 8001450:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001452:	e003      	b.n	800145c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001454:	4808      	ldr	r0, [pc, #32]	@ (8001478 <GetTimerTicks+0x34>)
 8001456:	f7ff fdd3 	bl	8001000 <LL_RTC_TIME_GetSubSecond>
 800145a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800145c:	4806      	ldr	r0, [pc, #24]	@ (8001478 <GetTimerTicks+0x34>)
 800145e:	f7ff fdcf 	bl	8001000 <LL_RTC_TIME_GetSubSecond>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4293      	cmp	r3, r2
 8001468:	d1f4      	bne.n	8001454 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40002800 	.word	0x40002800

0800147c <LL_APB2_GRP1_ForceReset>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_APB2_GRP1_ReleaseReset>:
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b4:	4013      	ands	r3, r2
 80014b6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
	...

080014c4 <LL_EXTI_EnableIT_0_31>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80014d2:	4905      	ldr	r1, [pc, #20]	@ (80014e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	58000800 	.word	0x58000800

080014ec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <vcom_Init+0x28>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80014fa:	f7ff f99f 	bl	800083c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014fe:	f7ff f951 	bl	80007a4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8001502:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001506:	f7ff ffdd 	bl	80014c4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800150a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001c8 	.word	0x200001c8

08001518 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800151c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001520:	f7ff ffac 	bl	800147c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8001524:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001528:	f7ff ffb9 	bl	800149e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <vcom_DeInit+0x28>)
 800152e:	f7ff fbc9 	bl	8000cc4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001532:	200f      	movs	r0, #15
 8001534:	f000 fa51 	bl	80019da <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001538:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000c8 	.word	0x200000c8

08001544 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	461a      	mov	r2, r3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <vcom_Trace_DMA+0x24>)
 8001558:	f004 f9be 	bl	80058d8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800155c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000c8 	.word	0x200000c8

0800156c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <vcom_ReceiveInit+0x70>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800157a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800157e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001588:	4815      	ldr	r0, [pc, #84]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 800158a:	f006 f96c 	bl	8007866 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800158e:	bf00      	nop
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159e:	d0f7      	beq.n	8001590 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80015a0:	bf00      	nop
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015b0:	d1f7      	bne.n	80015a2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80015c0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80015c2:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 80015c4:	f006 f9aa 	bl	800791c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <vcom_ReceiveInit+0x78>)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <vcom_ReceiveInit+0x74>)
 80015ce:	f004 f937 	bl	8005840 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80015d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001cc 	.word	0x200001cc
 80015e0:	200000c8 	.word	0x200000c8
 80015e4:	200001c4 	.word	0x200001c4

080015e8 <vcom_Resume>:

void vcom_Resume(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <vcom_Resume+0x28>)
 80015ee:	f004 f8d6 	bl	800579e <HAL_UART_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <vcom_Resume+0x14>
  {
    Error_Handler();
 80015f8:	f7ff f98c 	bl	8000914 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015fc:	4805      	ldr	r0, [pc, #20]	@ (8001614 <vcom_Resume+0x2c>)
 80015fe:	f000 f9fb 	bl	80019f8 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <vcom_Resume+0x24>
  {
    Error_Handler();
 8001608:	f7ff f984 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000c8 	.word	0x200000c8
 8001614:	2000015c 	.word	0x2000015c

08001618 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a05      	ldr	r2, [pc, #20]	@ (800163c <HAL_UART_TxCpltCallback+0x24>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d103      	bne.n	8001632 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_UART_TxCpltCallback+0x28>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2000      	movs	r0, #0
 8001630:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013800 	.word	0x40013800
 8001640:	200001c8 	.word	0x200001c8

08001644 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_UART_RxCpltCallback+0x44>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d113      	bne.n	800167e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <HAL_UART_RxCpltCallback+0x48>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_UART_RxCpltCallback+0x30>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <HAL_UART_RxCpltCallback+0x48>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	4807      	ldr	r0, [pc, #28]	@ (8001690 <HAL_UART_RxCpltCallback+0x4c>)
 8001672:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	4906      	ldr	r1, [pc, #24]	@ (8001690 <HAL_UART_RxCpltCallback+0x4c>)
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f004 f8e1 	bl	8005840 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40013800 	.word	0x40013800
 800168c:	200001cc 	.word	0x200001cc
 8001690:	200001c4 	.word	0x200001c4

08001694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f7ff fcac 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c2:	f00b fa8b 	bl	800cbdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7fe ff1c 	bl	8000502 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80016d8:	0800d1b4 	.word	0x0800d1b4
  ldr r2, =_sbss
 80016dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016e0:	200008f0 	.word	0x200008f0

080016e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>
	...

080016e8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a03      	ldr	r2, [pc, #12]	@ (8001700 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6053      	str	r3, [r2, #4]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	e0042000 	.word	0xe0042000

08001704 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a03      	ldr	r2, [pc, #12]	@ (800171c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	6053      	str	r3, [r2, #4]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e0042000 	.word	0xe0042000

08001720 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6053      	str	r3, [r2, #4]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e0042000 	.word	0xe0042000

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f914 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800174c:	f002 f82e 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8001750:	4603      	mov	r3, r0
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_Init+0x3c>)
 8001754:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f7ff fbb4 	bl	8000ec4 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff f997 	bl	8000a9a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_SuspendTick+0x18>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a03      	ldr	r2, [pc, #12]	@ (8001794 <HAL_SuspendTick+0x18>)
 8001786:	f023 0302 	bic.w	r3, r3, #2
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <HAL_ResumeTick+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <HAL_ResumeTick+0x18>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80017b8:	f7ff ff96 	bl	80016e8 <LL_DBGMCU_EnableDBGSleepMode>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80017c4:	f7ff ff9e 	bl	8001704 <LL_DBGMCU_EnableDBGStopMode>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80017d0:	f7ff ffa6 	bl	8001720 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	@ (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4906      	ldr	r1, [pc, #24]	@ (8001870 <__NVIC_EnableIRQ+0x34>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db12      	blt.n	80018ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	490a      	ldr	r1, [pc, #40]	@ (80018b8 <__NVIC_DisableIRQ+0x44>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	3320      	adds	r3, #32
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a0:	f3bf 8f4f 	dsb	sy
}
 80018a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a6:	f3bf 8f6f 	isb	sy
}
 80018aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff2b 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff42 	bl	8001820 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ffb4 	bl	8001910 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff83 	bl	80018bc <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff35 	bl	800183c <__NVIC_EnableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff43 	bl	8001874 <__NVIC_DisableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e08e      	b.n	8001b28 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_DMA_Init+0x138>)
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d80f      	bhi.n	8001a36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b45      	ldr	r3, [pc, #276]	@ (8001b34 <HAL_DMA_Init+0x13c>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a45      	ldr	r2, [pc, #276]	@ (8001b38 <HAL_DMA_Init+0x140>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a42      	ldr	r2, [pc, #264]	@ (8001b3c <HAL_DMA_Init+0x144>)
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a34:	e00e      	b.n	8001a54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b40      	ldr	r3, [pc, #256]	@ (8001b40 <HAL_DMA_Init+0x148>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a3d      	ldr	r2, [pc, #244]	@ (8001b38 <HAL_DMA_Init+0x140>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a3c      	ldr	r2, [pc, #240]	@ (8001b44 <HAL_DMA_Init+0x14c>)
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a6e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb24 	bl	80020f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ab4:	d102      	bne.n	8001abc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ad2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_DMA_Init+0x106>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d80c      	bhi.n	8001afe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb4d 	bl	8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	e008      	b.n	8001b10 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020407 	.word	0x40020407
 8001b34:	bffdfff8 	.word	0xbffdfff8
 8001b38:	cccccccd 	.word	0xcccccccd
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	bffdfbf8 	.word	0xbffdfbf8
 8001b44:	40020400 	.word	0x40020400

08001b48 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07b      	b.n	8001c52 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <HAL_DMA_DeInit+0x114>)
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d80f      	bhi.n	8001b96 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_DMA_DeInit+0x118>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <HAL_DMA_DeInit+0x11c>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	009a      	lsls	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a35      	ldr	r2, [pc, #212]	@ (8001c68 <HAL_DMA_DeInit+0x120>)
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b94:	e00e      	b.n	8001bb4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_DMA_DeInit+0x124>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_DMA_DeInit+0x11c>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	009a      	lsls	r2, r3, #2
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <HAL_DMA_DeInit+0x128>)
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f003 021c 	and.w	r2, r3, #28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa8f 	bl	80020f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001be6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00f      	beq.n	8001c10 <HAL_DMA_DeInit+0xc8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d80b      	bhi.n	8001c10 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fac3 	bl	8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c0e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40020407 	.word	0x40020407
 8001c60:	bffdfff8 	.word	0xbffdfff8
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	bffdfbf8 	.word	0xbffdfbf8
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Start_IT+0x20>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e069      	b.n	8001d68 <HAL_DMA_Start_IT+0xf4>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d155      	bne.n	8001d54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f9d3 	bl	8002078 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 020e 	orr.w	r2, r2, #14
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00f      	b.n	8001d0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 020a 	orr.w	r2, r2, #10
 8001d0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e008      	b.n	8001d66 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e04f      	b.n	8001e22 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d008      	beq.n	8001da0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e040      	b.n	8001e22 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020e 	bic.w	r2, r2, #14
 8001dae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd4:	f003 021c 	and.w	r2, r3, #28
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d005      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e047      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020e 	bic.w	r2, r2, #14
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e84:	f003 021c 	and.w	r2, r3, #28
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ebe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
    }
  }
  return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f003 031c 	and.w	r3, r3, #28
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x7c>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f44:	f003 021c 	and.w	r2, r3, #28
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8081 	beq.w	8002060 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f66:	e07b      	b.n	8002060 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	f003 031c 	and.w	r3, r3, #28
 8001f70:	2202      	movs	r2, #2
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d03d      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x10c>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d038      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020a 	bic.w	r2, r2, #10
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <HAL_DMA_IRQHandler+0x180>)
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d909      	bls.n	8001fcc <HAL_DMA_IRQHandler+0xe0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	f003 031c 	and.w	r3, r3, #28
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002070 <HAL_DMA_IRQHandler+0x184>)
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	6053      	str	r3, [r2, #4]
 8001fca:	e008      	b.n	8001fde <HAL_DMA_IRQHandler+0xf2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	f003 031c 	and.w	r3, r3, #28
 8001fd4:	4a27      	ldr	r2, [pc, #156]	@ (8002074 <HAL_DMA_IRQHandler+0x188>)
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d038      	beq.n	8002060 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001ff6:	e033      	b.n	8002060 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f003 031c 	and.w	r3, r3, #28
 8002000:	2208      	movs	r2, #8
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02a      	beq.n	8002062 <HAL_DMA_IRQHandler+0x176>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d025      	beq.n	8002062 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 020e 	bic.w	r2, r2, #14
 8002024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f003 021c 	and.w	r2, r3, #28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002060:	bf00      	nop
 8002062:	bf00      	nop
}
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020080 	.word	0x40020080
 8002070:	40020400 	.word	0x40020400
 8002074:	40020000 	.word	0x40020000

08002078 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800208e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f003 021c 	and.w	r2, r3, #28
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002104:	429a      	cmp	r2, r3
 8002106:	d813      	bhi.n	8002130 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002114:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3b08      	subs	r3, #8
 8002124:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e011      	b.n	8002154 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800213a:	4413      	add	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b08      	subs	r3, #8
 8002148:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	3307      	adds	r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002158:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40020407 	.word	0x40020407
 8002178:	cccccccd 	.word	0xcccccccd
 800217c:	4002081c 	.word	0x4002081c
 8002180:	40020880 	.word	0x40020880

08002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002194:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2201      	movs	r2, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	1000823f 	.word	0x1000823f
 80021c8:	40020940 	.word	0x40020940

080021cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e140      	b.n	800245e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8132 	beq.w	8002458 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 808c 	beq.w	8002458 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002340:	4a4e      	ldr	r2, [pc, #312]	@ (800247c <HAL_GPIO_Init+0x2b0>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	2207      	movs	r2, #7
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1bc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a44      	ldr	r2, [pc, #272]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1b8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a43      	ldr	r2, [pc, #268]	@ (8002484 <HAL_GPIO_Init+0x2b8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1b4>
 800237c:	2302      	movs	r3, #2
 800237e:	e004      	b.n	800238a <HAL_GPIO_Init+0x1be>
 8002380:	2307      	movs	r3, #7
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x1be>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_GPIO_Init+0x1be>
 8002388:	2300      	movs	r3, #0
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	f002 0203 	and.w	r2, r2, #3
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	4093      	lsls	r3, r2
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800239a:	4938      	ldr	r1, [pc, #224]	@ (800247c <HAL_GPIO_Init+0x2b0>)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a8:	4b37      	ldr	r3, [pc, #220]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f6:	4a24      	ldr	r2, [pc, #144]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 80023fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002402:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002422:	4a19      	ldr	r2, [pc, #100]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 800242c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002430:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002450:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <HAL_GPIO_Init+0x2bc>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f aeb7 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	48000400 	.word	0x48000400
 8002484:	48000800 	.word	0x48000800
 8002488:	58000800 	.word	0x58000800

0800248c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800249a:	e0af      	b.n	80025fc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800249c:	2201      	movs	r2, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a2 	beq.w	80025f6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024b2:	4a59      	ldr	r2, [pc, #356]	@ (8002618 <HAL_GPIO_DeInit+0x18c>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	2207      	movs	r2, #7
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_DeInit+0x6c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4f      	ldr	r2, [pc, #316]	@ (800261c <HAL_GPIO_DeInit+0x190>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_DeInit+0x68>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002620 <HAL_GPIO_DeInit+0x194>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_DeInit+0x64>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_DeInit+0x6e>
 80024f0:	2307      	movs	r3, #7
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_DeInit+0x6e>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_DeInit+0x6e>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	429a      	cmp	r2, r3
 8002508:	d136      	bne.n	8002578 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800250a:	4b46      	ldr	r3, [pc, #280]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 800250c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	4943      	ldr	r1, [pc, #268]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 8002516:	4013      	ands	r3, r2
 8002518:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800251c:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 800251e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	493f      	ldr	r1, [pc, #252]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 8002528:	4013      	ands	r3, r2
 800252a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	493b      	ldr	r1, [pc, #236]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 8002538:	4013      	ands	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800253c:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	4937      	ldr	r1, [pc, #220]	@ (8002624 <HAL_GPIO_DeInit+0x198>)
 8002546:	4013      	ands	r3, r2
 8002548:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_GPIO_DeInit+0x18c>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43da      	mvns	r2, r3
 800256a:	482b      	ldr	r0, [pc, #172]	@ (8002618 <HAL_GPIO_DeInit+0x18c>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	400a      	ands	r2, r1
 8002572:	3302      	adds	r3, #2
 8002574:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2103      	movs	r1, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	08d2      	lsrs	r2, r2, #3
 80025ac:	4019      	ands	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2103      	movs	r1, #3
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2103      	movs	r1, #3
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f af49 	bne.w	800249c <HAL_GPIO_DeInit+0x10>
  }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	58000800 	.word	0x58000800

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002644:	e002      	b.n	800264c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	041a      	lsls	r2, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43d9      	mvns	r1, r3
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	400b      	ands	r3, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a03      	ldr	r2, [pc, #12]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	58000400 	.word	0x58000400

080026a4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026b6:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c2:	d10d      	bne.n	80026e0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80026c4:	f000 f83c 	bl	8002740 <HAL_PWREx_DisableLowPowerRunMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80026ce:	e015      	b.n	80026fc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80026dc:	f000 f822 	bl	8002724 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_PWR_EnterSLEEPMode+0x64>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <HAL_PWR_EnterSLEEPMode+0x64>)
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80026f2:	bf30      	wfi
 80026f4:	e002      	b.n	80026fc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80026f6:	bf40      	sev
    __WFE();
 80026f8:	bf20      	wfe
    __WFE();
 80026fa:	bf20      	wfe
  }
}
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58000400 	.word	0x58000400
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_PWREx_GetVoltageRange+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	58000400 	.word	0x58000400

08002724 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a03      	ldr	r2, [pc, #12]	@ (800273c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800272e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a15      	ldr	r2, [pc, #84]	@ (80027a0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800274c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002750:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002752:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2232      	movs	r2, #50	@ 0x32
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0c9b      	lsrs	r3, r3, #18
 8002764:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002766:	e002      	b.n	800276e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800277a:	d102      	bne.n	8002782 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f2      	bne.n	8002768 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800278e:	d101      	bne.n	8002794 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e000      	b.n	8002796 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	58000400 	.word	0x58000400
 80027a4:	20000000 	.word	0x20000000
 80027a8:	431bde83 	.word	0x431bde83

080027ac <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80027d8:	bf30      	wfi
 80027da:	e002      	b.n	80027e2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80027dc:	bf40      	sev
    __WFE();
 80027de:	bf20      	wfe
    __WFE();
 80027e0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6113      	str	r3, [r2, #16]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	58000400 	.word	0x58000400
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002804:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002810:	d101      	bne.n	8002816 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	58000400 	.word	0x58000400

08002824 <LL_RCC_HSE_EnableTcxo>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002832:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_HSE_DisableTcxo>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800286e:	d101      	bne.n	8002874 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_RCC_HSE_Enable>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_HSE_Disable>:
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_HSE_IsReady>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028c8:	d101      	bne.n	80028ce <LL_RCC_HSE_IsReady+0x18>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_RCC_HSE_IsReady+0x1a>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_HSI_Enable>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_HSI_Disable>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <LL_RCC_HSI_IsReady>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002922:	d101      	bne.n	8002928 <LL_RCC_HSI_IsReady+0x18>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <LL_RCC_HSI_IsReady+0x1a>
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_RCC_LSE_IsReady>:
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d101      	bne.n	8002972 <LL_RCC_LSE_IsReady+0x18>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_RCC_LSE_IsReady+0x1a>
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <LL_RCC_LSI_Enable>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002988:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <LL_RCC_LSI_Disable>:
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_LSI_IsReady>:
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d101      	bne.n	80029d4 <LL_RCC_LSI_IsReady+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <LL_RCC_LSI_IsReady+0x1a>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_RCC_MSI_Enable>:
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_MSI_Disable>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_MSI_IsReady>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d101      	bne.n	8002a2c <LL_RCC_MSI_IsReady+0x16>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_RCC_MSI_IsReady+0x18>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d101      	bne.n	8002a4c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_MSI_GetRange>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_SetSysClkSource>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_GetSysClkSource>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_SetAHBPrescaler>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_SetAHB3Prescaler>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b1e:	f023 020f 	bic.w	r2, r3, #15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_SetAPB1Prescaler>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_SetAPB2Prescaler>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_GetAHBPrescaler>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <LL_RCC_GetAHB3Prescaler>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_GetAPB1Prescaler>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_GetAPB2Prescaler>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	6013      	str	r3, [r2, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c2c:	d101      	bne.n	8002c32 <LL_RCC_PLL_IsReady+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_RCC_PLL_IsReady+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca8:	d101      	bne.n	8002cae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cee:	d101      	bne.n	8002cf4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e36f      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d32:	f7ff fece 	bl	8002ad2 <LL_RCC_GetSysClkSource>
 8002d36:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	f7ff ffa2 	bl	8002c80 <LL_RCC_PLL_GetMainSource>
 8002d3c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80c4 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x3e>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d176      	bne.n	8002e46 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d173      	bne.n	8002e46 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e353      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x68>
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d86:	e006      	b.n	8002d96 <HAL_RCC_OscConfig+0x76>
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d222      	bcs.n	8002de0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fd3c 	bl	800381c <RCC_SetFlashLatencyFromMSIRange>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e331      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe53 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>
 8002dde:	e021      	b.n	8002e24 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fe3a 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fd01 	bl	800381c <RCC_SetFlashLatencyFromMSIRange>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2f6      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e24:	f000 fcc2 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4aa7      	ldr	r2, [pc, #668]	@ (80030c8 <HAL_RCC_OscConfig+0x3a8>)
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e2e:	4ba7      	ldr	r3, [pc, #668]	@ (80030cc <HAL_RCC_OscConfig+0x3ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f846 	bl	8000ec4 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d047      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	e2e5      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d02c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e4e:	f7ff fdc6 	bl	80029de <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e52:	f7fe f841 	bl	8000ed8 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f83d 	bl	8000ed8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e2d2      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e6c:	f7ff fdd3 	bl	8002a16 <LL_RCC_MSI_IsReady>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f1      	beq.n	8002e5a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fdef 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>
 8002ea6:	e015      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ea8:	f7ff fda7 	bl	80029fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eac:	f7fe f814 	bl	8000ed8 <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb4:	f7fe f810 	bl	8000ed8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e2a5      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ec6:	f7ff fda6 	bl	8002a16 <LL_RCC_MSI_IsReady>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f1      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x194>
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ed2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d058      	beq.n	8002f92 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d108      	bne.n	8002efe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d14b      	bne.n	8002f92 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e289      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d102      	bne.n	8002f24 <HAL_RCC_OscConfig+0x204>
 8002f1e:	f7ff fcae 	bl	800287e <LL_RCC_HSE_Enable>
 8002f22:	e00d      	b.n	8002f40 <HAL_RCC_OscConfig+0x220>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002f2c:	d104      	bne.n	8002f38 <HAL_RCC_OscConfig+0x218>
 8002f2e:	f7ff fc79 	bl	8002824 <LL_RCC_HSE_EnableTcxo>
 8002f32:	f7ff fca4 	bl	800287e <LL_RCC_HSE_Enable>
 8002f36:	e003      	b.n	8002f40 <HAL_RCC_OscConfig+0x220>
 8002f38:	f7ff fcaf 	bl	800289a <LL_RCC_HSE_Disable>
 8002f3c:	f7ff fc80 	bl	8002840 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d012      	beq.n	8002f6e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd ffc6 	bl	8000ed8 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fd ffc2 	bl	8000ed8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e257      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f62:	f7ff fca8 	bl	80028b6 <LL_RCC_HSE_IsReady>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f1      	beq.n	8002f50 <HAL_RCC_OscConfig+0x230>
 8002f6c:	e011      	b.n	8002f92 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fd ffb3 	bl	8000ed8 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f76:	f7fd ffaf 	bl	8000ed8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	@ 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e244      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f88:	f7ff fc95 	bl	80028b6 <LL_RCC_HSE_IsReady>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f1      	bne.n	8002f76 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d046      	beq.n	800302c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x290>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e22a      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fcb6 	bl	8002932 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fc6:	e031      	b.n	800302c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d019      	beq.n	8003004 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	f7ff fc82 	bl	80028d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ff80 	bl	8000ed8 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fd ff7c 	bl	8000ed8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e211      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fee:	f7ff fc8f 	bl	8002910 <LL_RCC_HSI_IsReady>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f1      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fc98 	bl	8002932 <LL_RCC_HSI_SetCalibTrimming>
 8003002:	e013      	b.n	800302c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003004:	f7ff fc76 	bl	80028f4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff66 	bl	8000ed8 <HAL_GetTick>
 800300c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fd ff62 	bl	8000ed8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1f7      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003022:	f7ff fc75 	bl	8002910 <LL_RCC_HSI_IsReady>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f1      	bne.n	8003010 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d06e      	beq.n	8003116 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d056      	beq.n	80030ee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003048:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	429a      	cmp	r2, r3
 8003056:	d031      	beq.n	80030bc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e1d0      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800307a:	f7ff fc8f 	bl	800299c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800307e:	f7fd ff2b 	bl	8000ed8 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7fd ff27 	bl	8000ed8 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b11      	cmp	r3, #17
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1bc      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003098:	f7ff fc90 	bl	80029bc <LL_RCC_LSI_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f1      	bne.n	8003086 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030aa:	f023 0210 	bic.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030bc:	f7ff fc5e 	bl	800297c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fd ff0a 	bl	8000ed8 <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030c6:	e00c      	b.n	80030e2 <HAL_RCC_OscConfig+0x3c2>
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fd ff02 	bl	8000ed8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e197      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030e2:	f7ff fc6b 	bl	80029bc <LL_RCC_LSI_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3b0>
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	f7ff fc55 	bl	800299c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fef1 	bl	8000ed8 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fd feed 	bl	8000ed8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b11      	cmp	r3, #17
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e182      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800310c:	f7ff fc56 	bl	80029bc <LL_RCC_LSI_IsReady>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f1      	bne.n	80030fa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80d8 	beq.w	80032d4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003124:	f7ff fb6c 	bl	8002800 <LL_PWR_IsEnabledBkUpAccess>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800312e:	f7ff faab 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fd fed1 	bl	8000ed8 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fd fecd 	bl	8000ed8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e162      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800314c:	f7ff fb58 	bl	8002800 <LL_PWR_IsEnabledBkUpAccess>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f1      	beq.n	800313a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d07b      	beq.n	8003256 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b85      	cmp	r3, #133	@ 0x85
 8003164:	d003      	beq.n	800316e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d109      	bne.n	8003182 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fd fea9 	bl	8000ed8 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fd fe9b 	bl	8000ed8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e12e      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031b4:	f7ff fbd1 	bl	800295a <LL_RCC_LSE_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ef      	beq.n	800319e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b81      	cmp	r3, #129	@ 0x81
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b85      	cmp	r3, #133	@ 0x85
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fd fe83 	bl	8000ed8 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fe75 	bl	8000ed8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e108      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ec      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003210:	e060      	b.n	80032d4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd fe61 	bl	8000ed8 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fd fe53 	bl	8000ed8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0e6      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ec      	bne.n	800322e <HAL_RCC_OscConfig+0x50e>
 8003254:	e03e      	b.n	80032d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fd fe3f 	bl	8000ed8 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fd fe31 	bl	8000ed8 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0c4      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ec      	bne.n	8003272 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fd fe1e 	bl	8000ed8 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fd fe10 	bl	8000ed8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0a3      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ca:	f7ff fb46 	bl	800295a <LL_RCC_LSE_IsReady>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ef      	bne.n	80032b4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8099 	beq.w	8003410 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d06c      	beq.n	80033be <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d14b      	bne.n	8003384 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	f7ff fc87 	bl	8002bfe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd fdf2 	bl	8000ed8 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fdee 	bl	8000ed8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e083      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800330a:	f7ff fc86 	bl	8002c1a <LL_RCC_PLL_IsReady>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f1      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b40      	ldr	r3, [pc, #256]	@ (800341c <HAL_RCC_OscConfig+0x6fc>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800332c:	0212      	lsls	r2, r2, #8
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003340:	430a      	orrs	r2, r1
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334a:	f7ff fc4a 	bl	8002be2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fdbb 	bl	8000ed8 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fdb7 	bl	8000ed8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e04c      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003378:	f7ff fc4f 	bl	8002c1a <LL_RCC_PLL_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0x646>
 8003382:	e045      	b.n	8003410 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	f7ff fc3b 	bl	8002bfe <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fda6 	bl	8000ed8 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fd fda2 	bl	8000ed8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b0a      	cmp	r3, #10
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e037      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033a2:	f7ff fc3a 	bl	8002c1a <LL_RCC_PLL_IsReady>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f1      	bne.n	8003390 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_RCC_OscConfig+0x700>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
 80033bc:	e028      	b.n	8003410 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e023      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	429a      	cmp	r2, r3
 80033de:	d115      	bne.n	800340c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10e      	bne.n	800340c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	11c1808c 	.word	0x11c1808c
 8003420:	eefefffc 	.word	0xeefefffc

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e10f      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b89      	ldr	r3, [pc, #548]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d91b      	bls.n	800347e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b86      	ldr	r3, [pc, #536]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4984      	ldr	r1, [pc, #528]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003456:	f7fd fd3f 	bl	8000ed8 <HAL_GetTick>
 800345a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345c:	e008      	b.n	8003470 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800345e:	f7fd fd3b 	bl	8000ed8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0f3      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	4b7b      	ldr	r3, [pc, #492]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d1ef      	bne.n	800345e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fb2a 	bl	8002ae8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003494:	f7fd fd20 	bl	8000ed8 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800349c:	f7fd fd1c 	bl	8000ed8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0d4      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ae:	f7ff fbf2 	bl	8002c96 <LL_RCC_IsActiveFlag_HPRE>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f1      	beq.n	800349c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fb20 	bl	8002b0e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fd03 	bl	8000ed8 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034d6:	f7fd fcff 	bl	8000ed8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0b7      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034e8:	f7ff fbe6 	bl	8002cb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f1      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fb19 	bl	8002b3a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003508:	f7fd fce6 	bl	8000ed8 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003510:	f7fd fce2 	bl	8000ed8 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e09a      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003522:	f7ff fbdb 	bl	8002cdc <LL_RCC_IsActiveFlag_PPRE1>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f1      	beq.n	8003510 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fb0e 	bl	8002b60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003544:	f7fd fcc8 	bl	8000ed8 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800354c:	f7fd fcc4 	bl	8000ed8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e07c      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800355e:	f7ff fbce 	bl	8002cfe <LL_RCC_IsActiveFlag_PPRE2>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f1      	beq.n	800354c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d043      	beq.n	80035fc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d106      	bne.n	800358a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800357c:	f7ff f99b 	bl	80028b6 <LL_RCC_HSE_IsReady>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11e      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e066      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003592:	f7ff fb42 	bl	8002c1a <LL_RCC_PLL_IsReady>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e05b      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035a8:	f7ff fa35 	bl	8002a16 <LL_RCC_MSI_IsReady>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e050      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035b6:	f7ff f9ab 	bl	8002910 <LL_RCC_HSI_IsReady>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e049      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa6f 	bl	8002aac <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ce:	f7fd fc83 	bl	8000ed8 <HAL_GetTick>
 80035d2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d6:	f7fd fc7f 	bl	8000ed8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e035      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ec:	f7ff fa71 	bl	8002ad2 <LL_RCC_GetSysClkSource>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1ec      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b18      	ldr	r3, [pc, #96]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d21b      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	4913      	ldr	r1, [pc, #76]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361a:	f7fd fc5d 	bl	8000ed8 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	e008      	b.n	8003634 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003622:	f7fd fc59 	bl	8000ed8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e011      	b.n	8003658 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003634:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <HAL_RCC_ClockConfig+0x23c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003642:	f000 f8b3 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8003646:	4603      	mov	r3, r0
 8003648:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 800364a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fc37 	bl	8000ec4 <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58004000 	.word	0x58004000
 8003664:	20000000 	.word	0x20000000
 8003668:	20000004 	.word	0x20000004

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	f7ff fa2a 	bl	8002ad2 <LL_RCC_GetSysClkSource>
 800367e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	f7ff fafe 	bl	8002c80 <LL_RCC_PLL_GetMainSource>
 8003684:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x2c>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d139      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d136      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003698:	f7ff f9cd 	bl	8002a36 <LL_RCC_MSI_IsEnabledRangeSelect>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d115      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x62>
 80036a2:	f7ff f9c8 	bl	8002a36 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_GetSysClockFreq+0x4e>
 80036ac:	f7ff f9d3 	bl	8002a56 <LL_RCC_MSI_GetRange>
 80036b0:	4603      	mov	r3, r0
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	e005      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80036ba:	f7ff f9d7 	bl	8002a6c <LL_RCC_MSI_GetRangeAfterStandby>
 80036be:	4603      	mov	r3, r0
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	e014      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x8c>
 80036ce:	f7ff f9b2 	bl	8002a36 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x7a>
 80036d8:	f7ff f9bd 	bl	8002a56 <LL_RCC_MSI_GetRange>
 80036dc:	4603      	mov	r3, r0
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	e005      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x86>
 80036e6:	f7ff f9c1 	bl	8002a6c <LL_RCC_MSI_GetRangeAfterStandby>
 80036ea:	4603      	mov	r3, r0
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d115      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003704:	e012      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d102      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800370c:	4b25      	ldr	r3, [pc, #148]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e00c      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d109      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003718:	f7ff f8a0 	bl	800285c <LL_RCC_HSE_IsEnabledDiv2>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003722:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e001      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003728:	4b1f      	ldr	r3, [pc, #124]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800372a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	f7ff f9d1 	bl	8002ad2 <LL_RCC_GetSysClkSource>
 8003730:	4603      	mov	r3, r0
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d12f      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003736:	f7ff faa3 	bl	8002c80 <LL_RCC_PLL_GetMainSource>
 800373a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0xde>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0xe4>
 8003748:	e00d      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800374a:	4b16      	ldr	r3, [pc, #88]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800374c:	60fb      	str	r3, [r7, #12]
        break;
 800374e:	e00d      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003750:	f7ff f884 	bl	800285c <LL_RCC_HSE_IsEnabledDiv2>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800375a:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800375c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003762:	60fb      	str	r3, [r7, #12]
        break;
 8003764:	e002      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	60fb      	str	r3, [r7, #12]
        break;
 800376a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800376c:	f7ff fa66 	bl	8002c3c <LL_RCC_PLL_GetN>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	fb03 f402 	mul.w	r4, r3, r2
 8003778:	f7ff fa77 	bl	8002c6a <LL_RCC_PLL_GetDivider>
 800377c:	4603      	mov	r3, r0
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	3301      	adds	r3, #1
 8003782:	fbb4 f4f3 	udiv	r4, r4, r3
 8003786:	f7ff fa65 	bl	8002c54 <LL_RCC_PLL_GetR>
 800378a:	4603      	mov	r3, r0
 800378c:	0f5b      	lsrs	r3, r3, #29
 800378e:	3301      	adds	r3, #1
 8003790:	fbb4 f3f3 	udiv	r3, r4, r3
 8003794:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	0800cf9c 	.word	0x0800cf9c
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	01e84800 	.word	0x01e84800

080037ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b598      	push	{r3, r4, r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037b0:	f7ff ff5c 	bl	800366c <HAL_RCC_GetSysClockFreq>
 80037b4:	4604      	mov	r4, r0
 80037b6:	f7ff f9e6 	bl	8002b86 <LL_RCC_GetAHBPrescaler>
 80037ba:	4603      	mov	r3, r0
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a03      	ldr	r2, [pc, #12]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80037c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd98      	pop	{r3, r4, r7, pc}
 80037d0:	0800cf3c 	.word	0x0800cf3c

080037d4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b598      	push	{r3, r4, r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037d8:	f7ff ffe8 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037dc:	4604      	mov	r4, r0
 80037de:	f7ff f9ea 	bl	8002bb6 <LL_RCC_GetAPB1Prescaler>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	4a03      	ldr	r2, [pc, #12]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd98      	pop	{r3, r4, r7, pc}
 80037f4:	0800cf7c 	.word	0x0800cf7c

080037f8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b598      	push	{r3, r4, r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037fc:	f7ff ffd6 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8003800:	4604      	mov	r4, r0
 8003802:	f7ff f9e3 	bl	8002bcc <LL_RCC_GetAPB2Prescaler>
 8003806:	4603      	mov	r3, r0
 8003808:	0adb      	lsrs	r3, r3, #11
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 800380c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003810:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd98      	pop	{r3, r4, r7, pc}
 8003818:	0800cf7c 	.word	0x0800cf7c

0800381c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003834:	f7ff f9b2 	bl	8002b9c <LL_RCC_GetAHB3Prescaler>
 8003838:	4603      	mov	r3, r0
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0c9c      	lsrs	r4, r3, #18
 8003858:	f7fe ff58 	bl	800270c <HAL_PWREx_GetVoltageRange>
 800385c:	4603      	mov	r3, r0
 800385e:	4619      	mov	r1, r3
 8003860:	4620      	mov	r0, r4
 8003862:	f000 f80b 	bl	800387c <RCC_SetFlashLatency>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	0800cf9c 	.word	0x0800cf9c
 8003874:	0800cf3c 	.word	0x0800cf3c
 8003878:	431bde83 	.word	0x431bde83

0800387c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	@ 0x38
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003886:	4a3a      	ldr	r2, [pc, #232]	@ (8003970 <RCC_SetFlashLatency+0xf4>)
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003890:	6018      	str	r0, [r3, #0]
 8003892:	3304      	adds	r3, #4
 8003894:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003896:	4a37      	ldr	r2, [pc, #220]	@ (8003974 <RCC_SetFlashLatency+0xf8>)
 8003898:	f107 0318 	add.w	r3, r7, #24
 800389c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a0:	6018      	str	r0, [r3, #0]
 80038a2:	3304      	adds	r3, #4
 80038a4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038a6:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <RCC_SetFlashLatency+0xfc>)
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038b2:	2300      	movs	r3, #0
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038bc:	d11b      	bne.n	80038f6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c2:	e014      	b.n	80038ee <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	3338      	adds	r3, #56	@ 0x38
 80038ca:	443b      	add	r3, r7
 80038cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3338      	adds	r3, #56	@ 0x38
 80038de:	443b      	add	r3, r7
 80038e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80038e6:	e021      	b.n	800392c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	3301      	adds	r3, #1
 80038ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d9e7      	bls.n	80038c4 <RCC_SetFlashLatency+0x48>
 80038f4:	e01a      	b.n	800392c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038fa:	e014      	b.n	8003926 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	3338      	adds	r3, #56	@ 0x38
 8003902:	443b      	add	r3, r7
 8003904:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4293      	cmp	r3, r2
 800390e:	d807      	bhi.n	8003920 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	3338      	adds	r3, #56	@ 0x38
 8003916:	443b      	add	r3, r7
 8003918:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800391c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800391e:	e005      	b.n	800392c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	3301      	adds	r3, #1
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	2b02      	cmp	r3, #2
 800392a:	d9e7      	bls.n	80038fc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <RCC_SetFlashLatency+0x100>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4911      	ldr	r1, [pc, #68]	@ (800397c <RCC_SetFlashLatency+0x100>)
 8003936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800393c:	f7fd facc 	bl	8000ed8 <HAL_GetTick>
 8003940:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003942:	e008      	b.n	8003956 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003944:	f7fd fac8 	bl	8000ed8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e007      	b.n	8003966 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <RCC_SetFlashLatency+0x100>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003960:	429a      	cmp	r2, r3
 8003962:	d1ef      	bne.n	8003944 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3738      	adds	r7, #56	@ 0x38
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	0800cc64 	.word	0x0800cc64
 8003974:	0800cc6c 	.word	0x0800cc6c
 8003978:	0800cc74 	.word	0x0800cc74
 800397c:	58004000 	.word	0x58004000

08003980 <LL_RCC_LSE_IsReady>:
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d101      	bne.n	8003998 <LL_RCC_LSE_IsReady+0x18>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <LL_RCC_LSE_IsReady+0x1a>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <LL_RCC_SetUSARTClockSource>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_SetI2SClockSource>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <LL_RCC_SetLPUARTClockSource>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <LL_RCC_SetI2CClockSource>:
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <LL_RCC_SetLPTIMClockSource>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_SetRNGClockSource>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_SetADCClockSource>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <LL_RCC_SetRTCClockSource>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_GetRTCClockSource>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_ForceBackupDomainReset>:
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d058      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b88:	f7fe fd7e 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8c:	f7fd f9a4 	bl	8000ed8 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b92:	e009      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd f9a0 	bl	8000ed8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d902      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba6:	e006      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d13c      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003bbc:	f7ff ffa7 	bl	8003b0e <LL_RCC_GetRTCClockSource>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d00f      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd8:	f7ff ffa5 	bl	8003b26 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bdc:	f7ff ffb3 	bl	8003b46 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003be0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d014      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f970 	bl	8000ed8 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd f96c 	bl	8000ed8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d902      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	74fb      	strb	r3, [r7, #19]
            break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c14:	f7ff feb4 	bl	8003980 <LL_RCC_LSE_IsReady>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff5b 	bl	8003ae4 <LL_RCC_SetRTCClockSource>
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	74bb      	strb	r3, [r7, #18]
 8003c34:	e001      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fea9 	bl	80039a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fe9e 	bl	80039a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fec0 	bl	80039fc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fee6 	bl	8003a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fedb 	bl	8003a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fed0 	bl	8003a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fea9 	bl	8003a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fe9e 	bl	8003a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fe93 	bl	8003a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d011      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fe5e 	bl	80039d2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fea5 	bl	8003a90 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d011      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fea3 	bl	8003aba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	58000400 	.word	0x58000400

08003d9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d071      	beq.n	8003e92 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fc fe70 	bl	8000aa8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003dd0:	4b32      	ldr	r3, [pc, #200]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d051      	beq.n	8003e80 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003dde:	22ca      	movs	r2, #202	@ 0xca
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003de2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003de4:	2253      	movs	r2, #83	@ 0x53
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fa11 	bl	8004210 <RTC_EnterInitMode>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d13f      	bne.n	8003e78 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003df8:	4b28      	ldr	r3, [pc, #160]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003dfe:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e06:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003e08:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	4319      	orrs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	491f      	ldr	r1, [pc, #124]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	491b      	ldr	r1, [pc, #108]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003e32:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	430b      	orrs	r3, r1
 8003e44:	4915      	ldr	r1, [pc, #84]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa14 	bl	8004278 <RTC_ExitInitMode>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10e      	bne.n	8003e78 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a19      	ldr	r1, [r3, #32]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4319      	orrs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	490a      	ldr	r1, [pc, #40]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e78:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <HAL_RTC_Init+0x100>)
 8003e7a:	22ff      	movs	r2, #255	@ 0xff
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e7e:	e001      	b.n	8003e84 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40002800 	.word	0x40002800

08003ea0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_RTC_SetAlarm_IT+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0f3      	b.n	80040a6 <HAL_RTC_SetAlarm_IT+0x206>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003ece:	4b78      	ldr	r3, [pc, #480]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ede:	d06a      	beq.n	8003fb6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d13a      	bne.n	8003f5c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003ee6:	4b72      	ldr	r3, [pc, #456]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f9f5 	bl	80042f4 <RTC_ByteToBcd2>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f9ee 	bl	80042f4 <RTC_ByteToBcd2>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f1c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f9e6 	bl	80042f4 <RTC_ByteToBcd2>
 8003f28:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f2a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	78db      	ldrb	r3, [r3, #3]
 8003f32:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f34:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f9d8 	bl	80042f4 <RTC_ByteToBcd2>
 8003f44:	4603      	mov	r3, r0
 8003f46:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f48:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f50:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e02c      	b.n	8003fb6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8003f64:	d00d      	beq.n	8003f82 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f6e:	d008      	beq.n	8003f82 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f70:	4b4f      	ldr	r3, [pc, #316]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f8e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f94:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	78db      	ldrb	r3, [r3, #3]
 8003f9a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f9c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fa4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fa6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fac:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fb8:	22ca      	movs	r2, #202	@ 0xca
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fbe:	2253      	movs	r2, #83	@ 0x53
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fca:	d12c      	bne.n	8004026 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003fcc:	4b38      	ldr	r3, [pc, #224]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4a37      	ldr	r2, [pc, #220]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fd6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003fd8:	4b35      	ldr	r3, [pc, #212]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4930      	ldr	r1, [pc, #192]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	644b      	str	r3, [r1, #68]	@ 0x44
 8003ff4:	e006      	b.n	8004004 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004004:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004018:	4b25      	ldr	r3, [pc, #148]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 800401e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	e02b      	b.n	800407e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004026:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	4a21      	ldr	r2, [pc, #132]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 800402c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8004030:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004032:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004034:	2202      	movs	r2, #2
 8004036:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403e:	d107      	bne.n	8004050 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4919      	ldr	r1, [pc, #100]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 800404a:	4313      	orrs	r3, r2
 800404c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800404e:	e006      	b.n	800405e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004056:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800405e:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004072:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	4a0e      	ldr	r2, [pc, #56]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004078:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800407c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <HAL_RTC_SetAlarm_IT+0x214>)
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004084:	4a0b      	ldr	r2, [pc, #44]	@ (80040b4 <HAL_RTC_SetAlarm_IT+0x214>)
 8004086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004090:	22ff      	movs	r2, #255	@ 0xff
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40002800 	.word	0x40002800
 80040b4:	58000800 	.word	0x58000800

080040b8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_RTC_DeactivateAlarm+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e048      	b.n	8004162 <HAL_RTC_DeactivateAlarm+0xaa>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 80040e2:	22ca      	movs	r2, #202	@ 0xca
 80040e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80040e6:	4b21      	ldr	r3, [pc, #132]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 80040e8:	2253      	movs	r2, #83	@ 0x53
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f2:	d115      	bne.n	8004120 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040f4:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	4a1c      	ldr	r2, [pc, #112]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 80040fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040fe:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004106:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800410a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004118:	4b14      	ldr	r3, [pc, #80]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 800411a:	2201      	movs	r2, #1
 800411c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800411e:	e014      	b.n	800414a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004120:	4b12      	ldr	r3, [pc, #72]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4a11      	ldr	r2, [pc, #68]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004126:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800412a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 800412e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004136:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	f023 0202 	bic.w	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004146:	2202      	movs	r2, #2
 8004148:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <HAL_RTC_DeactivateAlarm+0xb4>)
 800414c:	22ff      	movs	r2, #255	@ 0xff
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	40002800 	.word	0x40002800

08004170 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <HAL_RTC_AlarmIRQHandler+0x50>)
 800417a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800418e:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004190:	2201      	movs	r2, #1
 8004192:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fd f890 	bl	80012ba <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041a6:	2202      	movs	r2, #2
 80041a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f94a 	bl	8004444 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40002800 	.word	0x40002800

080041c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80041cc:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <HAL_RTC_WaitForSynchro+0x48>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a0e      	ldr	r2, [pc, #56]	@ (800420c <HAL_RTC_WaitForSynchro+0x48>)
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80041d8:	f7fc fe7e 	bl	8000ed8 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80041de:	e009      	b.n	80041f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041e0:	f7fc fe7a 	bl	8000ed8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041ee:	d901      	bls.n	80041f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e006      	b.n	8004202 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RTC_WaitForSynchro+0x48>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40002800 	.word	0x40002800

08004210 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800421c:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <RTC_EnterInitMode+0x64>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d120      	bne.n	800426a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <RTC_EnterInitMode+0x64>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <RTC_EnterInitMode+0x64>)
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004234:	f7fc fe50 	bl	8000ed8 <HAL_GetTick>
 8004238:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800423a:	e00d      	b.n	8004258 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800423c:	f7fc fe4c 	bl	8000ed8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800424a:	d905      	bls.n	8004258 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <RTC_EnterInitMode+0x64>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <RTC_EnterInitMode+0x5a>
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d1e8      	bne.n	800423c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40002800 	.word	0x40002800

08004278 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004284:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a19      	ldr	r2, [pc, #100]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 800428a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004290:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10c      	bne.n	80042b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff91 	bl	80041c4 <HAL_RTC_WaitForSynchro>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01e      	beq.n	80042e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e017      	b.n	80042e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042b6:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 80042bc:	f023 0320 	bic.w	r3, r3, #32
 80042c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff7e 	bl	80041c4 <HAL_RTC_WaitForSynchro>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2203      	movs	r2, #3
 80042d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042da:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <RTC_ExitInitMode+0x78>)
 80042e0:	f043 0320 	orr.w	r3, r3, #32
 80042e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40002800 	.word	0x40002800

080042f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004306:	e005      	b.n	8004314 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	3b0a      	subs	r3, #10
 8004312:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004314:	7afb      	ldrb	r3, [r7, #11]
 8004316:	2b09      	cmp	r3, #9
 8004318:	d8f6      	bhi.n	8004308 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	b2da      	uxtb	r2, r3
 8004322:	7afb      	ldrb	r3, [r7, #11]
 8004324:	4313      	orrs	r3, r2
 8004326:	b2db      	uxtb	r3, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
	...

08004334 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_RTCEx_EnableBypassShadow+0x16>
 8004346:	2302      	movs	r3, #2
 8004348:	e01f      	b.n	800438a <HAL_RTCEx_EnableBypassShadow+0x56>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800435c:	22ca      	movs	r2, #202	@ 0xca
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004362:	2253      	movs	r2, #83	@ 0x53
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800436c:	f043 0320 	orr.w	r3, r3, #32
 8004370:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004372:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004374:	22ff      	movs	r2, #255	@ 0xff
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	40002800 	.word	0x40002800

08004398 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_RTCEx_SetSSRU_IT+0x16>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e027      	b.n	80043fe <HAL_RTCEx_SetSSRU_IT+0x66>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043c0:	22ca      	movs	r2, #202	@ 0xca
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043c6:	2253      	movs	r2, #83	@ 0x53
 80043c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80043ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d4:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_RTCEx_SetSSRU_IT+0x74>)
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043dc:	4a0b      	ldr	r2, [pc, #44]	@ (800440c <HAL_RTCEx_SetSSRU_IT+0x74>)
 80043de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043e8:	22ff      	movs	r2, #255	@ 0xff
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40002800 	.word	0x40002800
 800440c:	58000800 	.word	0x58000800

08004410 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004418:	4b09      	ldr	r3, [pc, #36]	@ (8004440 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800441a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004426:	2240      	movs	r2, #64	@ 0x40
 8004428:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc ff4f 	bl	80012ce <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40002800 	.word	0x40002800

08004444 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
	...

08004458 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004464:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <HAL_RTCEx_BKUPWrite+0x2c>)
 8004466:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	4000b100 	.word	0x4000b100

08004488 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004492:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <HAL_RTCEx_BKUPRead+0x28>)
 8004494:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	4000b100 	.word	0x4000b100

080044b4 <LL_PWR_SetRadioBusyTrigger>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044c4:	4904      	ldr	r1, [pc, #16]	@ (80044d8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	58000400 	.word	0x58000400

080044dc <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80044e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	58000400 	.word	0x58000400

080044fc <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004508:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	58000400 	.word	0x58000400

0800451c <LL_PWR_ClearFlag_RFBUSY>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004526:	619a      	str	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	58000400 	.word	0x58000400

08004534 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d101      	bne.n	8004548 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	58000400 	.word	0x58000400

08004558 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d101      	bne.n	800456c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	58000400 	.word	0x58000400

0800457c <LL_RCC_RF_DisableReset>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800458c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <LL_RCC_IsRFUnderReset>:
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b0:	d101      	bne.n	80045b6 <LL_RCC_IsRFUnderReset+0x1a>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_RCC_IsRFUnderReset+0x1c>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <LL_EXTI_EnableIT_32_63>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80045c8:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80045ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80045ce:	4905      	ldr	r1, [pc, #20]	@ (80045e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	58000800 	.word	0x58000800

080045e8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
    return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	e052      	b.n	80046a4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	799b      	ldrb	r3, [r3, #6]
 8004606:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_SUBGHZ_Init+0x2c>
 800460e:	7bbb      	ldrb	r3, [r7, #14]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d109      	bne.n	8004628 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fa80 	bl	8000b20 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004620:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004624:	f7ff ffcc 	bl	80045c0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d126      	bne.n	800467c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004634:	f7ff ffa2 	bl	800457c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004638:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <HAL_SUBGHZ_Init+0xc4>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	0cdb      	lsrs	r3, r3, #19
 8004646:	2264      	movs	r2, #100	@ 0x64
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	609a      	str	r2, [r3, #8]
        break;
 800465e:	e007      	b.n	8004670 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	3b01      	subs	r3, #1
 8004664:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004666:	f7ff ff99 	bl	800459c <LL_RCC_IsRFUnderReset>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ee      	bne.n	800464e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004670:	f7ff ff34 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004674:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004678:	f7ff ff1c 	bl	80044b4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800467c:	f7ff ff4e 	bl	800451c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 faac 	bl	8004be8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	719a      	strb	r2, [r3, #6]

  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000000 	.word	0x20000000

080046b0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
 80046c0:	4613      	mov	r3, r2
 80046c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	799b      	ldrb	r3, [r3, #6]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d14a      	bne.n	8004764 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	795b      	ldrb	r3, [r3, #5]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_SUBGHZ_WriteRegisters+0x2a>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e045      	b.n	8004766 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2202      	movs	r2, #2
 80046e4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fb4c 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046ec:	f7ff ff06 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80046f0:	210d      	movs	r1, #13
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fa98 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80046f8:	897b      	ldrh	r3, [r7, #10]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fa90 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004708:	897b      	ldrh	r3, [r7, #10]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4619      	mov	r1, r3
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa8a 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004714:	2300      	movs	r3, #0
 8004716:	82bb      	strh	r3, [r7, #20]
 8004718:	e00a      	b.n	8004730 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800471a:	8abb      	ldrh	r3, [r7, #20]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	4619      	mov	r1, r3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fa7f 	bl	8004c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800472a:	8abb      	ldrh	r3, [r7, #20]
 800472c:	3301      	adds	r3, #1
 800472e:	82bb      	strh	r3, [r7, #20]
 8004730:	8aba      	ldrh	r2, [r7, #20]
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d3f0      	bcc.n	800471a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004738:	f7ff fed0 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fb45 	bl	8004dcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e001      	b.n	8004754 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	715a      	strb	r2, [r3, #5]

    return status;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	e000      	b.n	8004766 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b088      	sub	sp, #32
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	461a      	mov	r2, r3
 800477a:	460b      	mov	r3, r1
 800477c:	817b      	strh	r3, [r7, #10]
 800477e:	4613      	mov	r3, r2
 8004780:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	799b      	ldrb	r3, [r3, #6]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d14a      	bne.n	8004826 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	795b      	ldrb	r3, [r3, #5]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004798:	2302      	movs	r3, #2
 800479a:	e045      	b.n	8004828 <HAL_SUBGHZ_ReadRegisters+0xba>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 faee 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047a8:	f7ff fea8 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80047ac:	211d      	movs	r1, #29
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa3a 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047b4:	897b      	ldrh	r3, [r7, #10]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa32 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80047c4:	897b      	ldrh	r3, [r7, #10]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa2c 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80047d0:	2100      	movs	r1, #0
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fa28 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80047d8:	2300      	movs	r3, #0
 80047da:	82fb      	strh	r3, [r7, #22]
 80047dc:	e009      	b.n	80047f2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80047de:	69b9      	ldr	r1, [r7, #24]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fa77 	bl	8004cd4 <SUBGHZSPI_Receive>
      pData++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80047ec:	8afb      	ldrh	r3, [r7, #22]
 80047ee:	3301      	adds	r3, #1
 80047f0:	82fb      	strh	r3, [r7, #22]
 80047f2:	8afa      	ldrh	r2, [r7, #22]
 80047f4:	893b      	ldrh	r3, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d3f1      	bcc.n	80047de <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047fa:	f7ff fe6f 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fae4 	bl	8004dcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e001      	b.n	8004816 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	715a      	strb	r2, [r3, #5]

    return status;
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	e000      	b.n	8004828 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	461a      	mov	r2, r3
 800483c:	460b      	mov	r3, r1
 800483e:	72fb      	strb	r3, [r7, #11]
 8004840:	4613      	mov	r3, r2
 8004842:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	799b      	ldrb	r3, [r3, #6]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d14a      	bne.n	80048e4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	795b      	ldrb	r3, [r3, #5]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004856:	2302      	movs	r3, #2
 8004858:	e045      	b.n	80048e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa8f 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	2b84      	cmp	r3, #132	@ 0x84
 800486a:	d002      	beq.n	8004872 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	2b94      	cmp	r3, #148	@ 0x94
 8004870:	d103      	bne.n	800487a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	711a      	strb	r2, [r3, #4]
 8004878:	e002      	b.n	8004880 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004880:	f7ff fe3c 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	4619      	mov	r1, r3
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f9cd 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	82bb      	strh	r3, [r7, #20]
 8004892:	e00a      	b.n	80048aa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004894:	8abb      	ldrh	r3, [r7, #20]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4619      	mov	r1, r3
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f9c2 	bl	8004c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048a4:	8abb      	ldrh	r3, [r7, #20]
 80048a6:	3301      	adds	r3, #1
 80048a8:	82bb      	strh	r3, [r7, #20]
 80048aa:	8aba      	ldrh	r2, [r7, #20]
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d3f0      	bcc.n	8004894 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048b2:	f7ff fe13 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	2b84      	cmp	r3, #132	@ 0x84
 80048ba:	d002      	beq.n	80048c2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa85 	bl	8004dcc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
 80048ce:	e001      	b.n	80048d4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	715a      	strb	r2, [r3, #5]

    return status;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	e000      	b.n	80048e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	461a      	mov	r2, r3
 80048fa:	460b      	mov	r3, r1
 80048fc:	72fb      	strb	r3, [r7, #11]
 80048fe:	4613      	mov	r3, r2
 8004900:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	799b      	ldrb	r3, [r3, #6]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d13d      	bne.n	800498c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	795b      	ldrb	r3, [r3, #5]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004918:	2302      	movs	r3, #2
 800491a:	e038      	b.n	800498e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa2e 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004928:	f7ff fde8 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	4619      	mov	r1, r3
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f979 	bl	8004c28 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004936:	2100      	movs	r1, #0
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f975 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	82fb      	strh	r3, [r7, #22]
 8004942:	e009      	b.n	8004958 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f9c4 	bl	8004cd4 <SUBGHZSPI_Receive>
      pData++;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	3301      	adds	r3, #1
 8004950:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004952:	8afb      	ldrh	r3, [r7, #22]
 8004954:	3301      	adds	r3, #1
 8004956:	82fb      	strh	r3, [r7, #22]
 8004958:	8afa      	ldrh	r2, [r7, #22]
 800495a:	893b      	ldrh	r3, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3f1      	bcc.n	8004944 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004960:	f7ff fdbc 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fa31 	bl	8004dcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e001      	b.n	800497c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	715a      	strb	r2, [r3, #5]

    return status;
 8004988:	7ffb      	ldrb	r3, [r7, #31]
 800498a:	e000      	b.n	800498e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	461a      	mov	r2, r3
 80049a2:	460b      	mov	r3, r1
 80049a4:	72fb      	strb	r3, [r7, #11]
 80049a6:	4613      	mov	r3, r2
 80049a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	799b      	ldrb	r3, [r3, #6]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d13e      	bne.n	8004a32 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	795b      	ldrb	r3, [r3, #5]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80049bc:	2302      	movs	r3, #2
 80049be:	e039      	b.n	8004a34 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f9dc 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049cc:	f7ff fd96 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80049d0:	210e      	movs	r1, #14
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f928 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80049d8:	7afb      	ldrb	r3, [r7, #11]
 80049da:	4619      	mov	r1, r3
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f923 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	82bb      	strh	r3, [r7, #20]
 80049e6:	e00a      	b.n	80049fe <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049e8:	8abb      	ldrh	r3, [r7, #20]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f918 	bl	8004c28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049f8:	8abb      	ldrh	r3, [r7, #20]
 80049fa:	3301      	adds	r3, #1
 80049fc:	82bb      	strh	r3, [r7, #20]
 80049fe:	8aba      	ldrh	r2, [r7, #20]
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3f0      	bcc.n	80049e8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a06:	f7ff fd69 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f9de 	bl	8004dcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
 8004a1c:	e001      	b.n	8004a22 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	715a      	strb	r2, [r3, #5]

    return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	e000      	b.n	8004a34 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	461a      	mov	r2, r3
 8004a48:	460b      	mov	r3, r1
 8004a4a:	72fb      	strb	r3, [r7, #11]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	799b      	ldrb	r3, [r3, #6]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d141      	bne.n	8004ae2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	795b      	ldrb	r3, [r3, #5]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e03c      	b.n	8004ae4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f987 	bl	8004d84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a76:	f7ff fd41 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004a7a:	211e      	movs	r1, #30
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f8d3 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	4619      	mov	r1, r3
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f8ce 	bl	8004c28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8ca 	bl	8004c28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	82fb      	strh	r3, [r7, #22]
 8004a98:	e009      	b.n	8004aae <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f919 	bl	8004cd4 <SUBGHZSPI_Receive>
      pData++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004aa8:	8afb      	ldrh	r3, [r7, #22]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	82fb      	strh	r3, [r7, #22]
 8004aae:	8afa      	ldrh	r2, [r7, #22]
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3f1      	bcc.n	8004a9a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ab6:	f7ff fd11 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f986 	bl	8004dcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e001      	b.n	8004ad2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	715a      	strb	r2, [r3, #5]

    return status;
 8004ade:	7ffb      	ldrb	r3, [r7, #31]
 8004ae0:	e000      	b.n	8004ae4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004af4:	2300      	movs	r3, #0
 8004af6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004af8:	f107 020c 	add.w	r2, r7, #12
 8004afc:	2302      	movs	r3, #2
 8004afe:	2112      	movs	r1, #18
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fef4 	bl	80048ee <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004b06:	7b3b      	ldrb	r3, [r7, #12]
 8004b08:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	7b7b      	ldrb	r3, [r7, #13]
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004b1a:	f107 020c 	add.w	r2, r7, #12
 8004b1e:	2302      	movs	r3, #2
 8004b20:	2102      	movs	r1, #2
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fe84 	bl	8004830 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004b28:	89fb      	ldrh	r3, [r7, #14]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f006 f88e 	bl	800ac54 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f006 f894 	bl	800ac70 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f006 f8e4 	bl	800ad20 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b58:	89fb      	ldrh	r3, [r7, #14]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f006 f8ea 	bl	800ad3c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f006 f8f0 	bl	800ad58 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f006 f8be 	bl	800ad04 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f006 f87a 	bl	800ac8c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004b98:	89fb      	ldrh	r3, [r7, #14]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004ba2:	89fb      	ldrh	r3, [r7, #14]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004bac:	2101      	movs	r1, #1
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f006 f87a 	bl	800aca8 <HAL_SUBGHZ_CADStatusCallback>
 8004bb4:	e003      	b.n	8004bbe <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f006 f875 	bl	800aca8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f006 f88b 	bl	800ace4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004bce:	89fb      	ldrh	r3, [r7, #14]
 8004bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f006 f8cb 	bl	800ad74 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004bfc:	4a09      	ldr	r2, [pc, #36]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004c04:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004c08:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c0e:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <SUBGHZSPI_Init+0x3c>)
 8004c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	58010000 	.word	0x58010000

08004c28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c38:	4b23      	ldr	r3, [pc, #140]	@ (8004cc8 <SUBGHZSPI_Transmit+0xa0>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	0cdb      	lsrs	r3, r3, #19
 8004c46:	2264      	movs	r2, #100	@ 0x64
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e008      	b.n	8004c72 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004c66:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <SUBGHZSPI_Transmit+0xa4>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d1ed      	bne.n	8004c4e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004c72:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <SUBGHZSPI_Transmit+0xa8>)
 8004c74:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c7c:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <SUBGHZSPI_Transmit+0xa0>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	2264      	movs	r2, #100	@ 0x64
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	609a      	str	r2, [r3, #8]
      break;
 8004ca2:	e008      	b.n	8004cb6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004caa:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <SUBGHZSPI_Transmit+0xa4>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d1ed      	bne.n	8004c92 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <SUBGHZSPI_Transmit+0xa4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]

  return status;
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	58010000 	.word	0x58010000
 8004cd0:	5801000c 	.word	0x5801000c

08004cd4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ce2:	4b25      	ldr	r3, [pc, #148]	@ (8004d78 <SUBGHZSPI_Receive+0xa4>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	0cdb      	lsrs	r3, r3, #19
 8004cf0:	2264      	movs	r2, #100	@ 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e008      	b.n	8004d1c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d10:	4b1a      	ldr	r3, [pc, #104]	@ (8004d7c <SUBGHZSPI_Receive+0xa8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d1ed      	bne.n	8004cf8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d1c:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <SUBGHZSPI_Receive+0xac>)
 8004d1e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	22ff      	movs	r2, #255	@ 0xff
 8004d24:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d26:	4b14      	ldr	r3, [pc, #80]	@ (8004d78 <SUBGHZSPI_Receive+0xa4>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	0cdb      	lsrs	r3, r3, #19
 8004d34:	2264      	movs	r2, #100	@ 0x64
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e008      	b.n	8004d60 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d54:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <SUBGHZSPI_Receive+0xa8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d1ed      	bne.n	8004d3c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <SUBGHZSPI_Receive+0xa8>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	701a      	strb	r2, [r3, #0]

  return status;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	58010000 	.word	0x58010000
 8004d80:	5801000c 	.word	0x5801000c

08004d84 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d111      	bne.n	8004db8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <SUBGHZ_CheckDeviceReady+0x44>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004da4:	f7ff fbaa 	bl	80044fc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f9      	bne.n	8004da8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004db4:	f7ff fb92 	bl	80044dc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f807 	bl	8004dcc <SUBGHZ_WaitOnBusy>
 8004dbe:	4603      	mov	r3, r0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000000 	.word	0x20000000

08004dcc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004dd8:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <SUBGHZ_WaitOnBusy+0x58>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	2264      	movs	r2, #100	@ 0x64
 8004de8:	fb02 f303 	mul.w	r3, r2, r3
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004dee:	f7ff fbb3 	bl	8004558 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004df2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	609a      	str	r2, [r3, #8]
      break;
 8004e04:	e009      	b.n	8004e1a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004e0c:	f7ff fb92 	bl	8004534 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d0e9      	beq.n	8004dee <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000000 	.word	0x20000000

08004e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e049      	b.n	8004ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb fe7a 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 f910 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e049      	b.n	8004f7c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f841 	bl	8004f84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 f8b9 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e066      	b.n	8005084 <HAL_TIM_OC_ConfigChannel+0xec>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b14      	cmp	r3, #20
 8004fc2:	d857      	bhi.n	8005074 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08005075 	.word	0x08005075
 8004fd4:	08005075 	.word	0x08005075
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	0800502f 	.word	0x0800502f
 8004fe0:	08005075 	.word	0x08005075
 8004fe4:	08005075 	.word	0x08005075
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	08005075 	.word	0x08005075
 8004ff8:	08005075 	.word	0x08005075
 8004ffc:	0800504b 	.word	0x0800504b
 8005000:	08005075 	.word	0x08005075
 8005004:	08005075 	.word	0x08005075
 8005008:	08005075 	.word	0x08005075
 800500c:	08005059 	.word	0x08005059
 8005010:	08005075 	.word	0x08005075
 8005014:	08005075 	.word	0x08005075
 8005018:	08005075 	.word	0x08005075
 800501c:	08005067 	.word	0x08005067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f892 	bl	8005150 <TIM_OC1_SetConfig>
      break;
 800502c:	e025      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f907 	bl	8005248 <TIM_OC2_SetConfig>
      break;
 800503a:	e01e      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f978 	bl	8005338 <TIM_OC3_SetConfig>
      break;
 8005048:	e017      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9e9 	bl	8005428 <TIM_OC4_SetConfig>
      break;
 8005056:	e010      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fa3e 	bl	80054e0 <TIM_OC5_SetConfig>
      break;
 8005064:	e009      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa8f 	bl	8005590 <TIM_OC6_SetConfig>
      break;
 8005072:	e002      	b.n	800507a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a29      	ldr	r2, [pc, #164]	@ (8005144 <TIM_Base_SetConfig+0xb8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x20>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d108      	bne.n	80050be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <TIM_Base_SetConfig+0xb8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <TIM_Base_SetConfig+0xbc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <TIM_Base_SetConfig+0xc0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <TIM_Base_SetConfig+0xb8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0xa0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <TIM_Base_SetConfig+0xbc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0xa0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a09      	ldr	r2, [pc, #36]	@ (800514c <TIM_Base_SetConfig+0xc0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40014400 	.word	0x40014400
 800514c:	40014800 	.word	0x40014800

08005150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a24      	ldr	r2, [pc, #144]	@ (800523c <TIM_OC1_SetConfig+0xec>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_OC1_SetConfig+0x70>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a23      	ldr	r2, [pc, #140]	@ (8005240 <TIM_OC1_SetConfig+0xf0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC1_SetConfig+0x70>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a22      	ldr	r2, [pc, #136]	@ (8005244 <TIM_OC1_SetConfig+0xf4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10c      	bne.n	80051da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0308 	bic.w	r3, r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a17      	ldr	r2, [pc, #92]	@ (800523c <TIM_OC1_SetConfig+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_OC1_SetConfig+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <TIM_OC1_SetConfig+0xf4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC1_SetConfig+0xa2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <TIM_OC1_SetConfig+0xf0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d111      	bne.n	8005216 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40014800 	.word	0x40014800
 8005244:	40014400 	.word	0x40014400

08005248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0210 	bic.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <TIM_OC2_SetConfig+0xe4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10d      	bne.n	80052c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <TIM_OC2_SetConfig+0xe4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_OC2_SetConfig+0x98>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TIM_OC2_SetConfig+0xe8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC2_SetConfig+0x98>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a16      	ldr	r2, [pc, #88]	@ (8005334 <TIM_OC2_SetConfig+0xec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d113      	bne.n	8005308 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a21      	ldr	r2, [pc, #132]	@ (800541c <TIM_OC3_SetConfig+0xe4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d10d      	bne.n	80053b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a18      	ldr	r2, [pc, #96]	@ (800541c <TIM_OC3_SetConfig+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_OC3_SetConfig+0x96>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <TIM_OC3_SetConfig+0xe8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_OC3_SetConfig+0x96>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <TIM_OC3_SetConfig+0xec>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d113      	bne.n	80053f6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800

08005428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a13      	ldr	r2, [pc, #76]	@ (80054d4 <TIM_OC4_SetConfig+0xac>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC4_SetConfig+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a12      	ldr	r2, [pc, #72]	@ (80054d8 <TIM_OC4_SetConfig+0xb0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC4_SetConfig+0x74>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a11      	ldr	r2, [pc, #68]	@ (80054dc <TIM_OC4_SetConfig+0xb4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d109      	bne.n	80054b0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800

080054e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a13      	ldr	r2, [pc, #76]	@ (8005584 <TIM_OC5_SetConfig+0xa4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC5_SetConfig+0x6a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a12      	ldr	r2, [pc, #72]	@ (8005588 <TIM_OC5_SetConfig+0xa8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC5_SetConfig+0x6a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a11      	ldr	r2, [pc, #68]	@ (800558c <TIM_OC5_SetConfig+0xac>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d109      	bne.n	800555e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <TIM_OC6_SetConfig+0xa4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_OC6_SetConfig+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a12      	ldr	r2, [pc, #72]	@ (8005638 <TIM_OC6_SetConfig+0xa8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC6_SetConfig+0x6c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a11      	ldr	r2, [pc, #68]	@ (800563c <TIM_OC6_SetConfig+0xac>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d109      	bne.n	8005610 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800

08005640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005658:	2302      	movs	r3, #2
 800565a:	e078      	b.n	800574e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d106      	bne.n	80056ee <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a19      	ldr	r2, [pc, #100]	@ (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d121      	bne.n	800573c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	051b      	lsls	r3, r3, #20
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0b      	ldr	r2, [pc, #44]	@ (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d106      	bne.n	800573c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00

0800575c <LL_RCC_GetUSARTClockSource>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005768:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	401a      	ands	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	4313      	orrs	r3, r2
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <LL_RCC_GetLPUARTClockSource>:
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800578c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4013      	ands	r3, r2
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e042      	b.n	8005836 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fb fa02 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2224      	movs	r2, #36	@ 0x24
 80057cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc3b 	bl	800605c <UART_SetConfig>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e022      	b.n	8005836 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fea3 	bl	8006544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800580c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800581c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 ff29 	bl	8006686 <UART_CheckIdleState>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	@ 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005854:	2b20      	cmp	r3, #32
 8005856:	d137      	bne.n	80058c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Receive_IT+0x24>
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e030      	b.n	80058ca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a18      	ldr	r2, [pc, #96]	@ (80058d4 <HAL_UART_Receive_IT+0x94>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d01f      	beq.n	80058b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d018      	beq.n	80058b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	69f9      	ldr	r1, [r7, #28]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	461a      	mov	r2, r3
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fff8 	bl	80068b4 <UART_Start_Receive_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	e000      	b.n	80058ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3728      	adds	r7, #40	@ 0x28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40008000 	.word	0x40008000

080058d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	@ 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d167      	bne.n	80059c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_UART_Transmit_DMA+0x24>
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e060      	b.n	80059c2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2221      	movs	r2, #33	@ 0x21
 8005922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d028      	beq.n	8005980 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005932:	4a26      	ldr	r2, [pc, #152]	@ (80059cc <HAL_UART_Transmit_DMA+0xf4>)
 8005934:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800593a:	4a25      	ldr	r2, [pc, #148]	@ (80059d0 <HAL_UART_Transmit_DMA+0xf8>)
 800593c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005942:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <HAL_UART_Transmit_DMA+0xfc>)
 8005944:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800594a:	2200      	movs	r2, #0
 800594c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	4619      	mov	r1, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3328      	adds	r3, #40	@ 0x28
 800595e:	461a      	mov	r2, r3
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	f7fc f987 	bl	8001c74 <HAL_DMA_Start_IT>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2210      	movs	r2, #16
 8005970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e020      	b.n	80059c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2240      	movs	r2, #64	@ 0x40
 8005986:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3308      	adds	r3, #8
 80059a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a8:	623a      	str	r2, [r7, #32]
 80059aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e5      	bne.n	8005988 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e000      	b.n	80059c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3728      	adds	r7, #40	@ 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08006c3f 	.word	0x08006c3f
 80059d0:	08006cd9 	.word	0x08006cd9
 80059d4:	08006cf5 	.word	0x08006cf5

080059d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b0ba      	sub	sp, #232	@ 0xe8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a06:	4013      	ands	r3, r2
 8005a08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d11b      	bne.n	8005a4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 82e3 	beq.w	8006008 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
      }
      return;
 8005a4a:	e2dd      	b.n	8006008 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8123 	beq.w	8005c9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c90 <HAL_UART_IRQHandler+0x2b8>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a66:	4b8b      	ldr	r3, [pc, #556]	@ (8005c94 <HAL_UART_IRQHandler+0x2bc>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8116 	beq.w	8005c9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d011      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xc8>
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xf8>
 8005aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2202      	movs	r2, #2
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f043 0204 	orr.w	r2, r3, #4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_UART_IRQHandler+0x128>
 8005adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2204      	movs	r2, #4
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c90 <HAL_UART_IRQHandler+0x2b8>)
 8005b1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d012      	beq.n	8005b6e <HAL_UART_IRQHandler+0x196>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8249 	beq.w	800600c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d013      	beq.n	8005bae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d005      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d054      	beq.n	8005c7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 ffce 	bl	8006b74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d146      	bne.n	8005c74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d9      	bne.n	8005be6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c42:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <HAL_UART_IRQHandler+0x2c0>)
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fc f8ed 	bl	8001e2c <HAL_DMA_Abort_IT>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d019      	beq.n	8005c8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005c66:	4610      	mov	r0, r2
 8005c68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	e00f      	b.n	8005c8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9e0 	bl	8006032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c72:	e00b      	b.n	8005c8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9dc 	bl	8006032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7a:	e007      	b.n	8005c8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9d8 	bl	8006032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005c8a:	e1bf      	b.n	800600c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8c:	bf00      	nop
    return;
 8005c8e:	e1bd      	b.n	800600c <HAL_UART_IRQHandler+0x634>
 8005c90:	10000001 	.word	0x10000001
 8005c94:	04000120 	.word	0x04000120
 8005c98:	08006d75 	.word	0x08006d75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f040 8153 	bne.w	8005f4c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 814c 	beq.w	8005f4c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8145 	beq.w	8005f4c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	f040 80bb 	bne.w	8005e50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 818f 	beq.w	8006010 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	f080 8187 	bcs.w	8006010 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8087 	bne.w	8005e2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1da      	bne.n	8005d20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e1      	bne.n	8005d6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e4      	bne.n	8005dec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fb ffa1 	bl	8001d70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f8fb 	bl	8006044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e4e:	e0df      	b.n	8006010 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80d1 	beq.w	8006014 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80cc 	beq.w	8006014 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e4      	bne.n	8005e7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eda:	633a      	str	r2, [r7, #48]	@ 0x30
 8005edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e1      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	69b9      	ldr	r1, [r7, #24]
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	617b      	str	r3, [r7, #20]
   return(result);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e4      	bne.n	8005f02 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f87d 	bl	8006044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f4a:	e063      	b.n	8006014 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <HAL_UART_IRQHandler+0x59e>
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fc5e 	bl	8007830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f74:	e051      	b.n	800601a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03a      	beq.n	8006018 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
    }
    return;
 8005faa:	e035      	b.n	8006018 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <HAL_UART_IRQHandler+0x5f4>
 8005fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 feeb 	bl	8006da0 <UART_EndTransmit_IT>
    return;
 8005fca:	e026      	b.n	800601a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <HAL_UART_IRQHandler+0x614>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 fc35 	bl	8007854 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fea:	e016      	b.n	800601a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d010      	beq.n	800601a <HAL_UART_IRQHandler+0x642>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da0c      	bge.n	800601a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fc1e 	bl	8007842 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006006:	e008      	b.n	800601a <HAL_UART_IRQHandler+0x642>
      return;
 8006008:	bf00      	nop
 800600a:	e006      	b.n	800601a <HAL_UART_IRQHandler+0x642>
    return;
 800600c:	bf00      	nop
 800600e:	e004      	b.n	800601a <HAL_UART_IRQHandler+0x642>
      return;
 8006010:	bf00      	nop
 8006012:	e002      	b.n	800601a <HAL_UART_IRQHandler+0x642>
      return;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_UART_IRQHandler+0x642>
    return;
 8006018:	bf00      	nop
  }
}
 800601a:	37e8      	adds	r7, #232	@ 0xe8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
	...

0800605c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b08c      	sub	sp, #48	@ 0x30
 8006062:	af00      	add	r7, sp, #0
 8006064:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	431a      	orrs	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b94      	ldr	r3, [pc, #592]	@ (80062dc <UART_SetConfig+0x280>)
 800608c:	4013      	ands	r3, r2
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006094:	430b      	orrs	r3, r1
 8006096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a89      	ldr	r2, [pc, #548]	@ (80062e0 <UART_SetConfig+0x284>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c4:	4313      	orrs	r3, r2
 80060c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80060d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060dc:	430b      	orrs	r3, r1
 80060de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	f023 010f 	bic.w	r1, r3, #15
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a7a      	ldr	r2, [pc, #488]	@ (80062e4 <UART_SetConfig+0x288>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d127      	bne.n	8006150 <UART_SetConfig+0xf4>
 8006100:	2003      	movs	r0, #3
 8006102:	f7ff fb2b 	bl	800575c <LL_RCC_GetUSARTClockSource>
 8006106:	4603      	mov	r3, r0
 8006108:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800610c:	2b03      	cmp	r3, #3
 800610e:	d81b      	bhi.n	8006148 <UART_SetConfig+0xec>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0xbc>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006129 	.word	0x08006129
 800611c:	08006139 	.word	0x08006139
 8006120:	08006131 	.word	0x08006131
 8006124:	08006141 	.word	0x08006141
 8006128:	2301      	movs	r3, #1
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612e:	e080      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006130:	2302      	movs	r3, #2
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e07c      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e078      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e074      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614e:	e070      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a64      	ldr	r2, [pc, #400]	@ (80062e8 <UART_SetConfig+0x28c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d138      	bne.n	80061cc <UART_SetConfig+0x170>
 800615a:	200c      	movs	r0, #12
 800615c:	f7ff fafe 	bl	800575c <LL_RCC_GetUSARTClockSource>
 8006160:	4603      	mov	r3, r0
 8006162:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d82c      	bhi.n	80061c4 <UART_SetConfig+0x168>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <UART_SetConfig+0x114>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061c5 	.word	0x080061c5
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061c5 	.word	0x080061c5
 8006180:	080061b5 	.word	0x080061b5
 8006184:	080061c5 	.word	0x080061c5
 8006188:	080061c5 	.word	0x080061c5
 800618c:	080061c5 	.word	0x080061c5
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061c5 	.word	0x080061c5
 8006198:	080061c5 	.word	0x080061c5
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e042      	b.n	8006232 <UART_SetConfig+0x1d6>
 80061ac:	2302      	movs	r3, #2
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e03e      	b.n	8006232 <UART_SetConfig+0x1d6>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e03a      	b.n	8006232 <UART_SetConfig+0x1d6>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e036      	b.n	8006232 <UART_SetConfig+0x1d6>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e032      	b.n	8006232 <UART_SetConfig+0x1d6>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a43      	ldr	r2, [pc, #268]	@ (80062e0 <UART_SetConfig+0x284>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d12a      	bne.n	800622c <UART_SetConfig+0x1d0>
 80061d6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80061da:	f7ff fad1 	bl	8005780 <LL_RCC_GetLPUARTClockSource>
 80061de:	4603      	mov	r3, r0
 80061e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061e4:	d01a      	beq.n	800621c <UART_SetConfig+0x1c0>
 80061e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ea:	d81b      	bhi.n	8006224 <UART_SetConfig+0x1c8>
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f0:	d00c      	beq.n	800620c <UART_SetConfig+0x1b0>
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f6:	d815      	bhi.n	8006224 <UART_SetConfig+0x1c8>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <UART_SetConfig+0x1a8>
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d008      	beq.n	8006214 <UART_SetConfig+0x1b8>
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x1c8>
 8006204:	2300      	movs	r3, #0
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e012      	b.n	8006232 <UART_SetConfig+0x1d6>
 800620c:	2302      	movs	r3, #2
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e00e      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006214:	2304      	movs	r3, #4
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x1d6>
 800621c:	2308      	movs	r3, #8
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e006      	b.n	8006232 <UART_SetConfig+0x1d6>
 8006224:	2310      	movs	r3, #16
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x1d6>
 800622c:	2310      	movs	r3, #16
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2a      	ldr	r2, [pc, #168]	@ (80062e0 <UART_SetConfig+0x284>)
 8006238:	4293      	cmp	r3, r2
 800623a:	f040 80a4 	bne.w	8006386 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800623e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006242:	2b08      	cmp	r3, #8
 8006244:	d823      	bhi.n	800628e <UART_SetConfig+0x232>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <UART_SetConfig+0x1f0>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006271 	.word	0x08006271
 8006250:	0800628f 	.word	0x0800628f
 8006254:	08006279 	.word	0x08006279
 8006258:	0800628f 	.word	0x0800628f
 800625c:	0800627f 	.word	0x0800627f
 8006260:	0800628f 	.word	0x0800628f
 8006264:	0800628f 	.word	0x0800628f
 8006268:	0800628f 	.word	0x0800628f
 800626c:	08006287 	.word	0x08006287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006270:	f7fd fab0 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006276:	e010      	b.n	800629a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006278:	4b1c      	ldr	r3, [pc, #112]	@ (80062ec <UART_SetConfig+0x290>)
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800627c:	e00d      	b.n	800629a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627e:	f7fd f9f5 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8006282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006284:	e009      	b.n	800629a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800628c:	e005      	b.n	800629a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8137 	beq.w	8006510 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	4a12      	ldr	r2, [pc, #72]	@ (80062f0 <UART_SetConfig+0x294>)
 80062a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d305      	bcc.n	80062d2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d910      	bls.n	80062f4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062d8:	e11a      	b.n	8006510 <UART_SetConfig+0x4b4>
 80062da:	bf00      	nop
 80062dc:	cfff69f3 	.word	0xcfff69f3
 80062e0:	40008000 	.word	0x40008000
 80062e4:	40013800 	.word	0x40013800
 80062e8:	40004400 	.word	0x40004400
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	0800d02c 	.word	0x0800d02c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	2200      	movs	r2, #0
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	4a8e      	ldr	r2, [pc, #568]	@ (800653c <UART_SetConfig+0x4e0>)
 8006302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006306:	b29b      	uxth	r3, r3
 8006308:	2200      	movs	r2, #0
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006316:	f7f9 ff37 	bl	8000188 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	020b      	lsls	r3, r1, #8
 800632c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006330:	0202      	lsls	r2, r0, #8
 8006332:	6979      	ldr	r1, [r7, #20]
 8006334:	6849      	ldr	r1, [r1, #4]
 8006336:	0849      	lsrs	r1, r1, #1
 8006338:	2000      	movs	r0, #0
 800633a:	460c      	mov	r4, r1
 800633c:	4605      	mov	r5, r0
 800633e:	eb12 0804 	adds.w	r8, r2, r4
 8006342:	eb43 0905 	adc.w	r9, r3, r5
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	469a      	mov	sl, r3
 800634e:	4693      	mov	fp, r2
 8006350:	4652      	mov	r2, sl
 8006352:	465b      	mov	r3, fp
 8006354:	4640      	mov	r0, r8
 8006356:	4649      	mov	r1, r9
 8006358:	f7f9 ff16 	bl	8000188 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800636a:	d308      	bcc.n	800637e <UART_SetConfig+0x322>
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006372:	d204      	bcs.n	800637e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e0c8      	b.n	8006510 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006384:	e0c4      	b.n	8006510 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638e:	d167      	bne.n	8006460 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006394:	2b08      	cmp	r3, #8
 8006396:	d828      	bhi.n	80063ea <UART_SetConfig+0x38e>
 8006398:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <UART_SetConfig+0x344>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063d5 	.word	0x080063d5
 80063ac:	080063eb 	.word	0x080063eb
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	080063eb 	.word	0x080063eb
 80063bc:	080063eb 	.word	0x080063eb
 80063c0:	080063e3 	.word	0x080063e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7fd fa06 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 80063c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063ca:	e014      	b.n	80063f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063cc:	f7fd fa14 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80063d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063d2:	e010      	b.n	80063f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006540 <UART_SetConfig+0x4e4>)
 80063d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063d8:	e00d      	b.n	80063f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063da:	f7fd f947 	bl	800366c <HAL_RCC_GetSysClockFreq>
 80063de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063e0:	e009      	b.n	80063f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063e8:	e005      	b.n	80063f6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8089 	beq.w	8006510 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	4a4e      	ldr	r2, [pc, #312]	@ (800653c <UART_SetConfig+0x4e0>)
 8006404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006408:	461a      	mov	r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006410:	005a      	lsls	r2, r3, #1
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	441a      	add	r2, r3
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d916      	bls.n	8006458 <UART_SetConfig+0x3fc>
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006430:	d212      	bcs.n	8006458 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f023 030f 	bic.w	r3, r3, #15
 800643a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	b29a      	uxth	r2, r3
 8006448:	8bfb      	ldrh	r3, [r7, #30]
 800644a:	4313      	orrs	r3, r2
 800644c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	8bfa      	ldrh	r2, [r7, #30]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e05b      	b.n	8006510 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800645e:	e057      	b.n	8006510 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006460:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006464:	2b08      	cmp	r3, #8
 8006466:	d828      	bhi.n	80064ba <UART_SetConfig+0x45e>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0x414>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006495 	.word	0x08006495
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064a5 	.word	0x080064a5
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064ab 	.word	0x080064ab
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064bb 	.word	0x080064bb
 8006490:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006494:	f7fd f99e 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8006498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800649a:	e014      	b.n	80064c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fd f9ac 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80064a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064a2:	e010      	b.n	80064c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b26      	ldr	r3, [pc, #152]	@ (8006540 <UART_SetConfig+0x4e4>)
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064a8:	e00d      	b.n	80064c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064aa:	f7fd f8df 	bl	800366c <HAL_RCC_GetSysClockFreq>
 80064ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064b0:	e009      	b.n	80064c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b8:	e005      	b.n	80064c6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064c4:	bf00      	nop
    }

    if (pclk != 0U)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d021      	beq.n	8006510 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	4a1a      	ldr	r2, [pc, #104]	@ (800653c <UART_SetConfig+0x4e0>)
 80064d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	fbb3 f2f2 	udiv	r2, r3, r2
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	441a      	add	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d909      	bls.n	800650a <UART_SetConfig+0x4ae>
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fc:	d205      	bcs.n	800650a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	b29a      	uxth	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	e002      	b.n	8006510 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2201      	movs	r2, #1
 800651c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2200      	movs	r2, #0
 8006524:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2200      	movs	r2, #0
 800652a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800652c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006530:	4618      	mov	r0, r3
 8006532:	3730      	adds	r7, #48	@ 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653a:	bf00      	nop
 800653c:	0800d02c 	.word	0x0800d02c
 8006540:	00f42400 	.word	0x00f42400

08006544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006642:	d10a      	bne.n	800665a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af02      	add	r7, sp, #8
 800668c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006696:	f7fa fc1f 	bl	8000ed8 <HAL_GetTick>
 800669a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d10e      	bne.n	80066c8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f832 	bl	8006722 <UART_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e028      	b.n	800671a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d10e      	bne.n	80066f4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f81c 	bl	8006722 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e012      	b.n	800671a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b09c      	sub	sp, #112	@ 0x70
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	603b      	str	r3, [r7, #0]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	e0a9      	b.n	8006888 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800673a:	f000 80a5 	beq.w	8006888 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fa fbcb 	bl	8000ed8 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <UART_WaitOnFlagUntilTimeout+0x32>
 800674e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006750:	2b00      	cmp	r3, #0
 8006752:	d140      	bne.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006764:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006768:	667b      	str	r3, [r7, #100]	@ 0x64
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006772:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006774:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006778:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e6      	bne.n	8006754 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80067a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e069      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d051      	beq.n	8006888 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f2:	d149      	bne.n	8006888 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
 800681e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e6      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	613b      	str	r3, [r7, #16]
   return(result);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3308      	adds	r3, #8
 800684e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006850:	623a      	str	r2, [r7, #32]
 8006852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	69f9      	ldr	r1, [r7, #28]
 8006856:	6a3a      	ldr	r2, [r7, #32]
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	61bb      	str	r3, [r7, #24]
   return(result);
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e010      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	f43f af46 	beq.w	8006734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3770      	adds	r7, #112	@ 0x70
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b0a3      	sub	sp, #140	@ 0x8c
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e6:	d10e      	bne.n	8006906 <UART_Start_Receive_IT+0x52>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <UART_Start_Receive_IT+0x48>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80068f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068fa:	e02d      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006904:	e028      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <UART_Start_Receive_IT+0x76>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <UART_Start_Receive_IT+0x6c>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	22ff      	movs	r2, #255	@ 0xff
 800691a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800691e:	e01b      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	227f      	movs	r2, #127	@ 0x7f
 8006924:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006928:	e016      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006932:	d10d      	bne.n	8006950 <UART_Start_Receive_IT+0x9c>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <UART_Start_Receive_IT+0x92>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	227f      	movs	r2, #127	@ 0x7f
 8006940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006944:	e008      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	223f      	movs	r2, #63	@ 0x3f
 800694a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800694e:	e003      	b.n	8006958 <UART_Start_Receive_IT+0xa4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2222      	movs	r2, #34	@ 0x22
 8006964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800698c:	673a      	str	r2, [r7, #112]	@ 0x70
 800698e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006992:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800699a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e3      	bne.n	8006968 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a8:	d14f      	bne.n	8006a4a <UART_Start_Receive_IT+0x196>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d349      	bcc.n	8006a4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069be:	d107      	bne.n	80069d0 <UART_Start_Receive_IT+0x11c>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d103      	bne.n	80069d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a46      	ldr	r2, [pc, #280]	@ (8006ae4 <UART_Start_Receive_IT+0x230>)
 80069cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80069ce:	e002      	b.n	80069d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a45      	ldr	r2, [pc, #276]	@ (8006ae8 <UART_Start_Receive_IT+0x234>)
 80069d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01a      	beq.n	8006a14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a02:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e4      	bne.n	80069de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a34:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a36:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_Start_Receive_IT+0x160>
 8006a48:	e046      	b.n	8006ad8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a52:	d107      	bne.n	8006a64 <UART_Start_Receive_IT+0x1b0>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a23      	ldr	r2, [pc, #140]	@ (8006aec <UART_Start_Receive_IT+0x238>)
 8006a60:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a62:	e002      	b.n	8006a6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a22      	ldr	r2, [pc, #136]	@ (8006af0 <UART_Start_Receive_IT+0x23c>)
 8006a68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d019      	beq.n	8006aa6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_Start_Receive_IT+0x1be>
 8006aa4:	e018      	b.n	8006ad8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f043 0320 	orr.w	r3, r3, #32
 8006aba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	378c      	adds	r7, #140	@ 0x8c
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	080074c9 	.word	0x080074c9
 8006ae8:	08007169 	.word	0x08007169
 8006aec:	08006fb1 	.word	0x08006fb1
 8006af0:	08006df9 	.word	0x08006df9

08006af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b08f      	sub	sp, #60	@ 0x3c
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	61ba      	str	r2, [r7, #24]
 8006b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6979      	ldr	r1, [r7, #20]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006b6a:	bf00      	nop
 8006b6c:	373c      	adds	r7, #60	@ 0x3c
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b095      	sub	sp, #84	@ 0x54
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e6      	bne.n	8006b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e3      	bne.n	8006bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d118      	bne.n	8006c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0310 	bic.w	r3, r3, #16
 8006c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e6      	bne.n	8006bee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c34:	bf00      	nop
 8006c36:	3754      	adds	r7, #84	@ 0x54
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b090      	sub	sp, #64	@ 0x40
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d137      	bne.n	8006cca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	623b      	str	r3, [r7, #32]
   return(result);
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c82:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cc8:	e002      	b.n	8006cd0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006cca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006ccc:	f7fa fca4 	bl	8001618 <HAL_UART_TxCpltCallback>
}
 8006cd0:	bf00      	nop
 8006cd2:	3740      	adds	r7, #64	@ 0x40
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff f99a 	bl	8006020 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d08:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1c:	2b80      	cmp	r3, #128	@ 0x80
 8006d1e:	d109      	bne.n	8006d34 <UART_DMAError+0x40>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b21      	cmp	r3, #33	@ 0x21
 8006d24:	d106      	bne.n	8006d34 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d2e:	6978      	ldr	r0, [r7, #20]
 8006d30:	f7ff fee0 	bl	8006af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d109      	bne.n	8006d56 <UART_DMAError+0x62>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b22      	cmp	r3, #34	@ 0x22
 8006d46:	d106      	bne.n	8006d56 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d50:	6978      	ldr	r0, [r7, #20]
 8006d52:	f7ff ff0f 	bl	8006b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5c:	f043 0210 	orr.w	r2, r3, #16
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d66:	6978      	ldr	r0, [r7, #20]
 8006d68:	f7ff f963 	bl	8006032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff f94d 	bl	8006032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6979      	ldr	r1, [r7, #20]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fa fc15 	bl	8001618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dee:	bf00      	nop
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b09c      	sub	sp, #112	@ 0x70
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e10:	2b22      	cmp	r3, #34	@ 0x22
 8006e12:	f040 80be 	bne.w	8006f92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e24:	b2d9      	uxtb	r1, r3
 8006e26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e30:	400a      	ands	r2, r1
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 80a1 	bne.w	8006fa2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e6      	bne.n	8006e60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a33      	ldr	r2, [pc, #204]	@ (8006fac <UART_RxISR_8BIT+0x1b4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d01f      	beq.n	8006f24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	623b      	str	r3, [r7, #32]
   return(result);
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d12e      	bne.n	8006f8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0310 	bic.w	r3, r3, #16
 8006f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d103      	bne.n	8006f7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff f85e 	bl	8006044 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f88:	e00b      	b.n	8006fa2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fb5a 	bl	8001644 <HAL_UART_RxCpltCallback>
}
 8006f90:	e007      	b.n	8006fa2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0208 	orr.w	r2, r2, #8
 8006fa0:	619a      	str	r2, [r3, #24]
}
 8006fa2:	bf00      	nop
 8006fa4:	3770      	adds	r7, #112	@ 0x70
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40008000 	.word	0x40008000

08006fb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b09c      	sub	sp, #112	@ 0x70
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fc8:	2b22      	cmp	r3, #34	@ 0x22
 8006fca:	f040 80be 	bne.w	800714a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff2:	1c9a      	adds	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 80a1 	bne.w	800715a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800702c:	667b      	str	r3, [r7, #100]	@ 0x64
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007036:	657b      	str	r3, [r7, #84]	@ 0x54
 8007038:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800703c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	663b      	str	r3, [r7, #96]	@ 0x60
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800706a:	643a      	str	r2, [r7, #64]	@ 0x40
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a33      	ldr	r2, [pc, #204]	@ (8007164 <UART_RxISR_16BIT+0x1b4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01f      	beq.n	80070dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d12e      	bne.n	8007142 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	613b      	str	r3, [r7, #16]
   return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b10      	cmp	r3, #16
 8007128:	d103      	bne.n	8007132 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fe ff82 	bl	8006044 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007140:	e00b      	b.n	800715a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa fa7e 	bl	8001644 <HAL_UART_RxCpltCallback>
}
 8007148:	e007      	b.n	800715a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0208 	orr.w	r2, r2, #8
 8007158:	619a      	str	r2, [r3, #24]
}
 800715a:	bf00      	nop
 800715c:	3770      	adds	r7, #112	@ 0x70
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40008000 	.word	0x40008000

08007168 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b0ac      	sub	sp, #176	@ 0xb0
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007176:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800719e:	2b22      	cmp	r3, #34	@ 0x22
 80071a0:	f040 8182 	bne.w	80074a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ae:	e125      	b.n	80073fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80071be:	b2d9      	uxtb	r1, r3
 80071c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ca:	400a      	ands	r2, r1
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d053      	beq.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d011      	beq.n	8007232 <UART_RxISR_8BIT_FIFOEN+0xca>
 800720e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007228:	f043 0201 	orr.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d011      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2202      	movs	r2, #2
 8007250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007258:	f043 0204 	orr.w	r2, r3, #4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d011      	beq.n	8007292 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800726e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2204      	movs	r2, #4
 8007280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007288:	f043 0202 	orr.w	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007298:	2b00      	cmp	r3, #0
 800729a:	d006      	beq.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fe fec8 	bl	8006032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 80a2 	bne.w	80073fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80072c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80072e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80072e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e4      	bne.n	80072b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80072fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007316:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007318:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800731c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e1      	bne.n	80072ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a5f      	ldr	r2, [pc, #380]	@ (80074c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d021      	beq.n	800738c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01a      	beq.n	800738c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800736a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007378:	657b      	str	r3, [r7, #84]	@ 0x54
 800737a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800737e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e4      	bne.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d130      	bne.n	80073f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	f023 0310 	bic.w	r3, r3, #16
 80073ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e4      	bne.n	800739a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d103      	bne.n	80073e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2210      	movs	r2, #16
 80073e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fe fe28 	bl	8006044 <HAL_UARTEx_RxEventCallback>
 80073f4:	e002      	b.n	80073fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fa f924 	bl	8001644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	f47f aecf 	bne.w	80071b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007418:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800741c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007420:	2b00      	cmp	r3, #0
 8007422:	d049      	beq.n	80074b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800742a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800742e:	429a      	cmp	r2, r3
 8007430:	d242      	bcs.n	80074b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	61fb      	str	r3, [r7, #28]
   return(result);
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007458:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800745c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e3      	bne.n	8007432 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a15      	ldr	r2, [pc, #84]	@ (80074c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800746e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	60bb      	str	r3, [r7, #8]
   return(result);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f043 0320 	orr.w	r3, r3, #32
 8007484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6979      	ldr	r1, [r7, #20]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e4      	bne.n	8007470 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074a6:	e007      	b.n	80074b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0208 	orr.w	r2, r2, #8
 80074b6:	619a      	str	r2, [r3, #24]
}
 80074b8:	bf00      	nop
 80074ba:	37b0      	adds	r7, #176	@ 0xb0
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40008000 	.word	0x40008000
 80074c4:	08006df9 	.word	0x08006df9

080074c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b0ae      	sub	sp, #184	@ 0xb8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fe:	2b22      	cmp	r3, #34	@ 0x22
 8007500:	f040 8186 	bne.w	8007810 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800750a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800750e:	e129      	b.n	8007764 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007522:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007526:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800752a:	4013      	ands	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007538:	1c9a      	adds	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800755a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b00      	cmp	r3, #0
 8007564:	d053      	beq.n	800760e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d011      	beq.n	8007596 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2201      	movs	r2, #1
 8007584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758c:	f043 0201 	orr.w	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80075a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2202      	movs	r2, #2
 80075b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075bc:	f043 0204 	orr.w	r2, r3, #4
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d011      	beq.n	80075f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80075d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2204      	movs	r2, #4
 80075e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ec:	f043 0202 	orr.w	r2, r3, #2
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fe fd16 	bl	8006032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 80a4 	bne.w	8007764 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800762a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800762c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800763e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007642:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e2      	bne.n	800761c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800767e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e1      	bne.n	8007656 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5f      	ldr	r2, [pc, #380]	@ (8007828 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d021      	beq.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01a      	beq.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e4      	bne.n	80076be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d130      	bne.n	800775e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007712:	f023 0310 	bic.w	r3, r3, #16
 8007716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007724:	647b      	str	r3, [r7, #68]	@ 0x44
 8007726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800772a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e4      	bne.n	8007702 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b10      	cmp	r3, #16
 8007744:	d103      	bne.n	800774e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2210      	movs	r2, #16
 800774c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fe fc74 	bl	8006044 <HAL_UARTEx_RxEventCallback>
 800775c:	e002      	b.n	8007764 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7f9 ff70 	bl	8001644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007764:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800776c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f aecb 	bne.w	8007510 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007780:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007784:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007788:	2b00      	cmp	r3, #0
 800778a:	d049      	beq.n	8007820 <UART_RxISR_16BIT_FIFOEN+0x358>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007792:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007796:	429a      	cmp	r2, r3
 8007798:	d242      	bcs.n	8007820 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	623b      	str	r3, [r7, #32]
   return(result);
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3308      	adds	r3, #8
 80077ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80077be:	633a      	str	r2, [r7, #48]	@ 0x30
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e3      	bne.n	800779a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a15      	ldr	r2, [pc, #84]	@ (800782c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80077d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f043 0320 	orr.w	r3, r3, #32
 80077ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	69b9      	ldr	r1, [r7, #24]
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	617b      	str	r3, [r7, #20]
   return(result);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e4      	bne.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800780e:	e007      	b.n	8007820 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0208 	orr.w	r2, r2, #8
 800781e:	619a      	str	r2, [r3, #24]
}
 8007820:	bf00      	nop
 8007822:	37b8      	adds	r7, #184	@ 0xb8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40008000 	.word	0x40008000
 800782c:	08006fb1 	.word	0x08006fb1

08007830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr

08007854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b088      	sub	sp, #32
 800786a:	af02      	add	r7, sp, #8
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8007882:	2302      	movs	r3, #2
 8007884:	e046      	b.n	8007914 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2224      	movs	r2, #36	@ 0x24
 8007892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f911 	bl	8007aee <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078dc:	f7f9 fafc 	bl	8000ed8 <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7fe ff16 	bl	8006722 <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e003      	b.n	800790a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	@ 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_UARTEx_EnableStopMode+0x16>
 800792e:	2302      	movs	r3, #2
 8007930:	e021      	b.n	8007976 <HAL_UARTEx_EnableStopMode+0x5a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	60bb      	str	r3, [r7, #8]
   return(result);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6979      	ldr	r1, [r7, #20]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	613b      	str	r3, [r7, #16]
   return(result);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3724      	adds	r7, #36	@ 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_UARTEx_EnableFifoMode+0x16>
 8007992:	2302      	movs	r3, #2
 8007994:	e02b      	b.n	80079ee <HAL_UARTEx_EnableFifoMode+0x6e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2224      	movs	r2, #36	@ 0x24
 80079a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0201 	bic.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80079cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8ac 	bl	8007b34 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e02d      	b.n	8007a6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2224      	movs	r2, #36	@ 0x24
 8007a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0201 	bic.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f872 	bl	8007b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e02d      	b.n	8007ae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2224      	movs	r2, #36	@ 0x24
 8007a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f834 	bl	8007b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	1d3b      	adds	r3, r7, #4
 8007af8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	893b      	ldrh	r3, [r7, #8]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8007b1c:	7abb      	ldrb	r3, [r7, #10]
 8007b1e:	061a      	lsls	r2, r3, #24
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
	...

08007b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d108      	bne.n	8007b56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b54:	e031      	b.n	8007bba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b56:	2308      	movs	r3, #8
 8007b58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	0e5b      	lsrs	r3, r3, #25
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	0f5b      	lsrs	r3, r3, #29
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	7b3a      	ldrb	r2, [r7, #12]
 8007b82:	4910      	ldr	r1, [pc, #64]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x90>)
 8007b84:	5c8a      	ldrb	r2, [r1, r2]
 8007b86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b8a:	7b3a      	ldrb	r2, [r7, #12]
 8007b8c:	490e      	ldr	r1, [pc, #56]	@ (8007bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007b8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ba0:	4908      	ldr	r1, [pc, #32]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x90>)
 8007ba2:	5c8a      	ldrb	r2, [r1, r2]
 8007ba4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ba8:	7b7a      	ldrb	r2, [r7, #13]
 8007baa:	4907      	ldr	r1, [pc, #28]	@ (8007bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007bac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bba:	bf00      	nop
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr
 8007bc4:	0800d044 	.word	0x0800d044
 8007bc8:	0800d04c 	.word	0x0800d04c

08007bcc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007bd4:	4a24      	ldr	r2, [pc, #144]	@ (8007c68 <RadioInit+0x9c>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007bda:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <RadioInit+0xa0>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007be0:	4b22      	ldr	r3, [pc, #136]	@ (8007c6c <RadioInit+0xa0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007be6:	4b21      	ldr	r3, [pc, #132]	@ (8007c6c <RadioInit+0xa0>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007bec:	4b1f      	ldr	r3, [pc, #124]	@ (8007c6c <RadioInit+0xa0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007bf2:	481f      	ldr	r0, [pc, #124]	@ (8007c70 <RadioInit+0xa4>)
 8007bf4:	f001 ffc0 	bl	8009b78 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c6c <RadioInit+0xa0>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8007c6c <RadioInit+0xa0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007c04:	f002 fa54 	bl	800a0b0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007c08:	2100      	movs	r1, #0
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f002 fe20 	bl	800a850 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007c10:	2204      	movs	r2, #4
 8007c12:	2100      	movs	r1, #0
 8007c14:	2001      	movs	r0, #1
 8007c16:	f002 fbdd 	bl	800a3d4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007c22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007c26:	f002 fb0d 	bl	800a244 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007c2a:	f000 fe99 	bl	8008960 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <RadioInit+0xa8>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007c3a:	480f      	ldr	r0, [pc, #60]	@ (8007c78 <RadioInit+0xac>)
 8007c3c:	f004 faa0 	bl	800c180 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007c40:	2300      	movs	r3, #0
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <RadioInit+0xb0>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007c4c:	480c      	ldr	r0, [pc, #48]	@ (8007c80 <RadioInit+0xb4>)
 8007c4e:	f004 fa97 	bl	800c180 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007c52:	4809      	ldr	r0, [pc, #36]	@ (8007c78 <RadioInit+0xac>)
 8007c54:	f004 fb38 	bl	800c2c8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007c58:	4809      	ldr	r0, [pc, #36]	@ (8007c80 <RadioInit+0xb4>)
 8007c5a:	f004 fb35 	bl	800c2c8 <UTIL_TIMER_Stop>
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200002d0 	.word	0x200002d0
 8007c6c:	200002d4 	.word	0x200002d4
 8007c70:	08008d55 	.word	0x08008d55
 8007c74:	08008cdd 	.word	0x08008cdd
 8007c78:	20000330 	.word	0x20000330
 8007c7c:	08008cf1 	.word	0x08008cf1
 8007c80:	20000348 	.word	0x20000348

08007c84 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007c88:	f001 ffbe 	bl	8009c08 <SUBGRF_GetOperatingMode>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b07      	cmp	r3, #7
 8007c90:	d00a      	beq.n	8007ca8 <RadioGetStatus+0x24>
 8007c92:	2b07      	cmp	r3, #7
 8007c94:	dc0a      	bgt.n	8007cac <RadioGetStatus+0x28>
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d002      	beq.n	8007ca0 <RadioGetStatus+0x1c>
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d002      	beq.n	8007ca4 <RadioGetStatus+0x20>
 8007c9e:	e005      	b.n	8007cac <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e004      	b.n	8007cae <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e002      	b.n	8007cae <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e000      	b.n	8007cae <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007cac:	2300      	movs	r3, #0
    }
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8007d68 <RadioSetModem+0xb4>)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f003 f995 	bl	800aff6 <RFW_SetRadioModem>
    switch( modem )
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d80e      	bhi.n	8007cf0 <RadioSetModem+0x3c>
 8007cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd8 <RadioSetModem+0x24>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007d33 	.word	0x08007d33
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d4f 	.word	0x08007d4f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007cf0:	2003      	movs	r0, #3
 8007cf2:	f002 fb49 	bl	800a388 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d68 <RadioSetModem+0xb4>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	735a      	strb	r2, [r3, #13]
        break;
 8007cfc:	e02f      	b.n	8007d5e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007cfe:	2000      	movs	r0, #0
 8007d00:	f002 fb42 	bl	800a388 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d04:	4b18      	ldr	r3, [pc, #96]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	735a      	strb	r2, [r3, #13]
        break;
 8007d0a:	e028      	b.n	8007d5e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f002 fb3b 	bl	800a388 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007d12:	4b15      	ldr	r3, [pc, #84]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d14:	7b5a      	ldrb	r2, [r3, #13]
 8007d16:	4b14      	ldr	r3, [pc, #80]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d18:	7b1b      	ldrb	r3, [r3, #12]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d01e      	beq.n	8007d5c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d20:	7b1a      	ldrb	r2, [r3, #12]
 8007d22:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d24:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d28:	7b5b      	ldrb	r3, [r3, #13]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 ffa0 	bl	8008c70 <RadioSetPublicNetwork>
        }
        break;
 8007d30:	e014      	b.n	8007d5c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007d32:	2002      	movs	r0, #2
 8007d34:	f002 fb28 	bl	800a388 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	735a      	strb	r2, [r3, #13]
        break;
 8007d3e:	e00e      	b.n	8007d5e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007d40:	2002      	movs	r0, #2
 8007d42:	f002 fb21 	bl	800a388 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d46:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	735a      	strb	r2, [r3, #13]
        break;
 8007d4c:	e007      	b.n	8007d5e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f002 fb1a 	bl	800a388 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d54:	4b04      	ldr	r3, [pc, #16]	@ (8007d68 <RadioSetModem+0xb4>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	735a      	strb	r2, [r3, #13]
        break;
 8007d5a:	e000      	b.n	8007d5e <RadioSetModem+0xaa>
        break;
 8007d5c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	200002d4 	.word	0x200002d4

08007d6c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f002 fac1 	bl	800a2fc <SUBGRF_SetRfFrequency>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b090      	sub	sp, #64	@ 0x40
 8007d86:	af0a      	add	r7, sp, #40	@ 0x28
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007d9e:	f000 fdf2 	bl	8008986 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007da2:	2000      	movs	r0, #0
 8007da4:	f7ff ff86 	bl	8007cb4 <RadioSetModem>

    RadioSetChannel( freq );
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff ffdf 	bl	8007d6c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007dae:	2301      	movs	r3, #1
 8007db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db2:	2300      	movs	r3, #0
 8007db4:	9308      	str	r3, [sp, #32]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9302      	str	r3, [sp, #8]
 8007dce:	2303      	movs	r3, #3
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	2000      	movs	r0, #0
 8007de0:	f000 f83c 	bl	8007e5c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007de4:	2000      	movs	r0, #0
 8007de6:	f000 fdd5 	bl	8008994 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007dea:	f000 ff6f 	bl	8008ccc <RadioGetWakeupTime>
 8007dee:	4603      	mov	r3, r0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f9 f885 	bl	8000f00 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007df6:	f004 fb81 	bl	800c4fc <UTIL_TIMER_GetCurrentTime>
 8007dfa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007dfc:	e00d      	b.n	8007e1a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f000 feb6 	bl	8008b70 <RadioRssi>
 8007e04:	4603      	mov	r3, r0
 8007e06:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007e08:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	dd02      	ble.n	8007e1a <RadioIsChannelFree+0x98>
        {
            status = false;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]
            break;
 8007e18:	e006      	b.n	8007e28 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f004 fb80 	bl	800c520 <UTIL_TIMER_GetElapsedTime>
 8007e20:	4602      	mov	r2, r0
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d8ea      	bhi.n	8007dfe <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007e28:	f000 fdad 	bl	8008986 <RadioStandby>

    return status;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007e40:	2300      	movs	r3, #0
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	2000      	movs	r0, #0
 8007e48:	f002 f9fc 	bl	800a244 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007e4c:	f001 ffad 	bl	8009daa <SUBGRF_GetRandom>
 8007e50:	6078      	str	r0, [r7, #4]

    return rnd;
 8007e52:	687b      	ldr	r3, [r7, #4]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	461a      	mov	r2, r3
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007e70:	4ab9      	ldr	r2, [pc, #740]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007e72:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007e76:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007e78:	f003 f87b 	bl	800af72 <RFW_DeInit>
    if( rxContinuous == true )
 8007e7c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8007e88:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007e90:	4ab2      	ldr	r2, [pc, #712]	@ (800815c <RadioSetRxConfig+0x300>)
 8007e92:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007e96:	7013      	strb	r3, [r2, #0]
 8007e98:	e002      	b.n	8007ea0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007e9a:	4bb0      	ldr	r3, [pc, #704]	@ (800815c <RadioSetRxConfig+0x300>)
 8007e9c:	22ff      	movs	r2, #255	@ 0xff
 8007e9e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d009      	beq.n	8007eba <RadioSetRxConfig+0x5e>
 8007ea6:	2b05      	cmp	r3, #5
 8007ea8:	f300 81d7 	bgt.w	800825a <RadioSetRxConfig+0x3fe>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80bf 	beq.w	8008030 <RadioSetRxConfig+0x1d4>
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	f000 8124 	beq.w	8008100 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007eb8:	e1cf      	b.n	800825a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007eba:	2001      	movs	r0, #1
 8007ebc:	f002 f8ba 	bl	800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ec0:	4ba5      	ldr	r3, [pc, #660]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007ec8:	4aa3      	ldr	r2, [pc, #652]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007ece:	4ba2      	ldr	r3, [pc, #648]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007ed0:	2209      	movs	r2, #9
 8007ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007ed8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007edc:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007ede:	68b8      	ldr	r0, [r7, #8]
 8007ee0:	f002 ff7a 	bl	800add8 <SUBGRF_GetFskBandwidthRegValue>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4b9b      	ldr	r3, [pc, #620]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007eee:	4b9a      	ldr	r3, [pc, #616]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007ef4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	4b97      	ldr	r3, [pc, #604]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007efc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007efe:	4b96      	ldr	r3, [pc, #600]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007f04:	4b94      	ldr	r3, [pc, #592]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f06:	2210      	movs	r2, #16
 8007f08:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007f0a:	4b93      	ldr	r3, [pc, #588]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007f10:	4b91      	ldr	r3, [pc, #580]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007f16:	4b91      	ldr	r3, [pc, #580]	@ (800815c <RadioSetRxConfig+0x300>)
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f1c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007f1e:	4b8e      	ldr	r3, [pc, #568]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007f24:	4b8c      	ldr	r3, [pc, #560]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007f2a:	2005      	movs	r0, #5
 8007f2c:	f7ff fec2 	bl	8007cb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007f30:	488b      	ldr	r0, [pc, #556]	@ (8008160 <RadioSetRxConfig+0x304>)
 8007f32:	f002 fb1d 	bl	800a570 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f36:	488b      	ldr	r0, [pc, #556]	@ (8008164 <RadioSetRxConfig+0x308>)
 8007f38:	f002 fbec 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007f3c:	4a8a      	ldr	r2, [pc, #552]	@ (8008168 <RadioSetRxConfig+0x30c>)
 8007f3e:	f107 031c 	add.w	r3, r7, #28
 8007f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f46:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f4a:	f107 031c 	add.w	r3, r7, #28
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fea9 	bl	8009ca6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007f54:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007f58:	f001 fef4 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007f5c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007f60:	f000 fe24 	bl	8008bac <RadioRead>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007f80:	f000 fe02 	bl	8008b88 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007f84:	2104      	movs	r1, #4
 8007f86:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8007f8a:	f000 fdfd 	bl	8008b88 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007f8e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007f92:	f000 fe0b 	bl	8008bac <RadioRead>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fa0:	f023 031c 	bic.w	r3, r3, #28
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fac:	f043 0308 	orr.w	r3, r3, #8
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007fb8:	f000 fde6 	bl	8008b88 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007fbc:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007fc0:	f000 fdf4 	bl	8008bac <RadioRead>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fce:	f023 0318 	bic.w	r3, r3, #24
 8007fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fda:	f043 0318 	orr.w	r3, r3, #24
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007fe6:	f000 fdcf 	bl	8008b88 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007fea:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007fee:	f000 fddd 	bl	8008bac <RadioRead>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008008:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800800c:	b2db      	uxtb	r3, r3
 800800e:	4619      	mov	r1, r3
 8008010:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008014:	f000 fdb8 	bl	8008b88 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008018:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800801a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800801e:	fb02 f303 	mul.w	r3, r2, r3
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	fbb2 f3f3 	udiv	r3, r2, r3
 800802a:	4a4b      	ldr	r2, [pc, #300]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800802c:	6093      	str	r3, [r2, #8]
            break;
 800802e:	e115      	b.n	800825c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008030:	2000      	movs	r0, #0
 8008032:	f001 ffff 	bl	800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008036:	4b48      	ldr	r3, [pc, #288]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800803e:	4a46      	ldr	r2, [pc, #280]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008044:	4b44      	ldr	r3, [pc, #272]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008046:	220b      	movs	r2, #11
 8008048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f002 fec3 	bl	800add8 <SUBGRF_GetFskBandwidthRegValue>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	4b40      	ldr	r3, [pc, #256]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800805c:	4b3e      	ldr	r3, [pc, #248]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800805e:	2200      	movs	r2, #0
 8008060:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008062:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	b29a      	uxth	r2, r3
 8008068:	4b3b      	ldr	r3, [pc, #236]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800806a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800806c:	4b3a      	ldr	r3, [pc, #232]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800806e:	2204      	movs	r2, #4
 8008070:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008072:	4b39      	ldr	r3, [pc, #228]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008074:	2218      	movs	r2, #24
 8008076:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008078:	4b37      	ldr	r3, [pc, #220]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800807a:	2200      	movs	r2, #0
 800807c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800807e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008082:	f083 0301 	eor.w	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	4b33      	ldr	r3, [pc, #204]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800808c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800808e:	4b33      	ldr	r3, [pc, #204]	@ (800815c <RadioSetRxConfig+0x300>)
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	4b31      	ldr	r3, [pc, #196]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008094:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008096:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800809e:	4b2e      	ldr	r3, [pc, #184]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 80080a0:	22f2      	movs	r2, #242	@ 0xf2
 80080a2:	75da      	strb	r2, [r3, #23]
 80080a4:	e002      	b.n	80080ac <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80080a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80080ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80080b2:	f000 fc68 	bl	8008986 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7ff fdfc 	bl	8007cb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80080bc:	4828      	ldr	r0, [pc, #160]	@ (8008160 <RadioSetRxConfig+0x304>)
 80080be:	f002 fa57 	bl	800a570 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080c2:	4828      	ldr	r0, [pc, #160]	@ (8008164 <RadioSetRxConfig+0x308>)
 80080c4:	f002 fb26 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80080c8:	4a28      	ldr	r2, [pc, #160]	@ (800816c <RadioSetRxConfig+0x310>)
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 fde3 	bl	8009ca6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80080e0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80080e4:	f001 fe2e 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80080e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80080ea:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fa:	4a17      	ldr	r2, [pc, #92]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 80080fc:	6093      	str	r3, [r2, #8]
            break;
 80080fe:	e0ad      	b.n	800825c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008100:	2000      	movs	r0, #0
 8008102:	f001 ff97 	bl	800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008106:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b11      	ldr	r3, [pc, #68]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008118:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <RadioSetRxConfig+0x314>)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008126:	4a0c      	ldr	r2, [pc, #48]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <RadioSetRxConfig+0x2e4>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b0b      	cmp	r3, #11
 8008138:	d008      	beq.n	800814c <RadioSetRxConfig+0x2f0>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b0c      	cmp	r3, #12
 800813e:	d005      	beq.n	800814c <RadioSetRxConfig+0x2f0>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d116      	bne.n	8008174 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d113      	bne.n	8008174 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <RadioSetRxConfig+0x2fc>)
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008154:	e012      	b.n	800817c <RadioSetRxConfig+0x320>
 8008156:	bf00      	nop
 8008158:	200002d4 	.word	0x200002d4
 800815c:	20000008 	.word	0x20000008
 8008160:	2000030c 	.word	0x2000030c
 8008164:	200002e2 	.word	0x200002e2
 8008168:	0800cc80 	.word	0x0800cc80
 800816c:	0800cc88 	.word	0x0800cc88
 8008170:	0800d0e0 	.word	0x0800d0e0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008174:	4b3b      	ldr	r3, [pc, #236]	@ (8008264 <RadioSetRxConfig+0x408>)
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800817c:	4b39      	ldr	r3, [pc, #228]	@ (8008264 <RadioSetRxConfig+0x408>)
 800817e:	2201      	movs	r2, #1
 8008180:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008182:	4b38      	ldr	r3, [pc, #224]	@ (8008264 <RadioSetRxConfig+0x408>)
 8008184:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008188:	2b05      	cmp	r3, #5
 800818a:	d004      	beq.n	8008196 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800818c:	4b35      	ldr	r3, [pc, #212]	@ (8008264 <RadioSetRxConfig+0x408>)
 800818e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008192:	2b06      	cmp	r3, #6
 8008194:	d10a      	bne.n	80081ac <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008196:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008198:	2b0b      	cmp	r3, #11
 800819a:	d803      	bhi.n	80081a4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800819c:	4b31      	ldr	r3, [pc, #196]	@ (8008264 <RadioSetRxConfig+0x408>)
 800819e:	220c      	movs	r2, #12
 80081a0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80081a2:	e006      	b.n	80081b2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80081a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80081a8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80081aa:	e002      	b.n	80081b2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80081ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80081b0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80081b2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80081b6:	4b2b      	ldr	r3, [pc, #172]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081b8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80081ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008268 <RadioSetRxConfig+0x40c>)
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	4b29      	ldr	r3, [pc, #164]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081c0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80081c2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081c8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80081cc:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80081d0:	4b24      	ldr	r3, [pc, #144]	@ (8008264 <RadioSetRxConfig+0x408>)
 80081d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80081d6:	f000 fbd6 	bl	8008986 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80081da:	2001      	movs	r0, #1
 80081dc:	f7ff fd6a 	bl	8007cb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80081e0:	4822      	ldr	r0, [pc, #136]	@ (800826c <RadioSetRxConfig+0x410>)
 80081e2:	f002 f9c5 	bl	800a570 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80081e6:	4822      	ldr	r0, [pc, #136]	@ (8008270 <RadioSetRxConfig+0x414>)
 80081e8:	f002 fa94 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80081ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 ff2e 	bl	800a052 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80081f6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80081fa:	f002 fbe7 	bl	800a9cc <SUBGRF_ReadRegister>
 80081fe:	4603      	mov	r3, r0
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2db      	uxtb	r3, r3
 8008206:	4619      	mov	r1, r3
 8008208:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800820c:	f002 fbca 	bl	800a9a4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008210:	4b14      	ldr	r3, [pc, #80]	@ (8008264 <RadioSetRxConfig+0x408>)
 8008212:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008216:	2b01      	cmp	r3, #1
 8008218:	d10d      	bne.n	8008236 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800821a:	f240 7036 	movw	r0, #1846	@ 0x736
 800821e:	f002 fbd5 	bl	800a9cc <SUBGRF_ReadRegister>
 8008222:	4603      	mov	r3, r0
 8008224:	f023 0304 	bic.w	r3, r3, #4
 8008228:	b2db      	uxtb	r3, r3
 800822a:	4619      	mov	r1, r3
 800822c:	f240 7036 	movw	r0, #1846	@ 0x736
 8008230:	f002 fbb8 	bl	800a9a4 <SUBGRF_WriteRegister>
 8008234:	e00c      	b.n	8008250 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008236:	f240 7036 	movw	r0, #1846	@ 0x736
 800823a:	f002 fbc7 	bl	800a9cc <SUBGRF_ReadRegister>
 800823e:	4603      	mov	r3, r0
 8008240:	f043 0304 	orr.w	r3, r3, #4
 8008244:	b2db      	uxtb	r3, r3
 8008246:	4619      	mov	r1, r3
 8008248:	f240 7036 	movw	r0, #1846	@ 0x736
 800824c:	f002 fbaa 	bl	800a9a4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008250:	4b04      	ldr	r3, [pc, #16]	@ (8008264 <RadioSetRxConfig+0x408>)
 8008252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008256:	609a      	str	r2, [r3, #8]
            break;
 8008258:	e000      	b.n	800825c <RadioSetRxConfig+0x400>
            break;
 800825a:	bf00      	nop
    }
}
 800825c:	bf00      	nop
 800825e:	3728      	adds	r7, #40	@ 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200002d4 	.word	0x200002d4
 8008268:	20000008 	.word	0x20000008
 800826c:	2000030c 	.word	0x2000030c
 8008270:	200002e2 	.word	0x200002e2

08008274 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60ba      	str	r2, [r7, #8]
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	460b      	mov	r3, r1
 8008284:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008286:	f002 fe74 	bl	800af72 <RFW_DeInit>
    switch( modem )
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b04      	cmp	r3, #4
 800828e:	f000 80c7 	beq.w	8008420 <RadioSetTxConfig+0x1ac>
 8008292:	2b04      	cmp	r3, #4
 8008294:	f300 80d6 	bgt.w	8008444 <RadioSetTxConfig+0x1d0>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <RadioSetTxConfig+0x2e>
 800829c:	2b01      	cmp	r3, #1
 800829e:	d059      	beq.n	8008354 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80082a0:	e0d0      	b.n	8008444 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80082a2:	4b77      	ldr	r3, [pc, #476]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80082aa:	4a75      	ldr	r2, [pc, #468]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80082b0:	4b73      	ldr	r3, [pc, #460]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082b2:	220b      	movs	r2, #11
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f002 fd8d 	bl	800add8 <SUBGRF_GetFskBandwidthRegValue>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80082c8:	4a6d      	ldr	r2, [pc, #436]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80082ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80082d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	b29a      	uxth	r2, r3
 80082da:	4b69      	ldr	r3, [pc, #420]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082dc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80082de:	4b68      	ldr	r3, [pc, #416]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082e0:	2204      	movs	r2, #4
 80082e2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80082e4:	4b66      	ldr	r3, [pc, #408]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082e6:	2218      	movs	r2, #24
 80082e8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80082ea:	4b65      	ldr	r3, [pc, #404]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80082f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80082f4:	f083 0301 	eor.w	r3, r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	4b60      	ldr	r3, [pc, #384]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80082fe:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008300:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008308:	4b5d      	ldr	r3, [pc, #372]	@ (8008480 <RadioSetTxConfig+0x20c>)
 800830a:	22f2      	movs	r2, #242	@ 0xf2
 800830c:	75da      	strb	r2, [r3, #23]
 800830e:	e002      	b.n	8008316 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008310:	4b5b      	ldr	r3, [pc, #364]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008312:	2201      	movs	r2, #1
 8008314:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008316:	4b5a      	ldr	r3, [pc, #360]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008318:	2201      	movs	r2, #1
 800831a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800831c:	f000 fb33 	bl	8008986 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008320:	2000      	movs	r0, #0
 8008322:	f7ff fcc7 	bl	8007cb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008326:	4857      	ldr	r0, [pc, #348]	@ (8008484 <RadioSetTxConfig+0x210>)
 8008328:	f002 f922 	bl	800a570 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800832c:	4856      	ldr	r0, [pc, #344]	@ (8008488 <RadioSetTxConfig+0x214>)
 800832e:	f002 f9f1 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008332:	4a56      	ldr	r2, [pc, #344]	@ (800848c <RadioSetTxConfig+0x218>)
 8008334:	f107 0310 	add.w	r3, r7, #16
 8008338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800833c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008340:	f107 0310 	add.w	r3, r7, #16
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fcae 	bl	8009ca6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800834a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800834e:	f001 fcf9 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
            break;
 8008352:	e078      	b.n	8008446 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008354:	4b4a      	ldr	r3, [pc, #296]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	4b47      	ldr	r3, [pc, #284]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008366:	4a4a      	ldr	r2, [pc, #296]	@ (8008490 <RadioSetTxConfig+0x21c>)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	4b44      	ldr	r3, [pc, #272]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008374:	4a42      	ldr	r2, [pc, #264]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008376:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800837a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <RadioSetTxConfig+0x11c>
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	2b0b      	cmp	r3, #11
 8008388:	d008      	beq.n	800839c <RadioSetTxConfig+0x128>
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	2b0c      	cmp	r3, #12
 800838e:	d005      	beq.n	800839c <RadioSetTxConfig+0x128>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d107      	bne.n	80083a6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d104      	bne.n	80083a6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800839c:	4b38      	ldr	r3, [pc, #224]	@ (8008480 <RadioSetTxConfig+0x20c>)
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80083a4:	e003      	b.n	80083ae <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80083a6:	4b36      	ldr	r3, [pc, #216]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80083ae:	4b34      	ldr	r3, [pc, #208]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80083b4:	4b32      	ldr	r3, [pc, #200]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d004      	beq.n	80083c8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80083be:	4b30      	ldr	r3, [pc, #192]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80083c4:	2b06      	cmp	r3, #6
 80083c6:	d10a      	bne.n	80083de <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80083c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083ca:	2b0b      	cmp	r3, #11
 80083cc:	d803      	bhi.n	80083d6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80083ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083d0:	220c      	movs	r2, #12
 80083d2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80083d4:	e006      	b.n	80083e4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083da:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80083dc:	e002      	b.n	80083e4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80083de:	4a28      	ldr	r2, [pc, #160]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083e2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80083e4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80083e8:	4b25      	ldr	r3, [pc, #148]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083ea:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80083ec:	4b29      	ldr	r3, [pc, #164]	@ (8008494 <RadioSetTxConfig+0x220>)
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	4b23      	ldr	r3, [pc, #140]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083f2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80083f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80083f8:	4b21      	ldr	r3, [pc, #132]	@ (8008480 <RadioSetTxConfig+0x20c>)
 80083fa:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80083fe:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008402:	4b1f      	ldr	r3, [pc, #124]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008408:	f000 fabd 	bl	8008986 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800840c:	2001      	movs	r0, #1
 800840e:	f7ff fc51 	bl	8007cb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008412:	481c      	ldr	r0, [pc, #112]	@ (8008484 <RadioSetTxConfig+0x210>)
 8008414:	f002 f8ac 	bl	800a570 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008418:	481b      	ldr	r0, [pc, #108]	@ (8008488 <RadioSetTxConfig+0x214>)
 800841a:	f002 f97b 	bl	800a714 <SUBGRF_SetPacketParams>
            break;
 800841e:	e012      	b.n	8008446 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008420:	2004      	movs	r0, #4
 8008422:	f7ff fc47 	bl	8007cb4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008426:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800842e:	4a14      	ldr	r2, [pc, #80]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008434:	4b12      	ldr	r3, [pc, #72]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008436:	2216      	movs	r2, #22
 8008438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800843c:	4811      	ldr	r0, [pc, #68]	@ (8008484 <RadioSetTxConfig+0x210>)
 800843e:	f002 f897 	bl	800a570 <SUBGRF_SetModulationParams>
            break;
 8008442:	e000      	b.n	8008446 <RadioSetTxConfig+0x1d2>
            break;
 8008444:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800844a:	4618      	mov	r0, r3
 800844c:	f002 fbc6 	bl	800abdc <SUBGRF_SetRfTxPower>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008456:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800845a:	210e      	movs	r1, #14
 800845c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008460:	f002 faa0 	bl	800a9a4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008464:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008466:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800846a:	4618      	mov	r0, r3
 800846c:	f002 fd95 	bl	800af9a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008470:	4a03      	ldr	r2, [pc, #12]	@ (8008480 <RadioSetTxConfig+0x20c>)
 8008472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008474:	6053      	str	r3, [r2, #4]
}
 8008476:	bf00      	nop
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200002d4 	.word	0x200002d4
 8008484:	2000030c 	.word	0x2000030c
 8008488:	200002e2 	.word	0x200002e2
 800848c:	0800cc88 	.word	0x0800cc88
 8008490:	0800d0e0 	.word	0x0800d0e0
 8008494:	20000008 	.word	0x20000008

08008498 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
    return true;
 80084a0:	2301      	movs	r3, #1
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	2b0a      	cmp	r3, #10
 80084be:	d83e      	bhi.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
 80084c0:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084f5 	.word	0x080084f5
 80084cc:	08008505 	.word	0x08008505
 80084d0:	08008515 	.word	0x08008515
 80084d4:	08008525 	.word	0x08008525
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008533 	.word	0x08008533
 80084e0:	08008539 	.word	0x08008539
 80084e4:	0800853f 	.word	0x0800853f
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	0800850d 	.word	0x0800850d
 80084f0:	0800851d 	.word	0x0800851d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80084f4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80084f8:	60fb      	str	r3, [r7, #12]
        break;
 80084fa:	e020      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80084fc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8008500:	60fb      	str	r3, [r7, #12]
        break;
 8008502:	e01c      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008504:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8008508:	60fb      	str	r3, [r7, #12]
        break;
 800850a:	e018      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800850c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8008510:	60fb      	str	r3, [r7, #12]
        break;
 8008512:	e014      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008514:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8008518:	60fb      	str	r3, [r7, #12]
        break;
 800851a:	e010      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800851c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8008520:	60fb      	str	r3, [r7, #12]
        break;
 8008522:	e00c      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008524:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008528:	60fb      	str	r3, [r7, #12]
        break;
 800852a:	e008      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800852c:	4b07      	ldr	r3, [pc, #28]	@ (800854c <RadioGetLoRaBandwidthInHz+0xa0>)
 800852e:	60fb      	str	r3, [r7, #12]
        break;
 8008530:	e005      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008532:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008534:	60fb      	str	r3, [r7, #12]
        break;
 8008536:	e002      	b.n	800853e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <RadioGetLoRaBandwidthInHz+0xa8>)
 800853a:	60fb      	str	r3, [r7, #12]
        break;
 800853c:	bf00      	nop
    }

    return bandwidthInHz;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	0001e848 	.word	0x0001e848
 8008550:	0003d090 	.word	0x0003d090
 8008554:	0007a120 	.word	0x0007a120

08008558 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	4603      	mov	r3, r0
 8008568:	70fb      	strb	r3, [r7, #3]
 800856a:	460b      	mov	r3, r1
 800856c:	803b      	strh	r3, [r7, #0]
 800856e:	4613      	mov	r3, r2
 8008570:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008572:	883b      	ldrh	r3, [r7, #0]
 8008574:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008576:	78ba      	ldrb	r2, [r7, #2]
 8008578:	f082 0201 	eor.w	r2, r2, #1
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	2a00      	cmp	r2, #0
 8008580:	d001      	beq.n	8008586 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008582:	2208      	movs	r2, #8
 8008584:	e000      	b.n	8008588 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008586:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008588:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800858a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800858e:	7c3b      	ldrb	r3, [r7, #16]
 8008590:	7d39      	ldrb	r1, [r7, #20]
 8008592:	2900      	cmp	r1, #0
 8008594:	d001      	beq.n	800859a <RadioGetGfskTimeOnAirNumerator+0x42>
 8008596:	2102      	movs	r1, #2
 8008598:	e000      	b.n	800859c <RadioGetGfskTimeOnAirNumerator+0x44>
 800859a:	2100      	movs	r1, #0
 800859c:	440b      	add	r3, r1
 800859e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80085a0:	4413      	add	r3, r2
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b08b      	sub	sp, #44	@ 0x2c
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4611      	mov	r1, r2
 80085b8:	461a      	mov	r2, r3
 80085ba:	460b      	mov	r3, r1
 80085bc:	71fb      	strb	r3, [r7, #7]
 80085be:	4613      	mov	r3, r2
 80085c0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	3304      	adds	r3, #4
 80085c6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d002      	beq.n	80085da <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b06      	cmp	r3, #6
 80085d8:	d104      	bne.n	80085e4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80085da:	88bb      	ldrh	r3, [r7, #4]
 80085dc:	2b0b      	cmp	r3, #11
 80085de:	d801      	bhi.n	80085e4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80085e0:	230c      	movs	r3, #12
 80085e2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b0b      	cmp	r3, #11
 80085ee:	d008      	beq.n	8008602 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b0c      	cmp	r3, #12
 80085f4:	d005      	beq.n	8008602 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d105      	bne.n	8008608 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b0c      	cmp	r3, #12
 8008600:	d102      	bne.n	8008608 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008608:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800860c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800860e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008612:	2a00      	cmp	r2, #0
 8008614:	d001      	beq.n	800861a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008616:	2210      	movs	r2, #16
 8008618:	e000      	b.n	800861c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800861a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800861c:	4413      	add	r3, r2
 800861e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008624:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008626:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800862a:	2a00      	cmp	r2, #0
 800862c:	d001      	beq.n	8008632 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800862e:	2200      	movs	r2, #0
 8008630:	e000      	b.n	8008634 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008632:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008634:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008636:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b06      	cmp	r3, #6
 800863c:	d803      	bhi.n	8008646 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	623b      	str	r3, [r7, #32]
 8008644:	e00e      	b.n	8008664 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	3308      	adds	r3, #8
 800864a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800864c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	3b02      	subs	r3, #2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	623b      	str	r3, [r7, #32]
 800865c:	e002      	b.n	8008664 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	2b00      	cmp	r3, #0
 8008668:	da01      	bge.n	800866e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	4413      	add	r3, r2
 8008674:	1e5a      	subs	r2, r3, #1
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	fb92 f3f3 	sdiv	r3, r2, r3
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	fb03 f202 	mul.w	r2, r3, r2
 8008682:	88bb      	ldrh	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
    int32_t intermediate =
 8008686:	330c      	adds	r3, #12
 8008688:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b06      	cmp	r3, #6
 800868e:	d802      	bhi.n	8008696 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	3302      	adds	r3, #2
 8008694:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3b02      	subs	r3, #2
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	372c      	adds	r7, #44	@ 0x2c
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
	...

080086b0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	@ 0x28
 80086b4:	af04      	add	r7, sp, #16
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	461a      	mov	r2, r3
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	4613      	mov	r3, r2
 80086c2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]

    switch( modem )
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <RadioTimeOnAir+0x28>
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d017      	beq.n	8008706 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80086d6:	e035      	b.n	8008744 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80086d8:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80086dc:	8c3a      	ldrh	r2, [r7, #32]
 80086de:	7bb9      	ldrb	r1, [r7, #14]
 80086e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4603      	mov	r3, r0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ff32 	bl	8008558 <RadioGetGfskTimeOnAirNumerator>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	613b      	str	r3, [r7, #16]
        break;
 8008704:	e01e      	b.n	8008744 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008706:	8c39      	ldrh	r1, [r7, #32]
 8008708:	7bba      	ldrb	r2, [r7, #14]
 800870a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	460b      	mov	r3, r1
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	68b8      	ldr	r0, [r7, #8]
 8008722:	f7ff ff43 	bl	80085ac <RadioGetLoRaTimeOnAirNumerator>
 8008726:	4603      	mov	r3, r0
 8008728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800872c:	fb02 f303 	mul.w	r3, r2, r3
 8008730:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008732:	4a0a      	ldr	r2, [pc, #40]	@ (800875c <RadioTimeOnAir+0xac>)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4413      	add	r3, r2
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff feb6 	bl	80084ac <RadioGetLoRaBandwidthInHz>
 8008740:	6138      	str	r0, [r7, #16]
        break;
 8008742:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	1e5a      	subs	r2, r3, #1
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	0800d0e0 	.word	0x0800d0e0

08008760 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800876c:	2300      	movs	r3, #0
 800876e:	2200      	movs	r2, #0
 8008770:	f240 2101 	movw	r1, #513	@ 0x201
 8008774:	f240 2001 	movw	r0, #513	@ 0x201
 8008778:	f001 fd64 	bl	800a244 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800877c:	4b73      	ldr	r3, [pc, #460]	@ (800894c <RadioSend+0x1ec>)
 800877e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008782:	2101      	movs	r1, #1
 8008784:	4618      	mov	r0, r3
 8008786:	f002 fa01 	bl	800ab8c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800878a:	4b70      	ldr	r3, [pc, #448]	@ (800894c <RadioSend+0x1ec>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d112      	bne.n	80087b8 <RadioSend+0x58>
 8008792:	4b6e      	ldr	r3, [pc, #440]	@ (800894c <RadioSend+0x1ec>)
 8008794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008798:	2b06      	cmp	r3, #6
 800879a:	d10d      	bne.n	80087b8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800879c:	f640 0089 	movw	r0, #2185	@ 0x889
 80087a0:	f002 f914 	bl	800a9cc <SUBGRF_ReadRegister>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f023 0304 	bic.w	r3, r3, #4
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	f640 0089 	movw	r0, #2185	@ 0x889
 80087b2:	f002 f8f7 	bl	800a9a4 <SUBGRF_WriteRegister>
 80087b6:	e00c      	b.n	80087d2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80087b8:	f640 0089 	movw	r0, #2185	@ 0x889
 80087bc:	f002 f906 	bl	800a9cc <SUBGRF_ReadRegister>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f043 0304 	orr.w	r3, r3, #4
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	4619      	mov	r1, r3
 80087ca:	f640 0089 	movw	r0, #2185	@ 0x889
 80087ce:	f002 f8e9 	bl	800a9a4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80087d2:	4b5e      	ldr	r3, [pc, #376]	@ (800894c <RadioSend+0x1ec>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	f200 80a8 	bhi.w	800892c <RadioSend+0x1cc>
 80087dc:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <RadioSend+0x84>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008813 	.word	0x08008813
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	08008813 	.word	0x08008813
 80087f0:	08008875 	.word	0x08008875
 80087f4:	08008895 	.word	0x08008895
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80087f8:	4a54      	ldr	r2, [pc, #336]	@ (800894c <RadioSend+0x1ec>)
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087fe:	4854      	ldr	r0, [pc, #336]	@ (8008950 <RadioSend+0x1f0>)
 8008800:	f001 ff88 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	2200      	movs	r2, #0
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fa38 	bl	8009c80 <SUBGRF_SendPayload>
            break;
 8008810:	e08d      	b.n	800892e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008812:	f002 fbb4 	bl	800af7e <RFW_Is_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11e      	bne.n	800885a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800881c:	f107 020d 	add.w	r2, r7, #13
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f002 fbc2 	bl	800afae <RFW_TransmitInit>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10c      	bne.n	800884a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008830:	7b7a      	ldrb	r2, [r7, #13]
 8008832:	4b46      	ldr	r3, [pc, #280]	@ (800894c <RadioSend+0x1ec>)
 8008834:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008836:	4846      	ldr	r0, [pc, #280]	@ (8008950 <RadioSend+0x1f0>)
 8008838:	f001 ff6c 	bl	800a714 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800883c:	7b7b      	ldrb	r3, [r7, #13]
 800883e:	2200      	movs	r2, #0
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fa1c 	bl	8009c80 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008848:	e071      	b.n	800892e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800884a:	4b42      	ldr	r3, [pc, #264]	@ (8008954 <RadioSend+0x1f4>)
 800884c:	2201      	movs	r2, #1
 800884e:	2100      	movs	r1, #0
 8008850:	2002      	movs	r0, #2
 8008852:	f003 ff31 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8008856:	2303      	movs	r3, #3
 8008858:	e073      	b.n	8008942 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800885a:	4a3c      	ldr	r2, [pc, #240]	@ (800894c <RadioSend+0x1ec>)
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008860:	483b      	ldr	r0, [pc, #236]	@ (8008950 <RadioSend+0x1f0>)
 8008862:	f001 ff57 	bl	800a714 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	2200      	movs	r2, #0
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fa07 	bl	8009c80 <SUBGRF_SendPayload>
            break;
 8008872:	e05c      	b.n	800892e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008874:	4b35      	ldr	r3, [pc, #212]	@ (800894c <RadioSend+0x1ec>)
 8008876:	2202      	movs	r2, #2
 8008878:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800887a:	4a34      	ldr	r2, [pc, #208]	@ (800894c <RadioSend+0x1ec>)
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008880:	4833      	ldr	r0, [pc, #204]	@ (8008950 <RadioSend+0x1f0>)
 8008882:	f001 ff47 	bl	800a714 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	2200      	movs	r2, #0
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f9f7 	bl	8009c80 <SUBGRF_SendPayload>
            break;
 8008892:	e04c      	b.n	800892e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	461a      	mov	r2, r3
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	482f      	ldr	r0, [pc, #188]	@ (8008958 <RadioSend+0x1f8>)
 800889c:	f000 fcca 	bl	8009234 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80088a0:	4b2a      	ldr	r3, [pc, #168]	@ (800894c <RadioSend+0x1ec>)
 80088a2:	2202      	movs	r2, #2
 80088a4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	3301      	adds	r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	4b27      	ldr	r3, [pc, #156]	@ (800894c <RadioSend+0x1ec>)
 80088ae:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088b0:	4827      	ldr	r0, [pc, #156]	@ (8008950 <RadioSend+0x1f0>)
 80088b2:	f001 ff2f 	bl	800a714 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80088b6:	2100      	movs	r1, #0
 80088b8:	20f1      	movs	r0, #241	@ 0xf1
 80088ba:	f000 f965 	bl	8008b88 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80088be:	2100      	movs	r1, #0
 80088c0:	20f0      	movs	r0, #240	@ 0xf0
 80088c2:	f000 f961 	bl	8008b88 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80088c6:	4b21      	ldr	r3, [pc, #132]	@ (800894c <RadioSend+0x1ec>)
 80088c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ca:	2b64      	cmp	r3, #100	@ 0x64
 80088cc:	d108      	bne.n	80088e0 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80088ce:	2170      	movs	r1, #112	@ 0x70
 80088d0:	20f3      	movs	r0, #243	@ 0xf3
 80088d2:	f000 f959 	bl	8008b88 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80088d6:	211d      	movs	r1, #29
 80088d8:	20f2      	movs	r0, #242	@ 0xf2
 80088da:	f000 f955 	bl	8008b88 <RadioWrite>
 80088de:	e007      	b.n	80088f0 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80088e0:	21e1      	movs	r1, #225	@ 0xe1
 80088e2:	20f3      	movs	r0, #243	@ 0xf3
 80088e4:	f000 f950 	bl	8008b88 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80088e8:	2104      	movs	r1, #4
 80088ea:	20f2      	movs	r0, #242	@ 0xf2
 80088ec:	f000 f94c 	bl	8008b88 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	3302      	adds	r3, #2
 80088fa:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	b2db      	uxtb	r3, r3
 8008904:	4619      	mov	r1, r3
 8008906:	20f4      	movs	r0, #244	@ 0xf4
 8008908:	f000 f93e 	bl	8008b88 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800890c:	89fb      	ldrh	r3, [r7, #14]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	20f5      	movs	r0, #245	@ 0xf5
 8008914:	f000 f938 	bl	8008b88 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	3301      	adds	r3, #1
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8008922:	4619      	mov	r1, r3
 8008924:	480c      	ldr	r0, [pc, #48]	@ (8008958 <RadioSend+0x1f8>)
 8008926:	f001 f9ab 	bl	8009c80 <SUBGRF_SendPayload>
            break;
 800892a:	e000      	b.n	800892e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800892c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <RadioSend+0x1ec>)
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	4619      	mov	r1, r3
 8008934:	4809      	ldr	r0, [pc, #36]	@ (800895c <RadioSend+0x1fc>)
 8008936:	f003 fd37 	bl	800c3a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800893a:	4808      	ldr	r0, [pc, #32]	@ (800895c <RadioSend+0x1fc>)
 800893c:	f003 fc56 	bl	800c1ec <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	200002d4 	.word	0x200002d4
 8008950:	200002e2 	.word	0x200002e2
 8008954:	0800cc90 	.word	0x0800cc90
 8008958:	200001d0 	.word	0x200001d0
 800895c:	20000330 	.word	0x20000330

08008960 <RadioSleep>:

static void RadioSleep( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008966:	2300      	movs	r3, #0
 8008968:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800896a:	793b      	ldrb	r3, [r7, #4]
 800896c:	f043 0304 	orr.w	r3, r3, #4
 8008970:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008972:	7938      	ldrb	r0, [r7, #4]
 8008974:	f001 fa60 	bl	8009e38 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008978:	2002      	movs	r0, #2
 800897a:	f7f8 fac1 	bl	8000f00 <HAL_Delay>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <RadioStandby>:

static void RadioStandby( void )
{
 8008986:	b580      	push	{r7, lr}
 8008988:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800898a:	2000      	movs	r0, #0
 800898c:	f001 fa86 	bl	8009e9c <SUBGRF_SetStandby>
}
 8008990:	bf00      	nop
 8008992:	bd80      	pop	{r7, pc}

08008994 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800899c:	f002 faef 	bl	800af7e <RFW_Is_Init>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d102      	bne.n	80089ac <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80089a6:	f002 fb12 	bl	800afce <RFW_ReceiveInit>
 80089aa:	e007      	b.n	80089bc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80089ac:	2300      	movs	r3, #0
 80089ae:	2200      	movs	r2, #0
 80089b0:	f240 2162 	movw	r1, #610	@ 0x262
 80089b4:	f240 2062 	movw	r0, #610	@ 0x262
 80089b8:	f001 fc44 	bl	800a244 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d006      	beq.n	80089d0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4811      	ldr	r0, [pc, #68]	@ (8008a0c <RadioRx+0x78>)
 80089c6:	f003 fcef 	bl	800c3a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80089ca:	4810      	ldr	r0, [pc, #64]	@ (8008a0c <RadioRx+0x78>)
 80089cc:	f003 fc0e 	bl	800c1ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80089d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <RadioRx+0x7c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80089d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a10 <RadioRx+0x7c>)
 80089d8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 f8d4 	bl	800ab8c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80089e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <RadioRx+0x7c>)
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80089ec:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80089f0:	f001 fa90 	bl	8009f14 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80089f4:	e005      	b.n	8008a02 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80089f6:	4b06      	ldr	r3, [pc, #24]	@ (8008a10 <RadioRx+0x7c>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	019b      	lsls	r3, r3, #6
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 fa89 	bl	8009f14 <SUBGRF_SetRx>
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000348 	.word	0x20000348
 8008a10:	200002d4 	.word	0x200002d4

08008a14 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008a1c:	f002 faaf 	bl	800af7e <RFW_Is_Init>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d102      	bne.n	8008a2c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008a26:	f002 fad2 	bl	800afce <RFW_ReceiveInit>
 8008a2a:	e007      	b.n	8008a3c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f240 2162 	movw	r1, #610	@ 0x262
 8008a34:	f240 2062 	movw	r0, #610	@ 0x262
 8008a38:	f001 fc04 	bl	800a244 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d006      	beq.n	8008a50 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	4811      	ldr	r0, [pc, #68]	@ (8008a8c <RadioRxBoosted+0x78>)
 8008a46:	f003 fcaf 	bl	800c3a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008a4a:	4810      	ldr	r0, [pc, #64]	@ (8008a8c <RadioRxBoosted+0x78>)
 8008a4c:	f003 fbce 	bl	800c1ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008a50:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <RadioRxBoosted+0x7c>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a56:	4b0e      	ldr	r3, [pc, #56]	@ (8008a90 <RadioRxBoosted+0x7c>)
 8008a58:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f002 f894 	bl	800ab8c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008a64:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <RadioRxBoosted+0x7c>)
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008a6c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008a70:	f001 fa70 	bl	8009f54 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008a74:	e005      	b.n	8008a82 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008a76:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <RadioRxBoosted+0x7c>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	019b      	lsls	r3, r3, #6
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 fa69 	bl	8009f54 <SUBGRF_SetRxBoosted>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000348 	.word	0x20000348
 8008a90:	200002d4 	.word	0x200002d4

08008a94 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	005a      	lsls	r2, r3, #1
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad8 <RadioSetRxDutyCycle+0x44>)
 8008aa8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2200      	movs	r2, #0
 8008aae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008ab2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008ab6:	f001 fbc5 	bl	800a244 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008aba:	4b07      	ldr	r3, [pc, #28]	@ (8008ad8 <RadioSetRxDutyCycle+0x44>)
 8008abc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f002 f862 	bl	800ab8c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 fa66 	bl	8009f9c <SUBGRF_SetRxDutyCycle>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	200002d4 	.word	0x200002d4

08008adc <RadioStartCad>:

static void RadioStartCad( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008ae0:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <RadioStartCad+0x2c>)
 8008ae2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 f84f 	bl	800ab8c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008aee:	2300      	movs	r3, #0
 8008af0:	2200      	movs	r2, #0
 8008af2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008af6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8008afa:	f001 fba3 	bl	800a244 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008afe:	f001 fa79 	bl	8009ff4 <SUBGRF_SetCad>
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200002d4 	.word	0x200002d4

08008b0c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008b1c:	883b      	ldrh	r3, [r7, #0]
 8008b1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fbe7 	bl	800a2fc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f002 f852 	bl	800abdc <SUBGRF_SetRfTxPower>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008b3c:	210e      	movs	r1, #14
 8008b3e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008b42:	f001 ff2f 	bl	800a9a4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008b46:	7afb      	ldrb	r3, [r7, #11]
 8008b48:	2101      	movs	r1, #1
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 f81e 	bl	800ab8c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008b50:	f001 fa5e 	bl	800a010 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008b54:	68f9      	ldr	r1, [r7, #12]
 8008b56:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <RadioSetTxContinuousWave+0x60>)
 8008b58:	f003 fc26 	bl	800c3a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008b5c:	4803      	ldr	r0, [pc, #12]	@ (8008b6c <RadioSetTxContinuousWave+0x60>)
 8008b5e:	f003 fb45 	bl	800c1ec <UTIL_TIMER_Start>
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000330 	.word	0x20000330

08008b70 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008b7a:	f001 fe80 	bl	800a87e <SUBGRF_GetRssiInst>
 8008b7e:	4603      	mov	r3, r0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	460a      	mov	r2, r1
 8008b92:	80fb      	strh	r3, [r7, #6]
 8008b94:	4613      	mov	r3, r2
 8008b96:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008b98:	797a      	ldrb	r2, [r7, #5]
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 ff00 	bl	800a9a4 <SUBGRF_WriteRegister>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 ff07 	bl	800a9cc <SUBGRF_ReadRegister>
 8008bbe:	4603      	mov	r3, r0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	80fb      	strh	r3, [r7, #6]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008bd8:	797b      	ldrb	r3, [r7, #5]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 ff07 	bl	800a9f4 <SUBGRF_WriteRegisters>
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	6039      	str	r1, [r7, #0]
 8008bf8:	80fb      	strh	r3, [r7, #6]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008bfe:	797b      	ldrb	r3, [r7, #5]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 ff16 	bl	800aa38 <SUBGRF_ReadRegisters>
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	71fb      	strb	r3, [r7, #7]
 8008c20:	4613      	mov	r3, r2
 8008c22:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d10a      	bne.n	8008c40 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c64 <RadioSetMaxPayloadLength+0x50>)
 8008c2c:	79bb      	ldrb	r3, [r7, #6]
 8008c2e:	7013      	strb	r3, [r2, #0]
 8008c30:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <RadioSetMaxPayloadLength+0x50>)
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	4b0c      	ldr	r3, [pc, #48]	@ (8008c68 <RadioSetMaxPayloadLength+0x54>)
 8008c36:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c38:	480c      	ldr	r0, [pc, #48]	@ (8008c6c <RadioSetMaxPayloadLength+0x58>)
 8008c3a:	f001 fd6b 	bl	800a714 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008c3e:	e00d      	b.n	8008c5c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008c40:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <RadioSetMaxPayloadLength+0x54>)
 8008c42:	7d5b      	ldrb	r3, [r3, #21]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d109      	bne.n	8008c5c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008c48:	4a06      	ldr	r2, [pc, #24]	@ (8008c64 <RadioSetMaxPayloadLength+0x50>)
 8008c4a:	79bb      	ldrb	r3, [r7, #6]
 8008c4c:	7013      	strb	r3, [r2, #0]
 8008c4e:	4b05      	ldr	r3, [pc, #20]	@ (8008c64 <RadioSetMaxPayloadLength+0x50>)
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <RadioSetMaxPayloadLength+0x54>)
 8008c54:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c56:	4805      	ldr	r0, [pc, #20]	@ (8008c6c <RadioSetMaxPayloadLength+0x58>)
 8008c58:	f001 fd5c 	bl	800a714 <SUBGRF_SetPacketParams>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000008 	.word	0x20000008
 8008c68:	200002d4 	.word	0x200002d4
 8008c6c:	200002e2 	.word	0x200002e2

08008c70 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008c7a:	4a13      	ldr	r2, [pc, #76]	@ (8008cc8 <RadioSetPublicNetwork+0x58>)
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	7313      	strb	r3, [r2, #12]
 8008c80:	4b11      	ldr	r3, [pc, #68]	@ (8008cc8 <RadioSetPublicNetwork+0x58>)
 8008c82:	7b1a      	ldrb	r2, [r3, #12]
 8008c84:	4b10      	ldr	r3, [pc, #64]	@ (8008cc8 <RadioSetPublicNetwork+0x58>)
 8008c86:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008c88:	2001      	movs	r0, #1
 8008c8a:	f7ff f813 	bl	8007cb4 <RadioSetModem>
    if( enable == true )
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008c94:	2134      	movs	r1, #52	@ 0x34
 8008c96:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008c9a:	f001 fe83 	bl	800a9a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008c9e:	2144      	movs	r1, #68	@ 0x44
 8008ca0:	f240 7041 	movw	r0, #1857	@ 0x741
 8008ca4:	f001 fe7e 	bl	800a9a4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008ca8:	e009      	b.n	8008cbe <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008caa:	2114      	movs	r1, #20
 8008cac:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008cb0:	f001 fe78 	bl	800a9a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008cb4:	2124      	movs	r1, #36	@ 0x24
 8008cb6:	f240 7041 	movw	r0, #1857	@ 0x741
 8008cba:	f001 fe73 	bl	800a9a4 <SUBGRF_WriteRegister>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200002d4 	.word	0x200002d4

08008ccc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008cd0:	f001 ffb8 	bl	800ac44 <SUBGRF_GetRadioWakeUpTime>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	3303      	adds	r3, #3
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008ce4:	f000 f80e 	bl	8008d04 <RadioOnTxTimeoutProcess>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008cf8:	f000 f818 	bl	8008d2c <RadioOnRxTimeoutProcess>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008d08:	4b07      	ldr	r3, [pc, #28]	@ (8008d28 <RadioOnTxTimeoutProcess+0x24>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <RadioOnTxTimeoutProcess+0x1e>
 8008d10:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <RadioOnTxTimeoutProcess+0x24>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008d1a:	4b03      	ldr	r3, [pc, #12]	@ (8008d28 <RadioOnTxTimeoutProcess+0x24>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4798      	blx	r3
    }
}
 8008d22:	bf00      	nop
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200002d0 	.word	0x200002d0

08008d2c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <RadioOnRxTimeoutProcess+0x24>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <RadioOnRxTimeoutProcess+0x1e>
 8008d38:	4b05      	ldr	r3, [pc, #20]	@ (8008d50 <RadioOnRxTimeoutProcess+0x24>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008d42:	4b03      	ldr	r3, [pc, #12]	@ (8008d50 <RadioOnRxTimeoutProcess+0x24>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	4798      	blx	r3
    }
}
 8008d4a:	bf00      	nop
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200002d0 	.word	0x200002d0

08008d54 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008d5e:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <RadioOnDioIrq+0x20>)
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8008d66:	f000 f807 	bl	8008d78 <RadioIrqProcess>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200002d4 	.word	0x200002d4

08008d78 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008d78:	b5b0      	push	{r4, r5, r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008d86:	4ba8      	ldr	r3, [pc, #672]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008d88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d90:	f000 810d 	beq.w	8008fae <RadioIrqProcess+0x236>
 8008d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d98:	f300 81e8 	bgt.w	800916c <RadioIrqProcess+0x3f4>
 8008d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da0:	f000 80f1 	beq.w	8008f86 <RadioIrqProcess+0x20e>
 8008da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da8:	f300 81e0 	bgt.w	800916c <RadioIrqProcess+0x3f4>
 8008dac:	2b80      	cmp	r3, #128	@ 0x80
 8008dae:	f000 80d6 	beq.w	8008f5e <RadioIrqProcess+0x1e6>
 8008db2:	2b80      	cmp	r3, #128	@ 0x80
 8008db4:	f300 81da 	bgt.w	800916c <RadioIrqProcess+0x3f4>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	dc49      	bgt.n	8008e50 <RadioIrqProcess+0xd8>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f340 81d5 	ble.w	800916c <RadioIrqProcess+0x3f4>
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b1f      	cmp	r3, #31
 8008dc6:	f200 81d1 	bhi.w	800916c <RadioIrqProcess+0x3f4>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <RadioIrqProcess+0x58>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e59 	.word	0x08008e59
 8008dd4:	08008e93 	.word	0x08008e93
 8008dd8:	0800916d 	.word	0x0800916d
 8008ddc:	08009049 	.word	0x08009049
 8008de0:	0800916d 	.word	0x0800916d
 8008de4:	0800916d 	.word	0x0800916d
 8008de8:	0800916d 	.word	0x0800916d
 8008dec:	080090c5 	.word	0x080090c5
 8008df0:	0800916d 	.word	0x0800916d
 8008df4:	0800916d 	.word	0x0800916d
 8008df8:	0800916d 	.word	0x0800916d
 8008dfc:	0800916d 	.word	0x0800916d
 8008e00:	0800916d 	.word	0x0800916d
 8008e04:	0800916d 	.word	0x0800916d
 8008e08:	0800916d 	.word	0x0800916d
 8008e0c:	080090e1 	.word	0x080090e1
 8008e10:	0800916d 	.word	0x0800916d
 8008e14:	0800916d 	.word	0x0800916d
 8008e18:	0800916d 	.word	0x0800916d
 8008e1c:	0800916d 	.word	0x0800916d
 8008e20:	0800916d 	.word	0x0800916d
 8008e24:	0800916d 	.word	0x0800916d
 8008e28:	0800916d 	.word	0x0800916d
 8008e2c:	0800916d 	.word	0x0800916d
 8008e30:	0800916d 	.word	0x0800916d
 8008e34:	0800916d 	.word	0x0800916d
 8008e38:	0800916d 	.word	0x0800916d
 8008e3c:	0800916d 	.word	0x0800916d
 8008e40:	0800916d 	.word	0x0800916d
 8008e44:	0800916d 	.word	0x0800916d
 8008e48:	0800916d 	.word	0x0800916d
 8008e4c:	080090ef 	.word	0x080090ef
 8008e50:	2b40      	cmp	r3, #64	@ 0x40
 8008e52:	f000 816d 	beq.w	8009130 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008e56:	e189      	b.n	800916c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008e58:	4874      	ldr	r0, [pc, #464]	@ (800902c <RadioIrqProcess+0x2b4>)
 8008e5a:	f003 fa35 	bl	800c2c8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f001 f81c 	bl	8009e9c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008e64:	f002 f892 	bl	800af8c <RFW_Is_LongPacketModeEnabled>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008e6e:	f002 f8b6 	bl	800afde <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008e72:	4b6f      	ldr	r3, [pc, #444]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 817a 	beq.w	8009170 <RadioIrqProcess+0x3f8>
 8008e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8174 	beq.w	8009170 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008e88:	4b69      	ldr	r3, [pc, #420]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4798      	blx	r3
        break;
 8008e90:	e16e      	b.n	8009170 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8008e92:	4868      	ldr	r0, [pc, #416]	@ (8009034 <RadioIrqProcess+0x2bc>)
 8008e94:	f003 fa18 	bl	800c2c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008e98:	4b63      	ldr	r3, [pc, #396]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	f083 0301 	eor.w	r3, r3, #1
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d014      	beq.n	8008ed0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f000 fff8 	bl	8009e9c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008eac:	2100      	movs	r1, #0
 8008eae:	f640 1002 	movw	r0, #2306	@ 0x902
 8008eb2:	f001 fd77 	bl	800a9a4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008eb6:	f640 1044 	movw	r0, #2372	@ 0x944
 8008eba:	f001 fd87 	bl	800a9cc <SUBGRF_ReadRegister>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f640 1044 	movw	r0, #2372	@ 0x944
 8008ecc:	f001 fd6a 	bl	800a9a4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008ed0:	1dfb      	adds	r3, r7, #7
 8008ed2:	22ff      	movs	r2, #255	@ 0xff
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4858      	ldr	r0, [pc, #352]	@ (8009038 <RadioIrqProcess+0x2c0>)
 8008ed8:	f000 feb0 	bl	8009c3c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008edc:	4857      	ldr	r0, [pc, #348]	@ (800903c <RadioIrqProcess+0x2c4>)
 8008ede:	f001 fd0f 	bl	800a900 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008ee2:	4b53      	ldr	r3, [pc, #332]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8144 	beq.w	8009174 <RadioIrqProcess+0x3fc>
 8008eec:	4b50      	ldr	r3, [pc, #320]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 813e 	beq.w	8009174 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008efa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d10e      	bne.n	8008f20 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008f02:	4b4b      	ldr	r3, [pc, #300]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689c      	ldr	r4, [r3, #8]
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4b46      	ldr	r3, [pc, #280]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008f0e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8008f12:	461a      	mov	r2, r3
 8008f14:	4b44      	ldr	r3, [pc, #272]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008f16:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8008f1a:	4847      	ldr	r0, [pc, #284]	@ (8009038 <RadioIrqProcess+0x2c0>)
 8008f1c:	47a0      	blx	r4
                break;
 8008f1e:	e01d      	b.n	8008f5c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008f20:	4b41      	ldr	r3, [pc, #260]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	463a      	mov	r2, r7
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 ff7d 	bl	800ae28 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008f2e:	4b40      	ldr	r3, [pc, #256]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689c      	ldr	r4, [r3, #8]
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	4619      	mov	r1, r3
 8008f38:	4b3b      	ldr	r3, [pc, #236]	@ (8009028 <RadioIrqProcess+0x2b0>)
 8008f3a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8008f3e:	4618      	mov	r0, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008f46:	4a3e      	ldr	r2, [pc, #248]	@ (8009040 <RadioIrqProcess+0x2c8>)
 8008f48:	fb82 5203 	smull	r5, r2, r2, r3
 8008f4c:	1192      	asrs	r2, r2, #6
 8008f4e:	17db      	asrs	r3, r3, #31
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	b25b      	sxtb	r3, r3
 8008f54:	4602      	mov	r2, r0
 8008f56:	4838      	ldr	r0, [pc, #224]	@ (8009038 <RadioIrqProcess+0x2c0>)
 8008f58:	47a0      	blx	r4
                break;
 8008f5a:	bf00      	nop
        break;
 8008f5c:	e10a      	b.n	8009174 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f000 ff9c 	bl	8009e9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008f64:	4b32      	ldr	r3, [pc, #200]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8105 	beq.w	8009178 <RadioIrqProcess+0x400>
 8008f6e:	4b30      	ldr	r3, [pc, #192]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80ff 	beq.w	8009178 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8008f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2000      	movs	r0, #0
 8008f82:	4798      	blx	r3
        break;
 8008f84:	e0f8      	b.n	8009178 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8008f86:	2000      	movs	r0, #0
 8008f88:	f000 ff88 	bl	8009e9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008f8c:	4b28      	ldr	r3, [pc, #160]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80f3 	beq.w	800917c <RadioIrqProcess+0x404>
 8008f96:	4b26      	ldr	r3, [pc, #152]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80ed 	beq.w	800917c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8008fa2:	4b23      	ldr	r3, [pc, #140]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2001      	movs	r0, #1
 8008faa:	4798      	blx	r3
        break;
 8008fac:	e0e6      	b.n	800917c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8008fae:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <RadioIrqProcess+0x2cc>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2002      	movs	r0, #2
 8008fb6:	f003 fb7f 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008fba:	f000 fe25 	bl	8009c08 <SUBGRF_GetOperatingMode>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	d115      	bne.n	8008ff0 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8008fc4:	4819      	ldr	r0, [pc, #100]	@ (800902c <RadioIrqProcess+0x2b4>)
 8008fc6:	f003 f97f 	bl	800c2c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 ff66 	bl	8009e9c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008fd0:	4b17      	ldr	r3, [pc, #92]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80d3 	beq.w	8009180 <RadioIrqProcess+0x408>
 8008fda:	4b15      	ldr	r3, [pc, #84]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80cd 	beq.w	8009180 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8008fe6:	4b12      	ldr	r3, [pc, #72]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	4798      	blx	r3
        break;
 8008fee:	e0c7      	b.n	8009180 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008ff0:	f000 fe0a 	bl	8009c08 <SUBGRF_GetOperatingMode>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	f040 80c2 	bne.w	8009180 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8008ffc:	480d      	ldr	r0, [pc, #52]	@ (8009034 <RadioIrqProcess+0x2bc>)
 8008ffe:	f003 f963 	bl	800c2c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009002:	2000      	movs	r0, #0
 8009004:	f000 ff4a 	bl	8009e9c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009008:	4b09      	ldr	r3, [pc, #36]	@ (8009030 <RadioIrqProcess+0x2b8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80b7 	beq.w	8009180 <RadioIrqProcess+0x408>
 8009012:	4b07      	ldr	r3, [pc, #28]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80b1 	beq.w	8009180 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800901e:	4b04      	ldr	r3, [pc, #16]	@ (8009030 <RadioIrqProcess+0x2b8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4798      	blx	r3
        break;
 8009026:	e0ab      	b.n	8009180 <RadioIrqProcess+0x408>
 8009028:	200002d4 	.word	0x200002d4
 800902c:	20000330 	.word	0x20000330
 8009030:	200002d0 	.word	0x200002d0
 8009034:	20000348 	.word	0x20000348
 8009038:	200001d0 	.word	0x200001d0
 800903c:	200002f8 	.word	0x200002f8
 8009040:	10624dd3 	.word	0x10624dd3
 8009044:	0800cca8 	.word	0x0800cca8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8009048:	4b54      	ldr	r3, [pc, #336]	@ (800919c <RadioIrqProcess+0x424>)
 800904a:	2201      	movs	r2, #1
 800904c:	2100      	movs	r1, #0
 800904e:	2002      	movs	r0, #2
 8009050:	f003 fb32 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009054:	4b52      	ldr	r3, [pc, #328]	@ (80091a0 <RadioIrqProcess+0x428>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8093 	beq.w	8009184 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800905e:	4a51      	ldr	r2, [pc, #324]	@ (80091a4 <RadioIrqProcess+0x42c>)
 8009060:	4b4f      	ldr	r3, [pc, #316]	@ (80091a0 <RadioIrqProcess+0x428>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4619      	mov	r1, r3
 800906a:	f640 1003 	movw	r0, #2307	@ 0x903
 800906e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009070:	4a4c      	ldr	r2, [pc, #304]	@ (80091a4 <RadioIrqProcess+0x42c>)
 8009072:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <RadioIrqProcess+0x428>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	f640 1004 	movw	r0, #2308	@ 0x904
 8009080:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009082:	4a48      	ldr	r2, [pc, #288]	@ (80091a4 <RadioIrqProcess+0x42c>)
 8009084:	4b46      	ldr	r3, [pc, #280]	@ (80091a0 <RadioIrqProcess+0x428>)
 8009086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	f640 1005 	movw	r0, #2309	@ 0x905
 8009090:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009092:	4c44      	ldr	r4, [pc, #272]	@ (80091a4 <RadioIrqProcess+0x42c>)
 8009094:	4b44      	ldr	r3, [pc, #272]	@ (80091a8 <RadioIrqProcess+0x430>)
 8009096:	f640 1002 	movw	r0, #2306	@ 0x902
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	4619      	mov	r1, r3
 80090a6:	f640 1002 	movw	r0, #2306	@ 0x902
 80090aa:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80090ac:	4b3c      	ldr	r3, [pc, #240]	@ (80091a0 <RadioIrqProcess+0x428>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	f240 2162 	movw	r1, #610	@ 0x262
 80090ba:	f240 2062 	movw	r0, #610	@ 0x262
 80090be:	f001 f8c1 	bl	800a244 <SUBGRF_SetDioIrqParams>
        break;
 80090c2:	e05f      	b.n	8009184 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80090c4:	4b39      	ldr	r3, [pc, #228]	@ (80091ac <RadioIrqProcess+0x434>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	2100      	movs	r1, #0
 80090ca:	2002      	movs	r0, #2
 80090cc:	f003 faf4 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80090d0:	f001 ff55 	bl	800af7e <RFW_Is_Init>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d156      	bne.n	8009188 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 80090da:	f001 ff86 	bl	800afea <RFW_ReceivePayload>
        break;
 80090de:	e053      	b.n	8009188 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80090e0:	4b33      	ldr	r3, [pc, #204]	@ (80091b0 <RadioIrqProcess+0x438>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	2100      	movs	r1, #0
 80090e6:	2002      	movs	r0, #2
 80090e8:	f003 fae6 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80090ec:	e051      	b.n	8009192 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 80090ee:	4831      	ldr	r0, [pc, #196]	@ (80091b4 <RadioIrqProcess+0x43c>)
 80090f0:	f003 f8ea 	bl	800c2c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80090f4:	4b2a      	ldr	r3, [pc, #168]	@ (80091a0 <RadioIrqProcess+0x428>)
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	f083 0301 	eor.w	r3, r3, #1
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8009102:	2000      	movs	r0, #0
 8009104:	f000 feca 	bl	8009e9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009108:	4b2b      	ldr	r3, [pc, #172]	@ (80091b8 <RadioIrqProcess+0x440>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d03d      	beq.n	800918c <RadioIrqProcess+0x414>
 8009110:	4b29      	ldr	r3, [pc, #164]	@ (80091b8 <RadioIrqProcess+0x440>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d038      	beq.n	800918c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800911a:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <RadioIrqProcess+0x440>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8009122:	4b26      	ldr	r3, [pc, #152]	@ (80091bc <RadioIrqProcess+0x444>)
 8009124:	2201      	movs	r2, #1
 8009126:	2100      	movs	r1, #0
 8009128:	2002      	movs	r0, #2
 800912a:	f003 fac5 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800912e:	e02d      	b.n	800918c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8009130:	4b23      	ldr	r3, [pc, #140]	@ (80091c0 <RadioIrqProcess+0x448>)
 8009132:	2201      	movs	r2, #1
 8009134:	2100      	movs	r1, #0
 8009136:	2002      	movs	r0, #2
 8009138:	f003 fabe 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800913c:	4b18      	ldr	r3, [pc, #96]	@ (80091a0 <RadioIrqProcess+0x428>)
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	f083 0301 	eor.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800914a:	2000      	movs	r0, #0
 800914c:	f000 fea6 	bl	8009e9c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009150:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <RadioIrqProcess+0x440>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <RadioIrqProcess+0x418>
 8009158:	4b17      	ldr	r3, [pc, #92]	@ (80091b8 <RadioIrqProcess+0x440>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8009162:	4b15      	ldr	r3, [pc, #84]	@ (80091b8 <RadioIrqProcess+0x440>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	4798      	blx	r3
        break;
 800916a:	e011      	b.n	8009190 <RadioIrqProcess+0x418>
        break;
 800916c:	bf00      	nop
 800916e:	e010      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009170:	bf00      	nop
 8009172:	e00e      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009174:	bf00      	nop
 8009176:	e00c      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009178:	bf00      	nop
 800917a:	e00a      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 800917c:	bf00      	nop
 800917e:	e008      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009180:	bf00      	nop
 8009182:	e006      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009184:	bf00      	nop
 8009186:	e004      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009188:	bf00      	nop
 800918a:	e002      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 800918c:	bf00      	nop
 800918e:	e000      	b.n	8009192 <RadioIrqProcess+0x41a>
        break;
 8009190:	bf00      	nop
    }
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bdb0      	pop	{r4, r5, r7, pc}
 800919a:	bf00      	nop
 800919c:	0800ccbc 	.word	0x0800ccbc
 80091a0:	200002d4 	.word	0x200002d4
 80091a4:	08008b89 	.word	0x08008b89
 80091a8:	08008bad 	.word	0x08008bad
 80091ac:	0800ccc8 	.word	0x0800ccc8
 80091b0:	0800ccd4 	.word	0x0800ccd4
 80091b4:	20000348 	.word	0x20000348
 80091b8:	200002d0 	.word	0x200002d0
 80091bc:	0800cce0 	.word	0x0800cce0
 80091c0:	0800ccec 	.word	0x0800ccec

080091c4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80091c8:	4b09      	ldr	r3, [pc, #36]	@ (80091f0 <RadioTxPrbs+0x2c>)
 80091ca:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80091ce:	2101      	movs	r1, #1
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 fcdb 	bl	800ab8c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80091d6:	4b07      	ldr	r3, [pc, #28]	@ (80091f4 <RadioTxPrbs+0x30>)
 80091d8:	212d      	movs	r1, #45	@ 0x2d
 80091da:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80091de:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80091e0:	f000 ff1f 	bl	800a022 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80091e4:	4804      	ldr	r0, [pc, #16]	@ (80091f8 <RadioTxPrbs+0x34>)
 80091e6:	f000 fe75 	bl	8009ed4 <SUBGRF_SetTx>
}
 80091ea:	bf00      	nop
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200002d4 	.word	0x200002d4
 80091f4:	08008b89 	.word	0x08008b89
 80091f8:	000fffff 	.word	0x000fffff

080091fc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920a:	4618      	mov	r0, r3
 800920c:	f001 fce6 	bl	800abdc <SUBGRF_SetRfTxPower>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009214:	210e      	movs	r1, #14
 8009216:	f640 101f 	movw	r0, #2335	@ 0x91f
 800921a:	f001 fbc3 	bl	800a9a4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2101      	movs	r1, #1
 8009222:	4618      	mov	r0, r3
 8009224:	f001 fcb2 	bl	800ab8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009228:	f000 fef2 	bl	800a010 <SUBGRF_SetTxContinuousWave>
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009234:	b480      	push	{r7}
 8009236:	b089      	sub	sp, #36	@ 0x24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800924a:	2300      	movs	r3, #0
 800924c:	61bb      	str	r3, [r7, #24]
 800924e:	e011      	b.n	8009274 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	4413      	add	r3, r2
 8009256:	781a      	ldrb	r2, [r3, #0]
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	440b      	add	r3, r1
 800925e:	43d2      	mvns	r2, r2
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	3301      	adds	r3, #1
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	429a      	cmp	r2, r3
 800927a:	dbe9      	blt.n	8009250 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e049      	b.n	8009316 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	425a      	negs	r2, r3
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	f002 0207 	and.w	r2, r2, #7
 800928e:	bf58      	it	pl
 8009290:	4253      	negpl	r3, r2
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f1c3 0307 	rsb	r3, r3, #7
 8009298:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	da00      	bge.n	80092a2 <payload_integration+0x6e>
 80092a0:	3307      	adds	r3, #7
 80092a2:	10db      	asrs	r3, r3, #3
 80092a4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	3301      	adds	r3, #1
 80092aa:	425a      	negs	r2, r3
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	f002 0207 	and.w	r2, r2, #7
 80092b4:	bf58      	it	pl
 80092b6:	4253      	negpl	r3, r2
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f1c3 0307 	rsb	r3, r3, #7
 80092be:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	3301      	adds	r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da00      	bge.n	80092ca <payload_integration+0x96>
 80092c8:	3307      	adds	r3, #7
 80092ca:	10db      	asrs	r3, r3, #3
 80092cc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80092ce:	7dbb      	ldrb	r3, [r7, #22]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	fa42 f303 	asr.w	r3, r2, r3
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80092e6:	7ffa      	ldrb	r2, [r7, #31]
 80092e8:	7cfb      	ldrb	r3, [r7, #19]
 80092ea:	4053      	eors	r3, r2
 80092ec:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80092ee:	7d3b      	ldrb	r3, [r7, #20]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b25a      	sxtb	r2, r3
 80092f8:	7ff9      	ldrb	r1, [r7, #31]
 80092fa:	7d7b      	ldrb	r3, [r7, #21]
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	b25b      	sxtb	r3, r3
 8009302:	4313      	orrs	r3, r2
 8009304:	b259      	sxtb	r1, r3
 8009306:	7d3b      	ldrb	r3, [r7, #20]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	b2ca      	uxtb	r2, r1
 800930e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	3301      	adds	r3, #1
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	429a      	cmp	r2, r3
 800931e:	dbb0      	blt.n	8009282 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009320:	7ffb      	ldrb	r3, [r7, #31]
 8009322:	01db      	lsls	r3, r3, #7
 8009324:	b25a      	sxtb	r2, r3
 8009326:	7ffb      	ldrb	r3, [r7, #31]
 8009328:	019b      	lsls	r3, r3, #6
 800932a:	b25b      	sxtb	r3, r3
 800932c:	4313      	orrs	r3, r2
 800932e:	b25b      	sxtb	r3, r3
 8009330:	7ffa      	ldrb	r2, [r7, #31]
 8009332:	2a00      	cmp	r2, #0
 8009334:	d101      	bne.n	800933a <payload_integration+0x106>
 8009336:	2220      	movs	r2, #32
 8009338:	e000      	b.n	800933c <payload_integration+0x108>
 800933a:	2200      	movs	r2, #0
 800933c:	4313      	orrs	r3, r2
 800933e:	b259      	sxtb	r1, r3
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	b2ca      	uxtb	r2, r1
 8009348:	701a      	strb	r2, [r3, #0]
}
 800934a:	bf00      	nop
 800934c:	3724      	adds	r7, #36	@ 0x24
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr

08009354 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08c      	sub	sp, #48	@ 0x30
 8009358:	af00      	add	r7, sp, #0
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8009368:	2300      	movs	r3, #0
 800936a:	623b      	str	r3, [r7, #32]
 800936c:	2300      	movs	r3, #0
 800936e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009370:	f001 fdff 	bl	800af72 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf14      	ite	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2300      	moveq	r3, #0
 8009388:	b2da      	uxtb	r2, r3
 800938a:	4ba3      	ldr	r3, [pc, #652]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800938c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <RadioSetRxGenericConfig+0x48>
 8009394:	2b01      	cmp	r3, #1
 8009396:	f000 80dc 	beq.w	8009552 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800939a:	e194      	b.n	80096c6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <RadioSetRxGenericConfig+0x58>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093b0:	e18a      	b.n	80096c8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	7f9b      	ldrb	r3, [r3, #30]
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d902      	bls.n	80093c0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093be:	e183      	b.n	80096c8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6919      	ldr	r1, [r3, #16]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	7f9b      	ldrb	r3, [r3, #30]
 80093c8:	461a      	mov	r2, r3
 80093ca:	f107 0320 	add.w	r3, r7, #32
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fa26 	bl	800b820 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf14      	ite	ne
 80093dc:	2301      	movne	r3, #1
 80093de:	2300      	moveq	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fe26 	bl	800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80093e8:	4b8b      	ldr	r3, [pc, #556]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	4a88      	ldr	r2, [pc, #544]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80093f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80093fe:	4b86      	ldr	r3, [pc, #536]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4618      	mov	r0, r3
 800940a:	f001 fce5 	bl	800add8 <SUBGRF_GetFskBandwidthRegValue>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	4b81      	ldr	r3, [pc, #516]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009418:	4b7f      	ldr	r3, [pc, #508]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800941a:	2200      	movs	r2, #0
 800941c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	b29b      	uxth	r3, r3
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	b29a      	uxth	r2, r3
 8009428:	4b7b      	ldr	r3, [pc, #492]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800942a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	7fda      	ldrb	r2, [r3, #31]
 8009430:	4b79      	ldr	r3, [pc, #484]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009432:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	7f9b      	ldrb	r3, [r3, #30]
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	b2da      	uxtb	r2, r3
 800943c:	4b76      	ldr	r3, [pc, #472]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800943e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8009446:	4b74      	ldr	r3, [pc, #464]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009448:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009450:	2b00      	cmp	r3, #0
 8009452:	d105      	bne.n	8009460 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	b2da      	uxtb	r2, r3
 800945a:	4b6f      	ldr	r3, [pc, #444]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800945c:	759a      	strb	r2, [r3, #22]
 800945e:	e00b      	b.n	8009478 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009466:	2b02      	cmp	r3, #2
 8009468:	d103      	bne.n	8009472 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800946a:	4b6b      	ldr	r3, [pc, #428]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800946c:	22ff      	movs	r2, #255	@ 0xff
 800946e:	759a      	strb	r2, [r3, #22]
 8009470:	e002      	b.n	8009478 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009472:	4b69      	ldr	r3, [pc, #420]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009474:	22ff      	movs	r2, #255	@ 0xff
 8009476:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800947e:	2b02      	cmp	r3, #2
 8009480:	d004      	beq.n	800948c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009488:	2b02      	cmp	r3, #2
 800948a:	d12d      	bne.n	80094e8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009492:	2bf1      	cmp	r3, #241	@ 0xf1
 8009494:	d00c      	beq.n	80094b0 <RadioSetRxGenericConfig+0x15c>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800949c:	2bf2      	cmp	r3, #242	@ 0xf2
 800949e:	d007      	beq.n	80094b0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d002      	beq.n	80094b0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80094aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094ae:	e10b      	b.n	80096c8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80094b0:	2300      	movs	r3, #0
 80094b2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80094b8:	4b58      	ldr	r3, [pc, #352]	@ (800961c <RadioSetRxGenericConfig+0x2c8>)
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	4a57      	ldr	r2, [pc, #348]	@ (8009620 <RadioSetRxGenericConfig+0x2cc>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fd48 	bl	800af58 <RFW_Init>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <RadioSetRxGenericConfig+0x180>
                return -1;
 80094ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094d2:	e0f9      	b.n	80096c8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80094d4:	4b50      	ldr	r3, [pc, #320]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80094da:	4b4f      	ldr	r3, [pc, #316]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80094dc:	2201      	movs	r2, #1
 80094de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80094e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	755a      	strb	r2, [r3, #21]
        {
 80094e6:	e00e      	b.n	8009506 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80094ee:	4b4a      	ldr	r3, [pc, #296]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80094f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80094f8:	4b47      	ldr	r3, [pc, #284]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80094fa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009502:	4b45      	ldr	r3, [pc, #276]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009504:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009506:	f7ff fa3e 	bl	8008986 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800950a:	2000      	movs	r0, #0
 800950c:	f7fe fbd2 	bl	8007cb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009510:	4844      	ldr	r0, [pc, #272]	@ (8009624 <RadioSetRxGenericConfig+0x2d0>)
 8009512:	f001 f82d 	bl	800a570 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009516:	4844      	ldr	r0, [pc, #272]	@ (8009628 <RadioSetRxGenericConfig+0x2d4>)
 8009518:	f001 f8fc 	bl	800a714 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800951c:	f107 0320 	add.w	r3, r7, #32
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fbc0 	bl	8009ca6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	8b9b      	ldrh	r3, [r3, #28]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fc0a 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	8b1b      	ldrh	r3, [r3, #24]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fbe5 	bl	8009d04 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009540:	fb03 f202 	mul.w	r2, r3, r2
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	4a32      	ldr	r2, [pc, #200]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800954e:	6093      	str	r3, [r2, #8]
        break;
 8009550:	e0b9      	b.n	80096c6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800955a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800955e:	e0b3      	b.n	80096c8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009566:	2b01      	cmp	r3, #1
 8009568:	d104      	bne.n	8009574 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009572:	e002      	b.n	800957a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009574:	23ff      	movs	r3, #255	@ 0xff
 8009576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	bf14      	ite	ne
 8009582:	2301      	movne	r3, #1
 8009584:	2300      	moveq	r3, #0
 8009586:	b2db      	uxtb	r3, r3
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fd53 	bl	800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fd5d 	bl	800a052 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009598:	4b1f      	ldr	r3, [pc, #124]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80095a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80095a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80095b2:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80095b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80095be:	4b16      	ldr	r3, [pc, #88]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80095c0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d010      	beq.n	80095f0 <RadioSetRxGenericConfig+0x29c>
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	dc2c      	bgt.n	800962c <RadioSetRxGenericConfig+0x2d8>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <RadioSetRxGenericConfig+0x288>
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d005      	beq.n	80095e6 <RadioSetRxGenericConfig+0x292>
            break;
 80095da:	e027      	b.n	800962c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80095dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80095e4:	e023      	b.n	800962e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80095e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80095ee:	e01e      	b.n	800962e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095f6:	2b0b      	cmp	r3, #11
 80095f8:	d004      	beq.n	8009604 <RadioSetRxGenericConfig+0x2b0>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009600:	2b0c      	cmp	r3, #12
 8009602:	d104      	bne.n	800960e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009604:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800960c:	e00f      	b.n	800962e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800960e:	4b02      	ldr	r3, [pc, #8]	@ (8009618 <RadioSetRxGenericConfig+0x2c4>)
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009616:	e00a      	b.n	800962e <RadioSetRxGenericConfig+0x2da>
 8009618:	200002d4 	.word	0x200002d4
 800961c:	200002d0 	.word	0x200002d0
 8009620:	20000348 	.word	0x20000348
 8009624:	2000030c 	.word	0x2000030c
 8009628:	200002e2 	.word	0x200002e2
            break;
 800962c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800962e:	4b28      	ldr	r3, [pc, #160]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 8009630:	2201      	movs	r2, #1
 8009632:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009638:	4b25      	ldr	r3, [pc, #148]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 800963a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8009642:	4b23      	ldr	r3, [pc, #140]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 8009644:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009646:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 8009648:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800964c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8009654:	4b1e      	ldr	r3, [pc, #120]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 8009656:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8009660:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 8009662:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8009666:	f7ff f98e 	bl	8008986 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800966a:	2001      	movs	r0, #1
 800966c:	f7fe fb22 	bl	8007cb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009670:	4818      	ldr	r0, [pc, #96]	@ (80096d4 <RadioSetRxGenericConfig+0x380>)
 8009672:	f000 ff7d 	bl	800a570 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009676:	4818      	ldr	r0, [pc, #96]	@ (80096d8 <RadioSetRxGenericConfig+0x384>)
 8009678:	f001 f84c 	bl	800a714 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800967c:	4b14      	ldr	r3, [pc, #80]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 800967e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10d      	bne.n	80096a2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009686:	f240 7036 	movw	r0, #1846	@ 0x736
 800968a:	f001 f99f 	bl	800a9cc <SUBGRF_ReadRegister>
 800968e:	4603      	mov	r3, r0
 8009690:	f023 0304 	bic.w	r3, r3, #4
 8009694:	b2db      	uxtb	r3, r3
 8009696:	4619      	mov	r1, r3
 8009698:	f240 7036 	movw	r0, #1846	@ 0x736
 800969c:	f001 f982 	bl	800a9a4 <SUBGRF_WriteRegister>
 80096a0:	e00c      	b.n	80096bc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80096a2:	f240 7036 	movw	r0, #1846	@ 0x736
 80096a6:	f001 f991 	bl	800a9cc <SUBGRF_ReadRegister>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f043 0304 	orr.w	r3, r3, #4
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4619      	mov	r1, r3
 80096b4:	f240 7036 	movw	r0, #1846	@ 0x736
 80096b8:	f001 f974 	bl	800a9a4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80096bc:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <RadioSetRxGenericConfig+0x37c>)
 80096be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096c2:	609a      	str	r2, [r3, #8]
        break;
 80096c4:	bf00      	nop
    }
    return status;
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3730      	adds	r7, #48	@ 0x30
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	200002d4 	.word	0x200002d4
 80096d4:	2000030c 	.word	0x2000030c
 80096d8:	200002e2 	.word	0x200002e2

080096dc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08e      	sub	sp, #56	@ 0x38
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
 80096ea:	4613      	mov	r3, r2
 80096ec:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80096ee:	2300      	movs	r3, #0
 80096f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f2:	2300      	movs	r3, #0
 80096f4:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80096f6:	f001 fc3c 	bl	800af72 <RFW_DeInit>
    switch( modem )
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	f200 8204 	bhi.w	8009b0a <RadioSetTxGenericConfig+0x42e>
 8009702:	a201      	add	r2, pc, #4	@ (adr r2, 8009708 <RadioSetTxGenericConfig+0x2c>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	0800988d 	.word	0x0800988d
 800970c:	080099d5 	.word	0x080099d5
 8009710:	08009acd 	.word	0x08009acd
 8009714:	08009719 	.word	0x08009719
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	7c9b      	ldrb	r3, [r3, #18]
 800971c:	2b08      	cmp	r3, #8
 800971e:	d902      	bls.n	8009726 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009724:	e206      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6899      	ldr	r1, [r3, #8]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	7c9b      	ldrb	r3, [r3, #18]
 800972e:	461a      	mov	r2, r3
 8009730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009734:	4618      	mov	r0, r3
 8009736:	f002 f873 	bl	800b820 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009746:	e1f5      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009750:	4293      	cmp	r3, r2
 8009752:	d813      	bhi.n	800977c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009754:	2302      	movs	r3, #2
 8009756:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800975a:	4b99      	ldr	r3, [pc, #612]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800975c:	2203      	movs	r2, #3
 800975e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009760:	4b97      	ldr	r3, [pc, #604]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009762:	2203      	movs	r2, #3
 8009764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a94      	ldr	r2, [pc, #592]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800976e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	7cda      	ldrb	r2, [r3, #19]
 8009774:	4b92      	ldr	r3, [pc, #584]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800977a:	e017      	b.n	80097ac <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009782:	4b8f      	ldr	r3, [pc, #572]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009784:	2200      	movs	r2, #0
 8009786:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009788:	4b8d      	ldr	r3, [pc, #564]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a8a      	ldr	r2, [pc, #552]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009796:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	7cda      	ldrb	r2, [r3, #19]
 800979c:	4b88      	ldr	r3, [pc, #544]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800979e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	089b      	lsrs	r3, r3, #2
 80097a8:	4a85      	ldr	r2, [pc, #532]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80097aa:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	4b82      	ldr	r3, [pc, #520]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80097b8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80097ba:	4b81      	ldr	r3, [pc, #516]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80097bc:	2204      	movs	r2, #4
 80097be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	7c9b      	ldrb	r3, [r3, #18]
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	4b7d      	ldr	r3, [pc, #500]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80097ca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80097cc:	4b7c      	ldr	r3, [pc, #496]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	7d9b      	ldrb	r3, [r3, #22]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d003      	beq.n	80097e2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d12b      	bne.n	800983a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	7d5b      	ldrb	r3, [r3, #21]
 80097e6:	2bf1      	cmp	r3, #241	@ 0xf1
 80097e8:	d00a      	beq.n	8009800 <RadioSetTxGenericConfig+0x124>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	7d5b      	ldrb	r3, [r3, #21]
 80097ee:	2bf2      	cmp	r3, #242	@ 0xf2
 80097f0:	d006      	beq.n	8009800 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	7d5b      	ldrb	r3, [r3, #21]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d002      	beq.n	8009800 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097fe:	e199      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800980a:	4b6e      	ldr	r3, [pc, #440]	@ (80099c4 <RadioSetTxGenericConfig+0x2e8>)
 800980c:	6819      	ldr	r1, [r3, #0]
 800980e:	f107 0320 	add.w	r3, r7, #32
 8009812:	4a6d      	ldr	r2, [pc, #436]	@ (80099c8 <RadioSetTxGenericConfig+0x2ec>)
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fb9f 	bl	800af58 <RFW_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009824:	e186      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009826:	4b66      	ldr	r3, [pc, #408]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009828:	2200      	movs	r2, #0
 800982a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800982c:	4b64      	ldr	r3, [pc, #400]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800982e:	2201      	movs	r2, #1
 8009830:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009832:	4b63      	ldr	r3, [pc, #396]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009834:	2200      	movs	r2, #0
 8009836:	755a      	strb	r2, [r3, #21]
        {
 8009838:	e00b      	b.n	8009852 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	7d5a      	ldrb	r2, [r3, #21]
 800983e:	4b60      	ldr	r3, [pc, #384]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009840:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	7d9a      	ldrb	r2, [r3, #22]
 8009846:	4b5e      	ldr	r3, [pc, #376]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009848:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	7d1a      	ldrb	r2, [r3, #20]
 800984e:	4b5c      	ldr	r3, [pc, #368]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009850:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009852:	f7ff f898 	bl	8008986 <RadioStandby>
        RadioSetModem( radio_modem );
 8009856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fa2a 	bl	8007cb4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009860:	485a      	ldr	r0, [pc, #360]	@ (80099cc <RadioSetTxGenericConfig+0x2f0>)
 8009862:	f000 fe85 	bl	800a570 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009866:	485a      	ldr	r0, [pc, #360]	@ (80099d0 <RadioSetTxGenericConfig+0x2f4>)
 8009868:	f000 ff54 	bl	800a714 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800986c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fa18 	bl	8009ca6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	8a1b      	ldrh	r3, [r3, #16]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fa62 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	899b      	ldrh	r3, [r3, #12]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fa3d 	bl	8009d04 <SUBGRF_SetCrcPolynomial>
        break;
 800988a:	e13f      	b.n	8009b0c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009898:	e14c      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	7c9b      	ldrb	r3, [r3, #18]
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d902      	bls.n	80098a8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098a6:	e145      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6899      	ldr	r1, [r3, #8]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	7c9b      	ldrb	r3, [r3, #18]
 80098b0:	461a      	mov	r2, r3
 80098b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 ffb2 	bl	800b820 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80098bc:	4b40      	ldr	r3, [pc, #256]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a3d      	ldr	r2, [pc, #244]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	7cda      	ldrb	r2, [r3, #19]
 80098d0:	4b3b      	ldr	r3, [pc, #236]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	4a39      	ldr	r2, [pc, #228]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098dc:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80098de:	4b38      	ldr	r3, [pc, #224]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	4b34      	ldr	r3, [pc, #208]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098f0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80098f2:	4b33      	ldr	r3, [pc, #204]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 80098f4:	2204      	movs	r2, #4
 80098f6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	7c9b      	ldrb	r3, [r3, #18]
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	4b2f      	ldr	r3, [pc, #188]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009902:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009904:	4b2e      	ldr	r3, [pc, #184]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009906:	2200      	movs	r2, #0
 8009908:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	7d9b      	ldrb	r3, [r3, #22]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d003      	beq.n	800991a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	7d1b      	ldrb	r3, [r3, #20]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d12a      	bne.n	8009970 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	7d5b      	ldrb	r3, [r3, #21]
 800991e:	2bf1      	cmp	r3, #241	@ 0xf1
 8009920:	d00a      	beq.n	8009938 <RadioSetTxGenericConfig+0x25c>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	7d5b      	ldrb	r3, [r3, #21]
 8009926:	2bf2      	cmp	r3, #242	@ 0xf2
 8009928:	d006      	beq.n	8009938 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	7d5b      	ldrb	r3, [r3, #21]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d002      	beq.n	8009938 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009936:	e0fd      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009938:	2301      	movs	r3, #1
 800993a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009940:	4b20      	ldr	r3, [pc, #128]	@ (80099c4 <RadioSetTxGenericConfig+0x2e8>)
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	f107 0314 	add.w	r3, r7, #20
 8009948:	4a1f      	ldr	r2, [pc, #124]	@ (80099c8 <RadioSetTxGenericConfig+0x2ec>)
 800994a:	4618      	mov	r0, r3
 800994c:	f001 fb04 	bl	800af58 <RFW_Init>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800995a:	e0eb      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800995c:	4b18      	ldr	r3, [pc, #96]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800995e:	2200      	movs	r2, #0
 8009960:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009962:	4b17      	ldr	r3, [pc, #92]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009964:	2201      	movs	r2, #1
 8009966:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009968:	4b15      	ldr	r3, [pc, #84]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800996a:	2200      	movs	r2, #0
 800996c:	755a      	strb	r2, [r3, #21]
        {
 800996e:	e00b      	b.n	8009988 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	7d5a      	ldrb	r2, [r3, #21]
 8009974:	4b12      	ldr	r3, [pc, #72]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009976:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	7d9a      	ldrb	r2, [r3, #22]
 800997c:	4b10      	ldr	r3, [pc, #64]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 800997e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	7d1a      	ldrb	r2, [r3, #20]
 8009984:	4b0e      	ldr	r3, [pc, #56]	@ (80099c0 <RadioSetTxGenericConfig+0x2e4>)
 8009986:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009988:	f7fe fffd 	bl	8008986 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800998c:	2000      	movs	r0, #0
 800998e:	f7fe f991 	bl	8007cb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009992:	480e      	ldr	r0, [pc, #56]	@ (80099cc <RadioSetTxGenericConfig+0x2f0>)
 8009994:	f000 fdec 	bl	800a570 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009998:	480d      	ldr	r0, [pc, #52]	@ (80099d0 <RadioSetTxGenericConfig+0x2f4>)
 800999a:	f000 febb 	bl	800a714 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800999e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f97f 	bl	8009ca6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	8a1b      	ldrh	r3, [r3, #16]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f9c9 	bl	8009d44 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 f9a4 	bl	8009d04 <SUBGRF_SetCrcPolynomial>
        break;
 80099bc:	e0a6      	b.n	8009b0c <RadioSetTxGenericConfig+0x430>
 80099be:	bf00      	nop
 80099c0:	200002d4 	.word	0x200002d4
 80099c4:	200002d0 	.word	0x200002d0
 80099c8:	20000330 	.word	0x20000330
 80099cc:	2000030c 	.word	0x2000030c
 80099d0:	200002e2 	.word	0x200002e2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80099d4:	4b59      	ldr	r3, [pc, #356]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	4b56      	ldr	r3, [pc, #344]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 80099e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	785a      	ldrb	r2, [r3, #1]
 80099ea:	4b54      	ldr	r3, [pc, #336]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 80099ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	789a      	ldrb	r2, [r3, #2]
 80099f4:	4b51      	ldr	r3, [pc, #324]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 80099f6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	78db      	ldrb	r3, [r3, #3]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d010      	beq.n	8009a24 <RadioSetTxGenericConfig+0x348>
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	dc20      	bgt.n	8009a48 <RadioSetTxGenericConfig+0x36c>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <RadioSetTxGenericConfig+0x334>
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d005      	beq.n	8009a1a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009a0e:	e01b      	b.n	8009a48 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a10:	4b4a      	ldr	r3, [pc, #296]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a18:	e017      	b.n	8009a4a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a1a:	4b48      	ldr	r3, [pc, #288]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a22:	e012      	b.n	8009a4a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d003      	beq.n	8009a34 <RadioSetTxGenericConfig+0x358>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b0c      	cmp	r3, #12
 8009a32:	d104      	bne.n	8009a3e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a34:	4b41      	ldr	r3, [pc, #260]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a3c:	e005      	b.n	8009a4a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a46:	e000      	b.n	8009a4a <RadioSetTxGenericConfig+0x36e>
            break;
 8009a48:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	889a      	ldrh	r2, [r3, #4]
 8009a54:	4b39      	ldr	r3, [pc, #228]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a56:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	799a      	ldrb	r2, [r3, #6]
 8009a5c:	4b37      	ldr	r3, [pc, #220]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a5e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	79da      	ldrb	r2, [r3, #7]
 8009a64:	4b35      	ldr	r3, [pc, #212]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a66:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	7a1a      	ldrb	r2, [r3, #8]
 8009a6e:	4b33      	ldr	r3, [pc, #204]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8009a74:	f7fe ff87 	bl	8008986 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f7fe f91b 	bl	8007cb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a7e:	4830      	ldr	r0, [pc, #192]	@ (8009b40 <RadioSetTxGenericConfig+0x464>)
 8009a80:	f000 fd76 	bl	800a570 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a84:	482f      	ldr	r0, [pc, #188]	@ (8009b44 <RadioSetTxGenericConfig+0x468>)
 8009a86:	f000 fe45 	bl	800a714 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	d10d      	bne.n	8009ab0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009a94:	f640 0089 	movw	r0, #2185	@ 0x889
 8009a98:	f000 ff98 	bl	800a9cc <SUBGRF_ReadRegister>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f023 0304 	bic.w	r3, r3, #4
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	f640 0089 	movw	r0, #2185	@ 0x889
 8009aaa:	f000 ff7b 	bl	800a9a4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009aae:	e02d      	b.n	8009b0c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009ab0:	f640 0089 	movw	r0, #2185	@ 0x889
 8009ab4:	f000 ff8a 	bl	800a9cc <SUBGRF_ReadRegister>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f043 0304 	orr.w	r3, r3, #4
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f640 0089 	movw	r0, #2185	@ 0x889
 8009ac6:	f000 ff6d 	bl	800a9a4 <SUBGRF_WriteRegister>
        break;
 8009aca:	e01f      	b.n	8009b0c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <RadioSetTxGenericConfig+0x402>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009adc:	d902      	bls.n	8009ae4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ae2:	e027      	b.n	8009b34 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009ae4:	2003      	movs	r0, #3
 8009ae6:	f7fe f8e5 	bl	8007cb4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009aea:	4b14      	ldr	r3, [pc, #80]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a11      	ldr	r2, [pc, #68]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009af8:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009afa:	4b10      	ldr	r3, [pc, #64]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009afc:	2216      	movs	r2, #22
 8009afe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b02:	480f      	ldr	r0, [pc, #60]	@ (8009b40 <RadioSetTxGenericConfig+0x464>)
 8009b04:	f000 fd34 	bl	800a570 <SUBGRF_SetModulationParams>
        break;
 8009b08:	e000      	b.n	8009b0c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009b0a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 f863 	bl	800abdc <SUBGRF_SetRfTxPower>
 8009b16:	4603      	mov	r3, r0
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b08      	ldr	r3, [pc, #32]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009b1c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009b20:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009b22:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 fa37 	bl	800af9a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b2c:	4a03      	ldr	r2, [pc, #12]	@ (8009b3c <RadioSetTxGenericConfig+0x460>)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6053      	str	r3, [r2, #4]
    return 0;
 8009b32:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3738      	adds	r7, #56	@ 0x38
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200002d4 	.word	0x200002d4
 8009b40:	2000030c 	.word	0x2000030c
 8009b44:	200002e2 	.word	0x200002e2

08009b48 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009b6a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
	...

08009b78 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009b86:	4a1d      	ldr	r2, [pc, #116]	@ (8009bfc <SUBGRF_Init+0x84>)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009b8c:	f7f6 fd7e 	bl	800068c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009b90:	2002      	movs	r0, #2
 8009b92:	f001 f8ff 	bl	800ad94 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009b96:	4b1a      	ldr	r3, [pc, #104]	@ (8009c00 <SUBGRF_Init+0x88>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	f000 f97d 	bl	8009e9c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009ba2:	f001 fd6c 	bl	800b67e <RBI_IsTCXO>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10e      	bne.n	8009bca <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009bac:	2140      	movs	r1, #64	@ 0x40
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f000 fb82 	bl	800a2b8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	f640 1011 	movw	r0, #2321	@ 0x911
 8009bba:	f000 fef3 	bl	800a9a4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009bbe:	237f      	movs	r3, #127	@ 0x7f
 8009bc0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009bc2:	7b38      	ldrb	r0, [r7, #12]
 8009bc4:	f000 fa8b 	bl	800a0de <SUBGRF_Calibrate>
 8009bc8:	e009      	b.n	8009bde <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009bca:	2120      	movs	r1, #32
 8009bcc:	f640 1011 	movw	r0, #2321	@ 0x911
 8009bd0:	f000 fee8 	bl	800a9a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009bd4:	2120      	movs	r1, #32
 8009bd6:	f640 1012 	movw	r0, #2322	@ 0x912
 8009bda:	f000 fee3 	bl	800a9a4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009bde:	210e      	movs	r1, #14
 8009be0:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009be4:	f000 fede 	bl	800a9a4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009be8:	f001 fd26 	bl	800b638 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <SUBGRF_Init+0x8c>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	701a      	strb	r2, [r3, #0]
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2000036c 	.word	0x2000036c
 8009c00:	20000368 	.word	0x20000368
 8009c04:	20000360 	.word	0x20000360

08009c08 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <SUBGRF_GetOperatingMode+0x10>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr
 8009c18:	20000360 	.word	0x20000360

08009c1c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f000 ff24 	bl	800aa7c <SUBGRF_WriteBuffer>
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009c4e:	f107 0317 	add.w	r3, r7, #23
 8009c52:	4619      	mov	r1, r3
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f000 fe27 	bl	800a8a8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	79fa      	ldrb	r2, [r7, #7]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d201      	bcs.n	8009c68 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e007      	b.n	8009c78 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009c68:	7df8      	ldrb	r0, [r7, #23]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	68f9      	ldr	r1, [r7, #12]
 8009c72:	f000 ff25 	bl	800aac0 <SUBGRF_ReadBuffer>

    return 0;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	4619      	mov	r1, r3
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff ffc2 	bl	8009c1c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f91b 	bl	8009ed4 <SUBGRF_SetTx>
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009cae:	2208      	movs	r2, #8
 8009cb0:	6879      	ldr	r1, [r7, #4]
 8009cb2:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8009cb6:	f000 fe9d 	bl	800a9f4 <SUBGRF_WriteRegisters>
    return 0;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	0a1b      	lsrs	r3, r3, #8
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009cde:	f000 fb6f 	bl	800a3c0 <SUBGRF_GetPacketType>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d108      	bne.n	8009cfa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009ce8:	f107 030c 	add.w	r3, r7, #12
 8009cec:	2202      	movs	r2, #2
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009cf4:	f000 fe7e 	bl	800a9f4 <SUBGRF_WriteRegisters>
            break;
 8009cf8:	e000      	b.n	8009cfc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009cfa:	bf00      	nop
    }
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	0a1b      	lsrs	r3, r3, #8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d1e:	f000 fb4f 	bl	800a3c0 <SUBGRF_GetPacketType>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d108      	bne.n	8009d3a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009d28:	f107 030c 	add.w	r3, r7, #12
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f240 60be 	movw	r0, #1726	@ 0x6be
 8009d34:	f000 fe5e 	bl	800a9f4 <SUBGRF_WriteRegisters>
            break;
 8009d38:	e000      	b.n	8009d3c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009d3a:	bf00      	nop
    }
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009d52:	f000 fb35 	bl	800a3c0 <SUBGRF_GetPacketType>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d121      	bne.n	8009da0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009d5c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009d60:	f000 fe34 	bl	800a9cc <SUBGRF_ReadRegister>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	b25a      	sxtb	r2, r3
 8009d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	b25b      	sxtb	r3, r3
 8009d82:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4619      	mov	r1, r3
 8009d88:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009d8c:	f000 fe0a 	bl	800a9a4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009d90:	88fb      	ldrh	r3, [r7, #6]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	4619      	mov	r1, r3
 8009d96:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8009d9a:	f000 fe03 	bl	800a9a4 <SUBGRF_WriteRegister>
            break;
 8009d9e:	e000      	b.n	8009da2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009da0:	bf00      	nop
    }
}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009dbc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009dc0:	f000 fe04 	bl	800a9cc <SUBGRF_ReadRegister>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009dd6:	f000 fde5 	bl	800a9a4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009dda:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009dde:	f000 fdf5 	bl	800a9cc <SUBGRF_ReadRegister>
 8009de2:	4603      	mov	r3, r0
 8009de4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009de6:	79bb      	ldrb	r3, [r7, #6]
 8009de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	4619      	mov	r1, r3
 8009df0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009df4:	f000 fdd6 	bl	800a9a4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009df8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009dfc:	f000 f88a 	bl	8009f14 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009e00:	463b      	mov	r3, r7
 8009e02:	2204      	movs	r2, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	f640 0019 	movw	r0, #2073	@ 0x819
 8009e0a:	f000 fe15 	bl	800aa38 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009e0e:	2000      	movs	r0, #0
 8009e10:	f000 f844 	bl	8009e9c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	4619      	mov	r1, r3
 8009e18:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009e1c:	f000 fdc2 	bl	800a9a4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009e20:	79bb      	ldrb	r3, [r7, #6]
 8009e22:	4619      	mov	r1, r3
 8009e24:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009e28:	f000 fdbc 	bl	800a9a4 <SUBGRF_WriteRegister>

    return number;
 8009e2c:	683b      	ldr	r3, [r7, #0]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009e40:	2000      	movs	r0, #0
 8009e42:	f001 fc04 	bl	800b64e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009e46:	2002      	movs	r0, #2
 8009e48:	f000 ffa4 	bl	800ad94 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009e4c:	793b      	ldrb	r3, [r7, #4]
 8009e4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009e58:	793b      	ldrb	r3, [r7, #4]
 8009e5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	4313      	orrs	r3, r2
 8009e66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009e68:	793b      	ldrb	r3, [r7, #4]
 8009e6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009e72:	4313      	orrs	r3, r2
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009e78:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009e7a:	f107 030f 	add.w	r3, r7, #15
 8009e7e:	2201      	movs	r2, #1
 8009e80:	4619      	mov	r1, r3
 8009e82:	2084      	movs	r0, #132	@ 0x84
 8009e84:	f000 fe3e 	bl	800ab04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009e88:	4b03      	ldr	r3, [pc, #12]	@ (8009e98 <SUBGRF_SetSleep+0x60>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000360 	.word	0x20000360

08009e9c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009ea6:	1dfb      	adds	r3, r7, #7
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	4619      	mov	r1, r3
 8009eac:	2080      	movs	r0, #128	@ 0x80
 8009eae:	f000 fe29 	bl	800ab04 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009eb8:	4b05      	ldr	r3, [pc, #20]	@ (8009ed0 <SUBGRF_SetStandby+0x34>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009ebe:	e002      	b.n	8009ec6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009ec0:	4b03      	ldr	r3, [pc, #12]	@ (8009ed0 <SUBGRF_SetStandby+0x34>)
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	701a      	strb	r2, [r3, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000360 	.word	0x20000360

08009ed4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009edc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <SUBGRF_SetTx+0x3c>)
 8009ede:	2204      	movs	r2, #4
 8009ee0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	0c1b      	lsrs	r3, r3, #16
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	0a1b      	lsrs	r3, r3, #8
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009ef8:	f107 030c 	add.w	r3, r7, #12
 8009efc:	2203      	movs	r2, #3
 8009efe:	4619      	mov	r1, r3
 8009f00:	2083      	movs	r0, #131	@ 0x83
 8009f02:	f000 fdff 	bl	800ab04 <SUBGRF_WriteCommand>
}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000360 	.word	0x20000360

08009f14 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f50 <SUBGRF_SetRx+0x3c>)
 8009f1e:	2205      	movs	r2, #5
 8009f20:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	0c1b      	lsrs	r3, r3, #16
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	0a1b      	lsrs	r3, r3, #8
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	4619      	mov	r1, r3
 8009f40:	2082      	movs	r0, #130	@ 0x82
 8009f42:	f000 fddf 	bl	800ab04 <SUBGRF_WriteCommand>
}
 8009f46:	bf00      	nop
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000360 	.word	0x20000360

08009f54 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f98 <SUBGRF_SetRxBoosted+0x44>)
 8009f5e:	2205      	movs	r2, #5
 8009f60:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009f62:	2197      	movs	r1, #151	@ 0x97
 8009f64:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8009f68:	f000 fd1c 	bl	800a9a4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	0a1b      	lsrs	r3, r3, #8
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009f82:	f107 030c 	add.w	r3, r7, #12
 8009f86:	2203      	movs	r2, #3
 8009f88:	4619      	mov	r1, r3
 8009f8a:	2082      	movs	r0, #130	@ 0x82
 8009f8c:	f000 fdba 	bl	800ab04 <SUBGRF_WriteCommand>
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20000360 	.word	0x20000360

08009f9c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	0a1b      	lsrs	r3, r3, #8
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	0a1b      	lsrs	r3, r3, #8
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	4619      	mov	r1, r3
 8009fda:	2094      	movs	r0, #148	@ 0x94
 8009fdc:	f000 fd92 	bl	800ab04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <SUBGRF_SetRxDutyCycle+0x54>)
 8009fe2:	2206      	movs	r2, #6
 8009fe4:	701a      	strb	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000360 	.word	0x20000360

08009ff4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	20c5      	movs	r0, #197	@ 0xc5
 8009ffe:	f000 fd81 	bl	800ab04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a002:	4b02      	ldr	r3, [pc, #8]	@ (800a00c <SUBGRF_SetCad+0x18>)
 800a004:	2207      	movs	r2, #7
 800a006:	701a      	strb	r2, [r3, #0]
}
 800a008:	bf00      	nop
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000360 	.word	0x20000360

0800a010 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a014:	2200      	movs	r2, #0
 800a016:	2100      	movs	r1, #0
 800a018:	20d1      	movs	r0, #209	@ 0xd1
 800a01a:	f000 fd73 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a01e:	bf00      	nop
 800a020:	bd80      	pop	{r7, pc}

0800a022 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a022:	b580      	push	{r7, lr}
 800a024:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a026:	2200      	movs	r2, #0
 800a028:	2100      	movs	r1, #0
 800a02a:	20d2      	movs	r0, #210	@ 0xd2
 800a02c:	f000 fd6a 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a030:	bf00      	nop
 800a032:	bd80      	pop	{r7, pc}

0800a034 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a03e:	1dfb      	adds	r3, r7, #7
 800a040:	2201      	movs	r2, #1
 800a042:	4619      	mov	r1, r3
 800a044:	209f      	movs	r0, #159	@ 0x9f
 800a046:	f000 fd5d 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a05c:	1dfb      	adds	r3, r7, #7
 800a05e:	2201      	movs	r2, #1
 800a060:	4619      	mov	r1, r3
 800a062:	20a0      	movs	r0, #160	@ 0xa0
 800a064:	f000 fd4e 	bl	800ab04 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a06c:	d91c      	bls.n	800a0a8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a07c:	e005      	b.n	800a08a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	089b      	lsrs	r3, r3, #2
 800a082:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	3301      	adds	r3, #1
 800a088:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b1f      	cmp	r3, #31
 800a08e:	d8f6      	bhi.n	800a07e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	b2da      	uxtb	r2, r3
 800a096:	7bbb      	ldrb	r3, [r7, #14]
 800a098:	4413      	add	r3, r2
 800a09a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a09c:	7b7b      	ldrb	r3, [r7, #13]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f240 7006 	movw	r0, #1798	@ 0x706
 800a0a4:	f000 fc7e 	bl	800a9a4 <SUBGRF_WriteRegister>
    }
}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a0b6:	f001 faed 	bl	800b694 <RBI_IsDCDC>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d102      	bne.n	800a0c6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	e001      	b.n	800a0ca <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a0ca:	1dfb      	adds	r3, r7, #7
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	2096      	movs	r0, #150	@ 0x96
 800a0d2:	f000 fd17 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a0e6:	793b      	ldrb	r3, [r7, #4]
 800a0e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	019b      	lsls	r3, r3, #6
 800a0f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a0f2:	793b      	ldrb	r3, [r7, #4]
 800a0f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	4313      	orrs	r3, r2
 800a100:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a102:	793b      	ldrb	r3, [r7, #4]
 800a104:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a112:	793b      	ldrb	r3, [r7, #4]
 800a114:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a11c:	b25b      	sxtb	r3, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a122:	793b      	ldrb	r3, [r7, #4]
 800a124:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	4313      	orrs	r3, r2
 800a130:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a132:	793b      	ldrb	r3, [r7, #4]
 800a134:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	4313      	orrs	r3, r2
 800a140:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a142:	793b      	ldrb	r3, [r7, #4]
 800a144:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a14c:	4313      	orrs	r3, r2
 800a14e:	b25b      	sxtb	r3, r3
 800a150:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a152:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a154:	f107 030f 	add.w	r3, r7, #15
 800a158:	2201      	movs	r2, #1
 800a15a:	4619      	mov	r1, r3
 800a15c:	2089      	movs	r0, #137	@ 0x89
 800a15e:	f000 fcd1 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ec <SUBGRF_CalibrateImage+0x80>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d904      	bls.n	800a186 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a17c:	23e1      	movs	r3, #225	@ 0xe1
 800a17e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a180:	23e9      	movs	r3, #233	@ 0xe9
 800a182:	737b      	strb	r3, [r7, #13]
 800a184:	e027      	b.n	800a1d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a19      	ldr	r2, [pc, #100]	@ (800a1f0 <SUBGRF_CalibrateImage+0x84>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d904      	bls.n	800a198 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a18e:	23d7      	movs	r3, #215	@ 0xd7
 800a190:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a192:	23db      	movs	r3, #219	@ 0xdb
 800a194:	737b      	strb	r3, [r7, #13]
 800a196:	e01e      	b.n	800a1d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a16      	ldr	r2, [pc, #88]	@ (800a1f4 <SUBGRF_CalibrateImage+0x88>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d904      	bls.n	800a1aa <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a1a0:	23c1      	movs	r3, #193	@ 0xc1
 800a1a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a1a4:	23c5      	movs	r3, #197	@ 0xc5
 800a1a6:	737b      	strb	r3, [r7, #13]
 800a1a8:	e015      	b.n	800a1d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a12      	ldr	r2, [pc, #72]	@ (800a1f8 <SUBGRF_CalibrateImage+0x8c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d904      	bls.n	800a1bc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a1b2:	2375      	movs	r3, #117	@ 0x75
 800a1b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a1b6:	2381      	movs	r3, #129	@ 0x81
 800a1b8:	737b      	strb	r3, [r7, #13]
 800a1ba:	e00c      	b.n	800a1d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a0f      	ldr	r2, [pc, #60]	@ (800a1fc <SUBGRF_CalibrateImage+0x90>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d904      	bls.n	800a1ce <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a1c4:	236b      	movs	r3, #107	@ 0x6b
 800a1c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a1c8:	236f      	movs	r3, #111	@ 0x6f
 800a1ca:	737b      	strb	r3, [r7, #13]
 800a1cc:	e003      	b.n	800a1d6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a1ce:	2329      	movs	r3, #41	@ 0x29
 800a1d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a1d2:	232b      	movs	r3, #43	@ 0x2b
 800a1d4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a1d6:	f107 030c 	add.w	r3, r7, #12
 800a1da:	2202      	movs	r2, #2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2098      	movs	r0, #152	@ 0x98
 800a1e0:	f000 fc90 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	35a4e900 	.word	0x35a4e900
 800a1f0:	32a9f880 	.word	0x32a9f880
 800a1f4:	2de54480 	.word	0x2de54480
 800a1f8:	1b6b0b00 	.word	0x1b6b0b00
 800a1fc:	1954fc40 	.word	0x1954fc40

0800a200 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	4623      	mov	r3, r4
 800a210:	71fb      	strb	r3, [r7, #7]
 800a212:	4603      	mov	r3, r0
 800a214:	71bb      	strb	r3, [r7, #6]
 800a216:	460b      	mov	r3, r1
 800a218:	717b      	strb	r3, [r7, #5]
 800a21a:	4613      	mov	r3, r2
 800a21c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a222:	79bb      	ldrb	r3, [r7, #6]
 800a224:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a226:	797b      	ldrb	r3, [r7, #5]
 800a228:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a22a:	793b      	ldrb	r3, [r7, #4]
 800a22c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a22e:	f107 030c 	add.w	r3, r7, #12
 800a232:	2204      	movs	r2, #4
 800a234:	4619      	mov	r1, r3
 800a236:	2095      	movs	r0, #149	@ 0x95
 800a238:	f000 fc64 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a23c:	bf00      	nop
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bd90      	pop	{r4, r7, pc}

0800a244 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4623      	mov	r3, r4
 800a254:	80fb      	strh	r3, [r7, #6]
 800a256:	4603      	mov	r3, r0
 800a258:	80bb      	strh	r3, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	807b      	strh	r3, [r7, #2]
 800a25e:	4613      	mov	r3, r2
 800a260:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	b29b      	uxth	r3, r3
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a272:	88bb      	ldrh	r3, [r7, #4]
 800a274:	0a1b      	lsrs	r3, r3, #8
 800a276:	b29b      	uxth	r3, r3
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a27c:	88bb      	ldrh	r3, [r7, #4]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a282:	887b      	ldrh	r3, [r7, #2]
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	b29b      	uxth	r3, r3
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a28c:	887b      	ldrh	r3, [r7, #2]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a292:	883b      	ldrh	r3, [r7, #0]
 800a294:	0a1b      	lsrs	r3, r3, #8
 800a296:	b29b      	uxth	r3, r3
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a29c:	883b      	ldrh	r3, [r7, #0]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a2a2:	f107 0308 	add.w	r3, r7, #8
 800a2a6:	2208      	movs	r2, #8
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	2008      	movs	r0, #8
 800a2ac:	f000 fc2a 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a2b0:	bf00      	nop
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}

0800a2b8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	0c1b      	lsrs	r3, r3, #16
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	0a1b      	lsrs	r3, r3, #8
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	2204      	movs	r2, #4
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	2097      	movs	r0, #151	@ 0x97
 800a2ee:	f000 fc09 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a2fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a30a:	4b1d      	ldr	r3, [pc, #116]	@ (800a380 <SUBGRF_SetRfFrequency+0x84>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f083 0301 	eor.w	r3, r3, #1
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff ff27 	bl	800a16c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a31e:	4b18      	ldr	r3, [pc, #96]	@ (800a380 <SUBGRF_SetRfFrequency+0x84>)
 800a320:	2201      	movs	r2, #1
 800a322:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	461c      	mov	r4, r3
 800a32a:	4615      	mov	r5, r2
 800a32c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a330:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a334:	4a13      	ldr	r2, [pc, #76]	@ (800a384 <SUBGRF_SetRfFrequency+0x88>)
 800a336:	f04f 0300 	mov.w	r3, #0
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f5 ff23 	bl	8000188 <__aeabi_uldivmod>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4613      	mov	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	0e1b      	lsrs	r3, r3, #24
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	0c1b      	lsrs	r3, r3, #16
 800a356:	b2db      	uxtb	r3, r3
 800a358:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	0a1b      	lsrs	r3, r3, #8
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a368:	f107 0308 	add.w	r3, r7, #8
 800a36c:	2204      	movs	r2, #4
 800a36e:	4619      	mov	r1, r3
 800a370:	2086      	movs	r0, #134	@ 0x86
 800a372:	f000 fbc7 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a376:	bf00      	nop
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a380:	20000368 	.word	0x20000368
 800a384:	01e84800 	.word	0x01e84800

0800a388 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a392:	79fa      	ldrb	r2, [r7, #7]
 800a394:	4b09      	ldr	r3, [pc, #36]	@ (800a3bc <SUBGRF_SetPacketType+0x34>)
 800a396:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d104      	bne.n	800a3a8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a39e:	2100      	movs	r1, #0
 800a3a0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a3a4:	f000 fafe 	bl	800a9a4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a3a8:	1dfb      	adds	r3, r7, #7
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	208a      	movs	r0, #138	@ 0x8a
 800a3b0:	f000 fba8 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000361 	.word	0x20000361

0800a3c0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
    return PacketType;
 800a3c4:	4b02      	ldr	r3, [pc, #8]	@ (800a3d0 <SUBGRF_GetPacketType+0x10>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr
 800a3d0:	20000361 	.word	0x20000361

0800a3d4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	71bb      	strb	r3, [r7, #6]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d149      	bne.n	800a480 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f001 f95c 	bl	800b6aa <RBI_GetRFOMaxPowerConfig>
 800a3f2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a3f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	da01      	bge.n	800a402 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b0e      	cmp	r3, #14
 800a406:	d10e      	bne.n	800a426 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a408:	2301      	movs	r3, #1
 800a40a:	2201      	movs	r2, #1
 800a40c:	2100      	movs	r1, #0
 800a40e:	2004      	movs	r0, #4
 800a410:	f7ff fef6 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a414:	79ba      	ldrb	r2, [r7, #6]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	330e      	adds	r3, #14
 800a420:	b2db      	uxtb	r3, r3
 800a422:	71bb      	strb	r3, [r7, #6]
 800a424:	e01f      	b.n	800a466 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b0a      	cmp	r3, #10
 800a42a:	d10e      	bne.n	800a44a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a42c:	2301      	movs	r3, #1
 800a42e:	2201      	movs	r2, #1
 800a430:	2100      	movs	r1, #0
 800a432:	2001      	movs	r0, #1
 800a434:	f7ff fee4 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a438:	79ba      	ldrb	r2, [r7, #6]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	b2db      	uxtb	r3, r3
 800a442:	330d      	adds	r3, #13
 800a444:	b2db      	uxtb	r3, r3
 800a446:	71bb      	strb	r3, [r7, #6]
 800a448:	e00d      	b.n	800a466 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a44a:	2301      	movs	r3, #1
 800a44c:	2201      	movs	r2, #1
 800a44e:	2100      	movs	r1, #0
 800a450:	2007      	movs	r0, #7
 800a452:	f7ff fed5 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a456:	79ba      	ldrb	r2, [r7, #6]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	330e      	adds	r3, #14
 800a462:	b2db      	uxtb	r3, r3
 800a464:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a466:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a46a:	f113 0f11 	cmn.w	r3, #17
 800a46e:	da01      	bge.n	800a474 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a470:	23ef      	movs	r3, #239	@ 0xef
 800a472:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a474:	2118      	movs	r1, #24
 800a476:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a47a:	f000 fa93 	bl	800a9a4 <SUBGRF_WriteRegister>
 800a47e:	e067      	b.n	800a550 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a480:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a484:	f000 faa2 	bl	800a9cc <SUBGRF_ReadRegister>
 800a488:	4603      	mov	r3, r0
 800a48a:	f043 031e 	orr.w	r3, r3, #30
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	4619      	mov	r1, r3
 800a492:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a496:	f000 fa85 	bl	800a9a4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a49a:	2001      	movs	r0, #1
 800a49c:	f001 f905 	bl	800b6aa <RBI_GetRFOMaxPowerConfig>
 800a4a0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a4a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	da01      	bge.n	800a4b0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b14      	cmp	r3, #20
 800a4b4:	d10e      	bne.n	800a4d4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2105      	movs	r1, #5
 800a4bc:	2003      	movs	r0, #3
 800a4be:	f7ff fe9f 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a4c2:	79ba      	ldrb	r2, [r7, #6]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	3316      	adds	r3, #22
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	71bb      	strb	r3, [r7, #6]
 800a4d2:	e031      	b.n	800a538 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b11      	cmp	r3, #17
 800a4d8:	d10e      	bne.n	800a4f8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a4da:	2301      	movs	r3, #1
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2103      	movs	r1, #3
 800a4e0:	2002      	movs	r0, #2
 800a4e2:	f7ff fe8d 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a4e6:	79ba      	ldrb	r2, [r7, #6]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	3316      	adds	r3, #22
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	71bb      	strb	r3, [r7, #6]
 800a4f6:	e01f      	b.n	800a538 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b0e      	cmp	r3, #14
 800a4fc:	d10e      	bne.n	800a51c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a4fe:	2301      	movs	r3, #1
 800a500:	2200      	movs	r2, #0
 800a502:	2102      	movs	r1, #2
 800a504:	2002      	movs	r0, #2
 800a506:	f7ff fe7b 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a50a:	79ba      	ldrb	r2, [r7, #6]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	b2db      	uxtb	r3, r3
 800a514:	330e      	adds	r3, #14
 800a516:	b2db      	uxtb	r3, r3
 800a518:	71bb      	strb	r3, [r7, #6]
 800a51a:	e00d      	b.n	800a538 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a51c:	2301      	movs	r3, #1
 800a51e:	2200      	movs	r2, #0
 800a520:	2107      	movs	r1, #7
 800a522:	2004      	movs	r0, #4
 800a524:	f7ff fe6c 	bl	800a200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a528:	79ba      	ldrb	r2, [r7, #6]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	b2db      	uxtb	r3, r3
 800a532:	3316      	adds	r3, #22
 800a534:	b2db      	uxtb	r3, r3
 800a536:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a538:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a53c:	f113 0f09 	cmn.w	r3, #9
 800a540:	da01      	bge.n	800a546 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a542:	23f7      	movs	r3, #247	@ 0xf7
 800a544:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a546:	2138      	movs	r1, #56	@ 0x38
 800a548:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a54c:	f000 fa2a 	bl	800a9a4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a550:	79bb      	ldrb	r3, [r7, #6]
 800a552:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a554:	797b      	ldrb	r3, [r7, #5]
 800a556:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a558:	f107 0308 	add.w	r3, r7, #8
 800a55c:	2202      	movs	r2, #2
 800a55e:	4619      	mov	r1, r3
 800a560:	208e      	movs	r0, #142	@ 0x8e
 800a562:	f000 facf 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a574:	b086      	sub	sp, #24
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a57e:	4a61      	ldr	r2, [pc, #388]	@ (800a704 <SUBGRF_SetModulationParams+0x194>)
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a588:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	781a      	ldrb	r2, [r3, #0]
 800a590:	4b5d      	ldr	r3, [pc, #372]	@ (800a708 <SUBGRF_SetModulationParams+0x198>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d004      	beq.n	800a5a2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fef3 	bl	800a388 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	f200 80a5 	bhi.w	800a6f6 <SUBGRF_SetModulationParams+0x186>
 800a5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b4 <SUBGRF_SetModulationParams+0x44>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5c5 	.word	0x0800a5c5
 800a5b8:	0800a685 	.word	0x0800a685
 800a5bc:	0800a647 	.word	0x0800a647
 800a5c0:	0800a6b3 	.word	0x0800a6b3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	4a4f      	ldr	r2, [pc, #316]	@ (800a70c <SUBGRF_SetModulationParams+0x19c>)
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	0c1b      	lsrs	r3, r3, #16
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	0a1b      	lsrs	r3, r3, #8
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	7b1b      	ldrb	r3, [r3, #12]
 800a5ee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	7b5b      	ldrb	r3, [r3, #13]
 800a5f4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	461c      	mov	r4, r3
 800a5fe:	4615      	mov	r5, r2
 800a600:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a604:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a608:	4a41      	ldr	r2, [pc, #260]	@ (800a710 <SUBGRF_SetModulationParams+0x1a0>)
 800a60a:	f04f 0300 	mov.w	r3, #0
 800a60e:	4640      	mov	r0, r8
 800a610:	4649      	mov	r1, r9
 800a612:	f7f5 fdb9 	bl	8000188 <__aeabi_uldivmod>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4613      	mov	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	0c1b      	lsrs	r3, r3, #16
 800a622:	b2db      	uxtb	r3, r3
 800a624:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	0a1b      	lsrs	r3, r3, #8
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a634:	7cfb      	ldrb	r3, [r7, #19]
 800a636:	b29a      	uxth	r2, r3
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4619      	mov	r1, r3
 800a63e:	208b      	movs	r0, #139	@ 0x8b
 800a640:	f000 fa60 	bl	800ab04 <SUBGRF_WriteCommand>
        break;
 800a644:	e058      	b.n	800a6f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a646:	2304      	movs	r3, #4
 800a648:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	4a2f      	ldr	r2, [pc, #188]	@ (800a70c <SUBGRF_SetModulationParams+0x19c>)
 800a650:	fbb2 f3f3 	udiv	r3, r2, r3
 800a654:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	0c1b      	lsrs	r3, r3, #16
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	0a1b      	lsrs	r3, r3, #8
 800a662:	b2db      	uxtb	r3, r3
 800a664:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7d1b      	ldrb	r3, [r3, #20]
 800a670:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	b29a      	uxth	r2, r3
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	4619      	mov	r1, r3
 800a67c:	208b      	movs	r0, #139	@ 0x8b
 800a67e:	f000 fa41 	bl	800ab04 <SUBGRF_WriteCommand>
        break;
 800a682:	e039      	b.n	800a6f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a684:	2304      	movs	r3, #4
 800a686:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7e1b      	ldrb	r3, [r3, #24]
 800a68c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	7e5b      	ldrb	r3, [r3, #25]
 800a692:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	7e9b      	ldrb	r3, [r3, #26]
 800a698:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	7edb      	ldrb	r3, [r3, #27]
 800a69e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	208b      	movs	r0, #139	@ 0x8b
 800a6ac:	f000 fa2a 	bl	800ab04 <SUBGRF_WriteCommand>

        break;
 800a6b0:	e022      	b.n	800a6f8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a6b2:	2305      	movs	r3, #5
 800a6b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4a14      	ldr	r2, [pc, #80]	@ (800a70c <SUBGRF_SetModulationParams+0x19c>)
 800a6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	0c1b      	lsrs	r3, r3, #16
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	0a1b      	lsrs	r3, r3, #8
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7b1b      	ldrb	r3, [r3, #12]
 800a6dc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7b5b      	ldrb	r3, [r3, #13]
 800a6e2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6e4:	7cfb      	ldrb	r3, [r7, #19]
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	f107 0308 	add.w	r3, r7, #8
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	208b      	movs	r0, #139	@ 0x8b
 800a6f0:	f000 fa08 	bl	800ab04 <SUBGRF_WriteCommand>
        break;
 800a6f4:	e000      	b.n	800a6f8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a6f6:	bf00      	nop
    }
}
 800a6f8:	bf00      	nop
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a702:	bf00      	nop
 800a704:	0800ccfc 	.word	0x0800ccfc
 800a708:	20000361 	.word	0x20000361
 800a70c:	3d090000 	.word	0x3d090000
 800a710:	01e84800 	.word	0x01e84800

0800a714 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a720:	4a48      	ldr	r2, [pc, #288]	@ (800a844 <SUBGRF_SetPacketParams+0x130>)
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	ca07      	ldmia	r2, {r0, r1, r2}
 800a728:	c303      	stmia	r3!, {r0, r1}
 800a72a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	4b45      	ldr	r3, [pc, #276]	@ (800a848 <SUBGRF_SetPacketParams+0x134>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d004      	beq.n	800a742 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7ff fe23 	bl	800a388 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b03      	cmp	r3, #3
 800a748:	d878      	bhi.n	800a83c <SUBGRF_SetPacketParams+0x128>
 800a74a:	a201      	add	r2, pc, #4	@ (adr r2, 800a750 <SUBGRF_SetPacketParams+0x3c>)
 800a74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a750:	0800a761 	.word	0x0800a761
 800a754:	0800a7f1 	.word	0x0800a7f1
 800a758:	0800a7e5 	.word	0x0800a7e5
 800a75c:	0800a761 	.word	0x0800a761
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7a5b      	ldrb	r3, [r3, #9]
 800a764:	2bf1      	cmp	r3, #241	@ 0xf1
 800a766:	d10a      	bne.n	800a77e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a768:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a76c:	f7ff faaa 	bl	8009cc4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a770:	f248 0005 	movw	r0, #32773	@ 0x8005
 800a774:	f7ff fac6 	bl	8009d04 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a778:	2302      	movs	r3, #2
 800a77a:	75bb      	strb	r3, [r7, #22]
 800a77c:	e011      	b.n	800a7a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7a5b      	ldrb	r3, [r3, #9]
 800a782:	2bf2      	cmp	r3, #242	@ 0xf2
 800a784:	d10a      	bne.n	800a79c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a786:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800a78a:	f7ff fa9b 	bl	8009cc4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a78e:	f241 0021 	movw	r0, #4129	@ 0x1021
 800a792:	f7ff fab7 	bl	8009d04 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a796:	2306      	movs	r3, #6
 800a798:	75bb      	strb	r3, [r7, #22]
 800a79a:	e002      	b.n	800a7a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7a5b      	ldrb	r3, [r3, #9]
 800a7a0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a7a2:	2309      	movs	r3, #9
 800a7a4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	885b      	ldrh	r3, [r3, #2]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	795b      	ldrb	r3, [r3, #5]
 800a7c4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	799b      	ldrb	r3, [r3, #6]
 800a7ca:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	79db      	ldrb	r3, [r3, #7]
 800a7d0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7a1b      	ldrb	r3, [r3, #8]
 800a7d6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a7d8:	7dbb      	ldrb	r3, [r7, #22]
 800a7da:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7a9b      	ldrb	r3, [r3, #10]
 800a7e0:	753b      	strb	r3, [r7, #20]
        break;
 800a7e2:	e022      	b.n	800a82a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7b1b      	ldrb	r3, [r3, #12]
 800a7ec:	733b      	strb	r3, [r7, #12]
        break;
 800a7ee:	e01c      	b.n	800a82a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a7f0:	2306      	movs	r3, #6
 800a7f2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	89db      	ldrh	r3, [r3, #14]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	89db      	ldrh	r3, [r3, #14]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	7c1a      	ldrb	r2, [r3, #16]
 800a80c:	4b0f      	ldr	r3, [pc, #60]	@ (800a84c <SUBGRF_SetPacketParams+0x138>)
 800a80e:	4611      	mov	r1, r2
 800a810:	7019      	strb	r1, [r3, #0]
 800a812:	4613      	mov	r3, r2
 800a814:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7c5b      	ldrb	r3, [r3, #17]
 800a81a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7c9b      	ldrb	r3, [r3, #18]
 800a820:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	7cdb      	ldrb	r3, [r3, #19]
 800a826:	747b      	strb	r3, [r7, #17]
        break;
 800a828:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4619      	mov	r1, r3
 800a834:	208c      	movs	r0, #140	@ 0x8c
 800a836:	f000 f965 	bl	800ab04 <SUBGRF_WriteCommand>
 800a83a:	e000      	b.n	800a83e <SUBGRF_SetPacketParams+0x12a>
        return;
 800a83c:	bf00      	nop
}
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	0800cd04 	.word	0x0800cd04
 800a848:	20000361 	.word	0x20000361
 800a84c:	20000362 	.word	0x20000362

0800a850 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	460a      	mov	r2, r1
 800a85a:	71fb      	strb	r3, [r7, #7]
 800a85c:	4613      	mov	r3, r2
 800a85e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a864:	79bb      	ldrb	r3, [r7, #6]
 800a866:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a868:	f107 030c 	add.w	r3, r7, #12
 800a86c:	2202      	movs	r2, #2
 800a86e:	4619      	mov	r1, r3
 800a870:	208f      	movs	r0, #143	@ 0x8f
 800a872:	f000 f947 	bl	800ab04 <SUBGRF_WriteCommand>
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a888:	1d3b      	adds	r3, r7, #4
 800a88a:	2201      	movs	r2, #1
 800a88c:	4619      	mov	r1, r3
 800a88e:	2015      	movs	r0, #21
 800a890:	f000 f95a 	bl	800ab48 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a894:	793b      	ldrb	r3, [r7, #4]
 800a896:	425b      	negs	r3, r3
 800a898:	105b      	asrs	r3, r3, #1
 800a89a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a89c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	2013      	movs	r0, #19
 800a8bc:	f000 f944 	bl	800ab48 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a8c0:	f7ff fd7e 	bl	800a3c0 <SUBGRF_GetPacketType>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10d      	bne.n	800a8e6 <SUBGRF_GetRxBufferStatus+0x3e>
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a8fc <SUBGRF_GetRxBufferStatus+0x54>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d108      	bne.n	800a8e6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a8d4:	f240 7002 	movw	r0, #1794	@ 0x702
 800a8d8:	f000 f878 	bl	800a9cc <SUBGRF_ReadRegister>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e002      	b.n	800a8ec <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a8e6:	7b3a      	ldrb	r2, [r7, #12]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a8ec:	7b7a      	ldrb	r2, [r7, #13]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	701a      	strb	r2, [r3, #0]
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000362 	.word	0x20000362

0800a900 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	2203      	movs	r2, #3
 800a90e:	4619      	mov	r1, r3
 800a910:	2014      	movs	r0, #20
 800a912:	f000 f919 	bl	800ab48 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a916:	f7ff fd53 	bl	800a3c0 <SUBGRF_GetPacketType>
 800a91a:	4603      	mov	r3, r0
 800a91c:	461a      	mov	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <SUBGRF_GetPacketStatus+0x30>
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d013      	beq.n	800a956 <SUBGRF_GetPacketStatus+0x56>
 800a92e:	e02a      	b.n	800a986 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a930:	7b3a      	ldrb	r2, [r7, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a936:	7b7b      	ldrb	r3, [r7, #13]
 800a938:	425b      	negs	r3, r3
 800a93a:	105b      	asrs	r3, r3, #1
 800a93c:	b25a      	sxtb	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	425b      	negs	r3, r3
 800a946:	105b      	asrs	r3, r3, #1
 800a948:	b25a      	sxtb	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	609a      	str	r2, [r3, #8]
            break;
 800a954:	e020      	b.n	800a998 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a956:	7b3b      	ldrb	r3, [r7, #12]
 800a958:	425b      	negs	r3, r3
 800a95a:	105b      	asrs	r3, r3, #1
 800a95c:	b25a      	sxtb	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a962:	7b7b      	ldrb	r3, [r7, #13]
 800a964:	b25b      	sxtb	r3, r3
 800a966:	3302      	adds	r3, #2
 800a968:	109b      	asrs	r3, r3, #2
 800a96a:	b25a      	sxtb	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	425b      	negs	r3, r3
 800a974:	105b      	asrs	r3, r3, #1
 800a976:	b25a      	sxtb	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a97c:	4b08      	ldr	r3, [pc, #32]	@ (800a9a0 <SUBGRF_GetPacketStatus+0xa0>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	611a      	str	r2, [r3, #16]
            break;
 800a984:	e008      	b.n	800a998 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a986:	2214      	movs	r2, #20
 800a988:	2100      	movs	r1, #0
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 ff67 	bl	800b85e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	220f      	movs	r2, #15
 800a994:	701a      	strb	r2, [r3, #0]
            break;
 800a996:	bf00      	nop
    }
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20000364 	.word	0x20000364

0800a9a4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	460a      	mov	r2, r1
 800a9ae:	80fb      	strh	r3, [r7, #6]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a9b4:	1d7a      	adds	r2, r7, #5
 800a9b6:	88f9      	ldrh	r1, [r7, #6]
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4803      	ldr	r0, [pc, #12]	@ (800a9c8 <SUBGRF_WriteRegister+0x24>)
 800a9bc:	f7f9 fe78 	bl	80046b0 <HAL_SUBGHZ_WriteRegisters>
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	20000070 	.word	0x20000070

0800a9cc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a9d6:	f107 020f 	add.w	r2, r7, #15
 800a9da:	88f9      	ldrh	r1, [r7, #6]
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4804      	ldr	r0, [pc, #16]	@ (800a9f0 <SUBGRF_ReadRegister+0x24>)
 800a9e0:	f7f9 fec5 	bl	800476e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000070 	.word	0x20000070

0800a9f4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	80fb      	strh	r3, [r7, #6]
 800aa00:	4613      	mov	r3, r2
 800aa02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa04:	f3ef 8310 	mrs	r3, PRIMASK
 800aa08:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa0e:	b672      	cpsid	i
}
 800aa10:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aa12:	88bb      	ldrh	r3, [r7, #4]
 800aa14:	88f9      	ldrh	r1, [r7, #6]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	4806      	ldr	r0, [pc, #24]	@ (800aa34 <SUBGRF_WriteRegisters+0x40>)
 800aa1a:	f7f9 fe49 	bl	80046b0 <HAL_SUBGHZ_WriteRegisters>
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f383 8810 	msr	PRIMASK, r3
}
 800aa28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa2a:	bf00      	nop
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000070 	.word	0x20000070

0800aa38 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	80fb      	strh	r3, [r7, #6]
 800aa44:	4613      	mov	r3, r2
 800aa46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa48:	f3ef 8310 	mrs	r3, PRIMASK
 800aa4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa52:	b672      	cpsid	i
}
 800aa54:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aa56:	88bb      	ldrh	r3, [r7, #4]
 800aa58:	88f9      	ldrh	r1, [r7, #6]
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4806      	ldr	r0, [pc, #24]	@ (800aa78 <SUBGRF_ReadRegisters+0x40>)
 800aa5e:	f7f9 fe86 	bl	800476e <HAL_SUBGHZ_ReadRegisters>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f383 8810 	msr	PRIMASK, r3
}
 800aa6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa6e:	bf00      	nop
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000070 	.word	0x20000070

0800aa7c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	6039      	str	r1, [r7, #0]
 800aa86:	71fb      	strb	r3, [r7, #7]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa8c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa90:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa96:	b672      	cpsid	i
}
 800aa98:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800aa9a:	79bb      	ldrb	r3, [r7, #6]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	79f9      	ldrb	r1, [r7, #7]
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	4806      	ldr	r0, [pc, #24]	@ (800aabc <SUBGRF_WriteBuffer+0x40>)
 800aaa4:	f7f9 ff77 	bl	8004996 <HAL_SUBGHZ_WriteBuffer>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f383 8810 	msr	PRIMASK, r3
}
 800aab2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aab4:	bf00      	nop
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20000070 	.word	0x20000070

0800aac0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
 800aacc:	4613      	mov	r3, r2
 800aace:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad0:	f3ef 8310 	mrs	r3, PRIMASK
 800aad4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aad6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aada:	b672      	cpsid	i
}
 800aadc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800aade:	79bb      	ldrb	r3, [r7, #6]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	79f9      	ldrb	r1, [r7, #7]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	4806      	ldr	r0, [pc, #24]	@ (800ab00 <SUBGRF_ReadBuffer+0x40>)
 800aae8:	f7f9 ffa8 	bl	8004a3c <HAL_SUBGHZ_ReadBuffer>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f383 8810 	msr	PRIMASK, r3
}
 800aaf6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	20000070 	.word	0x20000070

0800ab04 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
 800ab10:	4613      	mov	r3, r2
 800ab12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab14:	f3ef 8310 	mrs	r3, PRIMASK
 800ab18:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab1e:	b672      	cpsid	i
}
 800ab20:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ab22:	88bb      	ldrh	r3, [r7, #4]
 800ab24:	79f9      	ldrb	r1, [r7, #7]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4806      	ldr	r0, [pc, #24]	@ (800ab44 <SUBGRF_WriteCommand+0x40>)
 800ab2a:	f7f9 fe81 	bl	8004830 <HAL_SUBGHZ_ExecSetCmd>
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f383 8810 	msr	PRIMASK, r3
}
 800ab38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab3a:	bf00      	nop
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20000070 	.word	0x20000070

0800ab48 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	71fb      	strb	r3, [r7, #7]
 800ab54:	4613      	mov	r3, r2
 800ab56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab58:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab62:	b672      	cpsid	i
}
 800ab64:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800ab66:	88bb      	ldrh	r3, [r7, #4]
 800ab68:	79f9      	ldrb	r1, [r7, #7]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	4806      	ldr	r0, [pc, #24]	@ (800ab88 <SUBGRF_ReadCommand+0x40>)
 800ab6e:	f7f9 febe 	bl	80048ee <HAL_SUBGHZ_ExecGetCmd>
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f383 8810 	msr	PRIMASK, r3
}
 800ab7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab7e:	bf00      	nop
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000070 	.word	0x20000070

0800ab8c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	460a      	mov	r2, r1
 800ab96:	71fb      	strb	r3, [r7, #7]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800aba0:	79bb      	ldrb	r3, [r7, #6]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d10d      	bne.n	800abc2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d104      	bne.n	800abb6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800abac:	2302      	movs	r3, #2
 800abae:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800abb0:	2004      	movs	r0, #4
 800abb2:	f000 f8ef 	bl	800ad94 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d107      	bne.n	800abcc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800abbc:	2303      	movs	r3, #3
 800abbe:	73fb      	strb	r3, [r7, #15]
 800abc0:	e004      	b.n	800abcc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800abc2:	79bb      	ldrb	r3, [r7, #6]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 fd3d 	bl	800b64e <RBI_ConfigRFSwitch>
}
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800abe6:	2301      	movs	r3, #1
 800abe8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800abea:	f000 fd3d 	bl	800b668 <RBI_GetTxConfig>
 800abee:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d016      	beq.n	800ac24 <SUBGRF_SetRfTxPower+0x48>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	dc16      	bgt.n	800ac2a <SUBGRF_SetRfTxPower+0x4e>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <SUBGRF_SetRfTxPower+0x2e>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d00a      	beq.n	800ac1e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ac08:	e00f      	b.n	800ac2a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ac0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac0e:	2b0f      	cmp	r3, #15
 800ac10:	dd02      	ble.n	800ac18 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ac12:	2302      	movs	r3, #2
 800ac14:	73fb      	strb	r3, [r7, #15]
            break;
 800ac16:	e009      	b.n	800ac2c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
            break;
 800ac1c:	e006      	b.n	800ac2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	73fb      	strb	r3, [r7, #15]
            break;
 800ac22:	e003      	b.n	800ac2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ac24:	2302      	movs	r3, #2
 800ac26:	73fb      	strb	r3, [r7, #15]
            break;
 800ac28:	e000      	b.n	800ac2c <SUBGRF_SetRfTxPower+0x50>
            break;
 800ac2a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ac2c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	2202      	movs	r2, #2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff fbcd 	bl	800a3d4 <SUBGRF_SetTxParams>

    return paSelect;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ac48:	2301      	movs	r3, #1
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bc80      	pop	{r7}
 800ac50:	4770      	bx	lr
	...

0800ac54 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800ac5c:	4b03      	ldr	r3, [pc, #12]	@ (800ac6c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2001      	movs	r0, #1
 800ac62:	4798      	blx	r3
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	2000036c 	.word	0x2000036c

0800ac70 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800ac78:	4b03      	ldr	r3, [pc, #12]	@ (800ac88 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2002      	movs	r0, #2
 800ac7e:	4798      	blx	r3
}
 800ac80:	bf00      	nop
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	2000036c 	.word	0x2000036c

0800ac8c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ac94:	4b03      	ldr	r3, [pc, #12]	@ (800aca4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2040      	movs	r0, #64	@ 0x40
 800ac9a:	4798      	blx	r3
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	2000036c 	.word	0x2000036c

0800aca8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d005      	beq.n	800acca <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800acbe:	e00a      	b.n	800acd6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800acc0:	4b07      	ldr	r3, [pc, #28]	@ (800ace0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2080      	movs	r0, #128	@ 0x80
 800acc6:	4798      	blx	r3
            break;
 800acc8:	e005      	b.n	800acd6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800acca:	4b05      	ldr	r3, [pc, #20]	@ (800ace0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800acd2:	4798      	blx	r3
            break;
 800acd4:	bf00      	nop
    }
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2000036c 	.word	0x2000036c

0800ace4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800acf4:	4798      	blx	r3
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	2000036c 	.word	0x2000036c

0800ad04 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ad0c:	4b03      	ldr	r3, [pc, #12]	@ (800ad1c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2020      	movs	r0, #32
 800ad12:	4798      	blx	r3
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	2000036c 	.word	0x2000036c

0800ad20 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ad28:	4b03      	ldr	r3, [pc, #12]	@ (800ad38 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2004      	movs	r0, #4
 800ad2e:	4798      	blx	r3
}
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	2000036c 	.word	0x2000036c

0800ad3c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2008      	movs	r0, #8
 800ad4a:	4798      	blx	r3
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	2000036c 	.word	0x2000036c

0800ad58 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ad60:	4b03      	ldr	r3, [pc, #12]	@ (800ad70 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2010      	movs	r0, #16
 800ad66:	4798      	blx	r3
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	2000036c 	.word	0x2000036c

0800ad74 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ad7c:	4b04      	ldr	r3, [pc, #16]	@ (800ad90 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ad84:	4798      	blx	r3
}
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	2000036c 	.word	0x2000036c

0800ad94 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ad9e:	f000 fc79 	bl	800b694 <RBI_IsDCDC>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d112      	bne.n	800adce <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ada8:	f640 1023 	movw	r0, #2339	@ 0x923
 800adac:	f7ff fe0e 	bl	800a9cc <SUBGRF_ReadRegister>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	f023 0306 	bic.w	r3, r3, #6
 800adba:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800adbc:	7bfa      	ldrb	r2, [r7, #15]
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	4619      	mov	r1, r3
 800adc6:	f640 1023 	movw	r0, #2339	@ 0x923
 800adca:	f7ff fdeb 	bl	800a9a4 <SUBGRF_WriteRegister>
  }
}
 800adce:	bf00      	nop
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d101      	bne.n	800adea <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ade6:	231f      	movs	r3, #31
 800ade8:	e017      	b.n	800ae1a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]
 800adee:	e00f      	b.n	800ae10 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ae24 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800adf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d205      	bcs.n	800ae0a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	4a08      	ldr	r2, [pc, #32]	@ (800ae24 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	4413      	add	r3, r2
 800ae06:	791b      	ldrb	r3, [r3, #4]
 800ae08:	e007      	b.n	800ae1a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	73fb      	strb	r3, [r7, #15]
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b15      	cmp	r3, #21
 800ae14:	d9ec      	bls.n	800adf0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ae16:	bf00      	nop
 800ae18:	e7fd      	b.n	800ae16 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr
 800ae24:	0800d0e4 	.word	0x0800d0e4

0800ae28 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	@ 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ae32:	4b35      	ldr	r3, [pc, #212]	@ (800af08 <SUBGRF_GetCFO+0xe0>)
 800ae34:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ae36:	f640 0007 	movw	r0, #2055	@ 0x807
 800ae3a:	f7ff fdc7 	bl	800a9cc <SUBGRF_ReadRegister>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ae42:	7ffb      	ldrb	r3, [r7, #31]
 800ae44:	08db      	lsrs	r3, r3, #3
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 0303 	and.w	r3, r3, #3
 800ae4c:	3328      	adds	r3, #40	@ 0x28
 800ae4e:	443b      	add	r3, r7
 800ae50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ae54:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800ae56:	7ffb      	ldrb	r3, [r7, #31]
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800ae5e:	7fba      	ldrb	r2, [r7, #30]
 800ae60:	7f7b      	ldrb	r3, [r7, #29]
 800ae62:	3301      	adds	r3, #1
 800ae64:	fa02 f303 	lsl.w	r3, r2, r3
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4b28      	ldr	r3, [pc, #160]	@ (800af0c <SUBGRF_GetCFO+0xe4>)
 800ae6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae70:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae7a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800ae82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	fb02 f303 	mul.w	r3, r2, r3
 800ae8c:	2b07      	cmp	r3, #7
 800ae8e:	d802      	bhi.n	800ae96 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800ae90:	2302      	movs	r3, #2
 800ae92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800ae96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	fb02 f303 	mul.w	r3, r2, r3
 800aea0:	2b03      	cmp	r3, #3
 800aea2:	d802      	bhi.n	800aeaa <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800aea4:	2304      	movs	r3, #4
 800aea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800aeaa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	fb02 f303 	mul.w	r3, r2, r3
 800aeb4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800aeb6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800aeba:	f7ff fd87 	bl	800a9cc <SUBGRF_ReadRegister>
 800aebe:	4603      	mov	r3, r0
 800aec0:	021b      	lsls	r3, r3, #8
 800aec2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800aec6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800aec8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800aecc:	f7ff fd7e 	bl	800a9cc <SUBGRF_ReadRegister>
 800aed0:	4603      	mov	r3, r0
 800aed2:	461a      	mov	r2, r3
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aeea:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aeee:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	095b      	lsrs	r3, r3, #5
 800aef4:	6a3a      	ldr	r2, [r7, #32]
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
 800aefa:	11da      	asrs	r2, r3, #7
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	601a      	str	r2, [r3, #0]
}
 800af00:	bf00      	nop
 800af02:	3728      	adds	r7, #40	@ 0x28
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	0c0a0804 	.word	0x0c0a0804
 800af0c:	01e84800 	.word	0x01e84800

0800af10 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af26:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800af28:	697b      	ldr	r3, [r7, #20]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	371c      	adds	r7, #28
 800af2e:	46bd      	mov	sp, r7
 800af30:	bc80      	pop	{r7}
 800af32:	4770      	bx	lr

0800af34 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800af46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af4a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800af4c:	697b      	ldr	r3, [r7, #20]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	371c      	adds	r7, #28
 800af52:	46bd      	mov	sp, r7
 800af54:	bc80      	pop	{r7}
 800af56:	4770      	bx	lr

0800af58 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800af64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bc80      	pop	{r7}
 800af70:	4770      	bx	lr

0800af72 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800af72:	b480      	push	{r7}
 800af74:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	bc80      	pop	{r7}
 800af7c:	4770      	bx	lr

0800af7e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800af7e:	b480      	push	{r7}
 800af80:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800af82:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800af84:	4618      	mov	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr

0800af8c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800af90:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800af92:	4618      	mov	r0, r3
 800af94:	46bd      	mov	sp, r7
 800af96:	bc80      	pop	{r7}
 800af98:	4770      	bx	lr

0800af9a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	4603      	mov	r3, r0
 800afa2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr

0800afae <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800afae:	b480      	push	{r7}
 800afb0:	b087      	sub	sp, #28
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	460b      	mov	r3, r1
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800afbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afc0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	371c      	adds	r7, #28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800afce:	b480      	push	{r7}
 800afd0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800afd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr

0800afde <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800afde:	b480      	push	{r7}
 800afe0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800afe2:	bf00      	nop
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800afea:	b480      	push	{r7}
 800afec:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800afee:	bf00      	nop
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr

0800aff6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	4603      	mov	r3, r0
 800affe:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	bc80      	pop	{r7}
 800b008:	4770      	bx	lr

0800b00a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b00e:	f7f5 feed 	bl	8000dec <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b012:	f000 f80b 	bl	800b02c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b016:	bf00      	nop
 800b018:	bd80      	pop	{r7, pc}

0800b01a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b022:	f000 ff0f 	bl	800be44 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b08b      	sub	sp, #44	@ 0x2c
 800b030:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800b032:	4b5e      	ldr	r3, [pc, #376]	@ (800b1ac <SubghzApp_Init+0x180>)
 800b034:	2200      	movs	r2, #0
 800b036:	2100      	movs	r1, #0
 800b038:	2002      	movs	r0, #2
 800b03a:	f001 fb3d 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b03e:	2300      	movs	r3, #0
 800b040:	9302      	str	r3, [sp, #8]
 800b042:	2303      	movs	r3, #3
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2301      	movs	r3, #1
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	4b59      	ldr	r3, [pc, #356]	@ (800b1b0 <SubghzApp_Init+0x184>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	2100      	movs	r1, #0
 800b050:	2002      	movs	r0, #2
 800b052:	f001 fb31 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b056:	2300      	movs	r3, #0
 800b058:	9302      	str	r3, [sp, #8]
 800b05a:	2303      	movs	r3, #3
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	2301      	movs	r3, #1
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	4b54      	ldr	r3, [pc, #336]	@ (800b1b4 <SubghzApp_Init+0x188>)
 800b064:	2200      	movs	r2, #0
 800b066:	2100      	movs	r1, #0
 800b068:	2002      	movs	r0, #2
 800b06a:	f001 fb25 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800b06e:	2300      	movs	r3, #0
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4b51      	ldr	r3, [pc, #324]	@ (800b1b8 <SubghzApp_Init+0x18c>)
 800b074:	2200      	movs	r2, #0
 800b076:	21c8      	movs	r1, #200	@ 0xc8
 800b078:	4850      	ldr	r0, [pc, #320]	@ (800b1bc <SubghzApp_Init+0x190>)
 800b07a:	f001 f881 	bl	800c180 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800b07e:	484f      	ldr	r0, [pc, #316]	@ (800b1bc <SubghzApp_Init+0x190>)
 800b080:	f001 f8b4 	bl	800c1ec <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b084:	4b4e      	ldr	r3, [pc, #312]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b086:	4a4f      	ldr	r2, [pc, #316]	@ (800b1c4 <SubghzApp_Init+0x198>)
 800b088:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b08a:	4b4d      	ldr	r3, [pc, #308]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b08c:	4a4e      	ldr	r2, [pc, #312]	@ (800b1c8 <SubghzApp_Init+0x19c>)
 800b08e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b090:	4b4b      	ldr	r3, [pc, #300]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b092:	4a4e      	ldr	r2, [pc, #312]	@ (800b1cc <SubghzApp_Init+0x1a0>)
 800b094:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b096:	4b4a      	ldr	r3, [pc, #296]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b098:	4a4d      	ldr	r2, [pc, #308]	@ (800b1d0 <SubghzApp_Init+0x1a4>)
 800b09a:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b09c:	4b48      	ldr	r3, [pc, #288]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b09e:	4a4d      	ldr	r2, [pc, #308]	@ (800b1d4 <SubghzApp_Init+0x1a8>)
 800b0a0:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b0a2:	4b4d      	ldr	r3, [pc, #308]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4846      	ldr	r0, [pc, #280]	@ (800b1c0 <SubghzApp_Init+0x194>)
 800b0a8:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800b0aa:	4b4b      	ldr	r3, [pc, #300]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	4798      	blx	r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	0d9b      	lsrs	r3, r3, #22
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4b49      	ldr	r3, [pc, #292]	@ (800b1dc <SubghzApp_Init+0x1b0>)
 800b0b8:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800b0ba:	4b47      	ldr	r3, [pc, #284]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	4848      	ldr	r0, [pc, #288]	@ (800b1e0 <SubghzApp_Init+0x1b4>)
 800b0c0:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800b0c2:	4b48      	ldr	r3, [pc, #288]	@ (800b1e4 <SubghzApp_Init+0x1b8>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	2002      	movs	r0, #2
 800b0ca:	f001 faf5 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800b0ce:	4b46      	ldr	r3, [pc, #280]	@ (800b1e8 <SubghzApp_Init+0x1bc>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	2002      	movs	r0, #2
 800b0d6:	f001 faef 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800b0da:	237d      	movs	r3, #125	@ 0x7d
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	4b43      	ldr	r3, [pc, #268]	@ (800b1ec <SubghzApp_Init+0x1c0>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	2002      	movs	r0, #2
 800b0e6:	f001 fae7 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800b0ea:	2307      	movs	r3, #7
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	4b40      	ldr	r3, [pc, #256]	@ (800b1f0 <SubghzApp_Init+0x1c4>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	2002      	movs	r0, #2
 800b0f6:	f001 fadf 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800b0fa:	4b37      	ldr	r3, [pc, #220]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b0fc:	69dc      	ldr	r4, [r3, #28]
 800b0fe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	2300      	movs	r3, #0
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	2300      	movs	r3, #0
 800b10a:	9306      	str	r3, [sp, #24]
 800b10c:	2300      	movs	r3, #0
 800b10e:	9305      	str	r3, [sp, #20]
 800b110:	2301      	movs	r3, #1
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	2300      	movs	r3, #0
 800b116:	9303      	str	r3, [sp, #12]
 800b118:	2308      	movs	r3, #8
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	2301      	movs	r3, #1
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	2307      	movs	r3, #7
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	2300      	movs	r3, #0
 800b126:	2200      	movs	r2, #0
 800b128:	210e      	movs	r1, #14
 800b12a:	2001      	movs	r0, #1
 800b12c:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800b12e:	4b2a      	ldr	r3, [pc, #168]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b130:	699c      	ldr	r4, [r3, #24]
 800b132:	2301      	movs	r3, #1
 800b134:	9309      	str	r3, [sp, #36]	@ 0x24
 800b136:	2300      	movs	r3, #0
 800b138:	9308      	str	r3, [sp, #32]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9307      	str	r3, [sp, #28]
 800b13e:	2300      	movs	r3, #0
 800b140:	9306      	str	r3, [sp, #24]
 800b142:	2301      	movs	r3, #1
 800b144:	9305      	str	r3, [sp, #20]
 800b146:	2300      	movs	r3, #0
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	2300      	movs	r3, #0
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	2305      	movs	r3, #5
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	2308      	movs	r3, #8
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	2300      	movs	r3, #0
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	2301      	movs	r3, #1
 800b15c:	2207      	movs	r2, #7
 800b15e:	2100      	movs	r1, #0
 800b160:	2001      	movs	r0, #1
 800b162:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800b164:	4b1c      	ldr	r3, [pc, #112]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b168:	21ff      	movs	r1, #255	@ 0xff
 800b16a:	2001      	movs	r0, #1
 800b16c:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800b16e:	22ff      	movs	r2, #255	@ 0xff
 800b170:	2100      	movs	r1, #0
 800b172:	4820      	ldr	r0, [pc, #128]	@ (800b1f4 <SubghzApp_Init+0x1c8>)
 800b174:	f001 fd2a 	bl	800cbcc <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800b178:	4b18      	ldr	r3, [pc, #96]	@ (800b1dc <SubghzApp_Init+0x1b0>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f8 <SubghzApp_Init+0x1cc>)
 800b180:	2201      	movs	r2, #1
 800b182:	2100      	movs	r1, #0
 800b184:	2001      	movs	r0, #1
 800b186:	f001 fa97 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800b18a:	4b13      	ldr	r3, [pc, #76]	@ (800b1d8 <SubghzApp_Init+0x1ac>)
 800b18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b18e:	4a13      	ldr	r2, [pc, #76]	@ (800b1dc <SubghzApp_Init+0x1b0>)
 800b190:	6812      	ldr	r2, [r2, #0]
 800b192:	f602 32b8 	addw	r2, r2, #3000	@ 0xbb8
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800b19a:	4a18      	ldr	r2, [pc, #96]	@ (800b1fc <SubghzApp_Init+0x1d0>)
 800b19c:	2100      	movs	r1, #0
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f000 ff4c 	bl	800c03c <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800b1a4:	bf00      	nop
 800b1a6:	3704      	adds	r7, #4
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd90      	pop	{r4, r7, pc}
 800b1ac:	0800cd10 	.word	0x0800cd10
 800b1b0:	0800cd20 	.word	0x0800cd20
 800b1b4:	0800cd44 	.word	0x0800cd44
 800b1b8:	0800b611 	.word	0x0800b611
 800b1bc:	20000594 	.word	0x20000594
 800b1c0:	20000370 	.word	0x20000370
 800b1c4:	0800b201 	.word	0x0800b201
 800b1c8:	0800b22d 	.word	0x0800b22d
 800b1cc:	0800b341 	.word	0x0800b341
 800b1d0:	0800b36d 	.word	0x0800b36d
 800b1d4:	0800b399 	.word	0x0800b399
 800b1d8:	0800d054 	.word	0x0800d054
 800b1dc:	200005ac 	.word	0x200005ac
 800b1e0:	36df3dc0 	.word	0x36df3dc0
 800b1e4:	0800cd68 	.word	0x0800cd68
 800b1e8:	0800cd7c 	.word	0x0800cd7c
 800b1ec:	0800cd90 	.word	0x0800cd90
 800b1f0:	0800cda4 	.word	0x0800cda4
 800b1f4:	20000490 	.word	0x20000490
 800b1f8:	0800cdb4 	.word	0x0800cdb4
 800b1fc:	0800b3c5 	.word	0x0800b3c5

0800b200 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800b204:	4b07      	ldr	r3, [pc, #28]	@ (800b224 <OnTxDone+0x24>)
 800b206:	2201      	movs	r2, #1
 800b208:	2100      	movs	r1, #0
 800b20a:	2001      	movs	r0, #1
 800b20c:	f001 fa54 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800b210:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <OnTxDone+0x28>)
 800b212:	2203      	movs	r2, #3
 800b214:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b216:	2100      	movs	r1, #0
 800b218:	2001      	movs	r0, #1
 800b21a:	f000 ff31 	bl	800c080 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800b21e:	bf00      	nop
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	0800cdc0 	.word	0x0800cdc0
 800b228:	2000038c 	.word	0x2000038c

0800b22c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af02      	add	r7, sp, #8
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	4608      	mov	r0, r1
 800b236:	4611      	mov	r1, r2
 800b238:	461a      	mov	r2, r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	817b      	strh	r3, [r7, #10]
 800b23e:	460b      	mov	r3, r1
 800b240:	813b      	strh	r3, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800b246:	4b34      	ldr	r3, [pc, #208]	@ (800b318 <OnRxDone+0xec>)
 800b248:	2201      	movs	r2, #1
 800b24a:	2100      	movs	r1, #0
 800b24c:	2001      	movs	r0, #1
 800b24e:	f001 fa33 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800b252:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b256:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800b25a:	9201      	str	r2, [sp, #4]
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	4b2f      	ldr	r3, [pc, #188]	@ (800b31c <OnRxDone+0xf0>)
 800b260:	2201      	movs	r2, #1
 800b262:	2100      	movs	r1, #0
 800b264:	2001      	movs	r0, #1
 800b266:	f001 fa27 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800b26a:	4a2d      	ldr	r2, [pc, #180]	@ (800b320 <OnRxDone+0xf4>)
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800b270:	4b2c      	ldr	r3, [pc, #176]	@ (800b324 <OnRxDone+0xf8>)
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800b276:	22ff      	movs	r2, #255	@ 0xff
 800b278:	2100      	movs	r1, #0
 800b27a:	482b      	ldr	r0, [pc, #172]	@ (800b328 <OnRxDone+0xfc>)
 800b27c:	f001 fca6 	bl	800cbcc <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800b280:	4a2a      	ldr	r2, [pc, #168]	@ (800b32c <OnRxDone+0x100>)
 800b282:	897b      	ldrh	r3, [r7, #10]
 800b284:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800b286:	4b29      	ldr	r3, [pc, #164]	@ (800b32c <OnRxDone+0x100>)
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	2bff      	cmp	r3, #255	@ 0xff
 800b28c:	d806      	bhi.n	800b29c <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800b28e:	4b27      	ldr	r3, [pc, #156]	@ (800b32c <OnRxDone+0x100>)
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	4824      	ldr	r0, [pc, #144]	@ (800b328 <OnRxDone+0xfc>)
 800b298:	f001 fcc4 	bl	800cc24 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800b29c:	893b      	ldrh	r3, [r7, #8]
 800b29e:	b25a      	sxtb	r2, r3
 800b2a0:	4b23      	ldr	r3, [pc, #140]	@ (800b330 <OnRxDone+0x104>)
 800b2a2:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800b2a4:	897b      	ldrh	r3, [r7, #10]
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	4b22      	ldr	r3, [pc, #136]	@ (800b334 <OnRxDone+0x108>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	2003      	movs	r0, #3
 800b2b0:	f001 fa02 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e01d      	b.n	800b2f6 <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800b2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b328 <OnRxDone+0xfc>)
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b338 <OnRxDone+0x10c>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	2003      	movs	r0, #3
 800b2cc:	f001 f9f4 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	425a      	negs	r2, r3
 800b2d4:	f003 030f 	and.w	r3, r3, #15
 800b2d8:	f002 020f 	and.w	r2, r2, #15
 800b2dc:	bf58      	it	pl
 800b2de:	4253      	negpl	r3, r2
 800b2e0:	2b0f      	cmp	r3, #15
 800b2e2:	d105      	bne.n	800b2f0 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800b2e4:	4b15      	ldr	r3, [pc, #84]	@ (800b33c <OnRxDone+0x110>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	2003      	movs	r0, #3
 800b2ec:	f001 f9e4 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2fa:	ddde      	ble.n	800b2ba <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <OnRxDone+0x110>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	2003      	movs	r0, #3
 800b304:	f001 f9d8 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b308:	2100      	movs	r1, #0
 800b30a:	2001      	movs	r0, #1
 800b30c:	f000 feb8 	bl	800c080 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800b310:	bf00      	nop
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	0800cdcc 	.word	0x0800cdcc
 800b31c:	0800cdd8 	.word	0x0800cdd8
 800b320:	20000593 	.word	0x20000593
 800b324:	2000038c 	.word	0x2000038c
 800b328:	20000390 	.word	0x20000390
 800b32c:	20000590 	.word	0x20000590
 800b330:	20000592 	.word	0x20000592
 800b334:	0800cdfc 	.word	0x0800cdfc
 800b338:	0800ce10 	.word	0x0800ce10
 800b33c:	0800ce18 	.word	0x0800ce18

0800b340 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800b344:	4b07      	ldr	r3, [pc, #28]	@ (800b364 <OnTxTimeout+0x24>)
 800b346:	2201      	movs	r2, #1
 800b348:	2100      	movs	r1, #0
 800b34a:	2001      	movs	r0, #1
 800b34c:	f001 f9b4 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800b350:	4b05      	ldr	r3, [pc, #20]	@ (800b368 <OnTxTimeout+0x28>)
 800b352:	2204      	movs	r2, #4
 800b354:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b356:	2100      	movs	r1, #0
 800b358:	2001      	movs	r0, #1
 800b35a:	f000 fe91 	bl	800c080 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800b35e:	bf00      	nop
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	0800ce1c 	.word	0x0800ce1c
 800b368:	2000038c 	.word	0x2000038c

0800b36c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800b370:	4b07      	ldr	r3, [pc, #28]	@ (800b390 <OnRxTimeout+0x24>)
 800b372:	2201      	movs	r2, #1
 800b374:	2100      	movs	r1, #0
 800b376:	2001      	movs	r0, #1
 800b378:	f001 f99e 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800b37c:	4b05      	ldr	r3, [pc, #20]	@ (800b394 <OnRxTimeout+0x28>)
 800b37e:	2201      	movs	r2, #1
 800b380:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b382:	2100      	movs	r1, #0
 800b384:	2001      	movs	r0, #1
 800b386:	f000 fe7b 	bl	800c080 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800b38a:	bf00      	nop
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800ce2c 	.word	0x0800ce2c
 800b394:	2000038c 	.word	0x2000038c

0800b398 <OnRxError>:

static void OnRxError(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800b39c:	4b07      	ldr	r3, [pc, #28]	@ (800b3bc <OnRxError+0x24>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f001 f988 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800b3a8:	4b05      	ldr	r3, [pc, #20]	@ (800b3c0 <OnRxError+0x28>)
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	f000 fe65 	bl	800c080 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800b3b6:	bf00      	nop
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800ce3c 	.word	0x0800ce3c
 800b3c0:	2000038c 	.word	0x2000038c

0800b3c4 <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800b3c8:	4b7f      	ldr	r3, [pc, #508]	@ (800b5c8 <PingPong_Process+0x204>)
 800b3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3cc:	4798      	blx	r3

  switch (State)
 800b3ce:	4b7f      	ldr	r3, [pc, #508]	@ (800b5cc <PingPong_Process+0x208>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	f200 80f2 	bhi.w	800b5bc <PingPong_Process+0x1f8>
 800b3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <PingPong_Process+0x1c>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b3f5 	.word	0x0800b3f5
 800b3e4:	0800b54d 	.word	0x0800b54d
 800b3e8:	0800b54d 	.word	0x0800b54d
 800b3ec:	0800b535 	.word	0x0800b535
 800b3f0:	0800b5a5 	.word	0x0800b5a5
  {
    case RX:

      if (isMaster == true)
 800b3f4:	4b76      	ldr	r3, [pc, #472]	@ (800b5d0 <PingPong_Process+0x20c>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d059      	beq.n	800b4b0 <PingPong_Process+0xec>
      {
        if (RxBufferSize > 0)
 800b3fc:	4b75      	ldr	r3, [pc, #468]	@ (800b5d4 <PingPong_Process+0x210>)
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80dd 	beq.w	800b5c0 <PingPong_Process+0x1fc>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800b406:	2204      	movs	r2, #4
 800b408:	4973      	ldr	r1, [pc, #460]	@ (800b5d8 <PingPong_Process+0x214>)
 800b40a:	4874      	ldr	r0, [pc, #464]	@ (800b5dc <PingPong_Process+0x218>)
 800b40c:	f001 fbcc 	bl	800cba8 <strncmp>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d126      	bne.n	800b464 <PingPong_Process+0xa0>
          {
            UTIL_TIMER_Stop(&timerLed);
 800b416:	4872      	ldr	r0, [pc, #456]	@ (800b5e0 <PingPong_Process+0x21c>)
 800b418:	f000 ff56 	bl	800c2c8 <UTIL_TIMER_Stop>
            /* switch off green led */
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800b41c:	2200      	movs	r2, #0
 800b41e:	2120      	movs	r1, #32
 800b420:	4870      	ldr	r0, [pc, #448]	@ (800b5e4 <PingPong_Process+0x220>)
 800b422:	f7f7 f901 	bl	8002628 <HAL_GPIO_WritePin>
            /* master toggles red led */
            // HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800b426:	4b68      	ldr	r3, [pc, #416]	@ (800b5c8 <PingPong_Process+0x204>)
 800b428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b42a:	4798      	blx	r3
 800b42c:	4603      	mov	r3, r0
 800b42e:	33c8      	adds	r3, #200	@ 0xc8
 800b430:	4618      	mov	r0, r3
 800b432:	f7f5 fd65 	bl	8000f00 <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800b436:	4b6c      	ldr	r3, [pc, #432]	@ (800b5e8 <PingPong_Process+0x224>)
 800b438:	2201      	movs	r2, #1
 800b43a:	2100      	movs	r1, #0
 800b43c:	2001      	movs	r0, #1
 800b43e:	f001 f93b 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800b442:	4b6a      	ldr	r3, [pc, #424]	@ (800b5ec <PingPong_Process+0x228>)
 800b444:	2201      	movs	r2, #1
 800b446:	2100      	movs	r1, #0
 800b448:	2001      	movs	r0, #1
 800b44a:	f001 f935 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800b44e:	2204      	movs	r2, #4
 800b450:	4967      	ldr	r1, [pc, #412]	@ (800b5f0 <PingPong_Process+0x22c>)
 800b452:	4868      	ldr	r0, [pc, #416]	@ (800b5f4 <PingPong_Process+0x230>)
 800b454:	f001 fbe6 	bl	800cc24 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800b458:	4b5b      	ldr	r3, [pc, #364]	@ (800b5c8 <PingPong_Process+0x204>)
 800b45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45c:	2140      	movs	r1, #64	@ 0x40
 800b45e:	4865      	ldr	r0, [pc, #404]	@ (800b5f4 <PingPong_Process+0x230>)
 800b460:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800b462:	e0ad      	b.n	800b5c0 <PingPong_Process+0x1fc>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800b464:	2204      	movs	r2, #4
 800b466:	4962      	ldr	r1, [pc, #392]	@ (800b5f0 <PingPong_Process+0x22c>)
 800b468:	485c      	ldr	r0, [pc, #368]	@ (800b5dc <PingPong_Process+0x218>)
 800b46a:	f001 fb9d 	bl	800cba8 <strncmp>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10e      	bne.n	800b492 <PingPong_Process+0xce>
            isMaster = false;
 800b474:	4b56      	ldr	r3, [pc, #344]	@ (800b5d0 <PingPong_Process+0x20c>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800b47a:	4b5f      	ldr	r3, [pc, #380]	@ (800b5f8 <PingPong_Process+0x234>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	2100      	movs	r1, #0
 800b480:	2001      	movs	r0, #1
 800b482:	f001 f919 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800b486:	4b50      	ldr	r3, [pc, #320]	@ (800b5c8 <PingPong_Process+0x204>)
 800b488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b48a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b48e:	4798      	blx	r3
      break;
 800b490:	e096      	b.n	800b5c0 <PingPong_Process+0x1fc>
            isMaster = true;
 800b492:	4b4f      	ldr	r3, [pc, #316]	@ (800b5d0 <PingPong_Process+0x20c>)
 800b494:	2201      	movs	r2, #1
 800b496:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800b498:	4b58      	ldr	r3, [pc, #352]	@ (800b5fc <PingPong_Process+0x238>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	2100      	movs	r1, #0
 800b49e:	2001      	movs	r0, #1
 800b4a0:	f001 f90a 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800b4a4:	4b48      	ldr	r3, [pc, #288]	@ (800b5c8 <PingPong_Process+0x204>)
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b4ac:	4798      	blx	r3
      break;
 800b4ae:	e087      	b.n	800b5c0 <PingPong_Process+0x1fc>
        if (RxBufferSize > 0)
 800b4b0:	4b48      	ldr	r3, [pc, #288]	@ (800b5d4 <PingPong_Process+0x210>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 8083 	beq.w	800b5c0 <PingPong_Process+0x1fc>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800b4ba:	2204      	movs	r2, #4
 800b4bc:	494c      	ldr	r1, [pc, #304]	@ (800b5f0 <PingPong_Process+0x22c>)
 800b4be:	4847      	ldr	r0, [pc, #284]	@ (800b5dc <PingPong_Process+0x218>)
 800b4c0:	f001 fb72 	bl	800cba8 <strncmp>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d125      	bne.n	800b516 <PingPong_Process+0x152>
            UTIL_TIMER_Stop(&timerLed);
 800b4ca:	4845      	ldr	r0, [pc, #276]	@ (800b5e0 <PingPong_Process+0x21c>)
 800b4cc:	f000 fefc 	bl	800c2c8 <UTIL_TIMER_Stop>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	4844      	ldr	r0, [pc, #272]	@ (800b5e4 <PingPong_Process+0x220>)
 800b4d4:	f7f7 f8bf 	bl	8002656 <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800b4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c8 <PingPong_Process+0x204>)
 800b4da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	33c8      	adds	r3, #200	@ 0xc8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f5 fd0c 	bl	8000f00 <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800b4e8:	4b45      	ldr	r3, [pc, #276]	@ (800b600 <PingPong_Process+0x23c>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	f001 f8e2 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800b4f4:	4b43      	ldr	r3, [pc, #268]	@ (800b604 <PingPong_Process+0x240>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	f001 f8dc 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800b500:	2204      	movs	r2, #4
 800b502:	4935      	ldr	r1, [pc, #212]	@ (800b5d8 <PingPong_Process+0x214>)
 800b504:	483b      	ldr	r0, [pc, #236]	@ (800b5f4 <PingPong_Process+0x230>)
 800b506:	f001 fb8d 	bl	800cc24 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800b50a:	4b2f      	ldr	r3, [pc, #188]	@ (800b5c8 <PingPong_Process+0x204>)
 800b50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50e:	2140      	movs	r1, #64	@ 0x40
 800b510:	4838      	ldr	r0, [pc, #224]	@ (800b5f4 <PingPong_Process+0x230>)
 800b512:	4798      	blx	r3
      break;
 800b514:	e054      	b.n	800b5c0 <PingPong_Process+0x1fc>
            isMaster = true;
 800b516:	4b2e      	ldr	r3, [pc, #184]	@ (800b5d0 <PingPong_Process+0x20c>)
 800b518:	2201      	movs	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800b51c:	4b37      	ldr	r3, [pc, #220]	@ (800b5fc <PingPong_Process+0x238>)
 800b51e:	2201      	movs	r2, #1
 800b520:	2100      	movs	r1, #0
 800b522:	2001      	movs	r0, #1
 800b524:	f001 f8c8 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800b528:	4b27      	ldr	r3, [pc, #156]	@ (800b5c8 <PingPong_Process+0x204>)
 800b52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b52c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b530:	4798      	blx	r3
      break;
 800b532:	e045      	b.n	800b5c0 <PingPong_Process+0x1fc>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800b534:	4b34      	ldr	r3, [pc, #208]	@ (800b608 <PingPong_Process+0x244>)
 800b536:	2201      	movs	r2, #1
 800b538:	2100      	movs	r1, #0
 800b53a:	2001      	movs	r0, #1
 800b53c:	f001 f8bc 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800b540:	4b21      	ldr	r3, [pc, #132]	@ (800b5c8 <PingPong_Process+0x204>)
 800b542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b544:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b548:	4798      	blx	r3
      break;
 800b54a:	e03a      	b.n	800b5c2 <PingPong_Process+0x1fe>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800b54c:	4b20      	ldr	r3, [pc, #128]	@ (800b5d0 <PingPong_Process+0x20c>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01b      	beq.n	800b58c <PingPong_Process+0x1c8>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800b554:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c8 <PingPong_Process+0x204>)
 800b556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b558:	4798      	blx	r3
 800b55a:	4603      	mov	r3, r0
 800b55c:	4a2b      	ldr	r2, [pc, #172]	@ (800b60c <PingPong_Process+0x248>)
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	4413      	add	r3, r2
 800b562:	33c8      	adds	r3, #200	@ 0xc8
 800b564:	4618      	mov	r0, r3
 800b566:	f7f5 fccb 	bl	8000f00 <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800b56a:	4b20      	ldr	r3, [pc, #128]	@ (800b5ec <PingPong_Process+0x228>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	2100      	movs	r1, #0
 800b570:	2001      	movs	r0, #1
 800b572:	f001 f8a1 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800b576:	2204      	movs	r2, #4
 800b578:	491d      	ldr	r1, [pc, #116]	@ (800b5f0 <PingPong_Process+0x22c>)
 800b57a:	481e      	ldr	r0, [pc, #120]	@ (800b5f4 <PingPong_Process+0x230>)
 800b57c:	f001 fb52 	bl	800cc24 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800b580:	4b11      	ldr	r3, [pc, #68]	@ (800b5c8 <PingPong_Process+0x204>)
 800b582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b584:	2140      	movs	r1, #64	@ 0x40
 800b586:	481b      	ldr	r0, [pc, #108]	@ (800b5f4 <PingPong_Process+0x230>)
 800b588:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800b58a:	e01a      	b.n	800b5c2 <PingPong_Process+0x1fe>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800b58c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f8 <PingPong_Process+0x234>)
 800b58e:	2201      	movs	r2, #1
 800b590:	2100      	movs	r1, #0
 800b592:	2001      	movs	r0, #1
 800b594:	f001 f890 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800b598:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c8 <PingPong_Process+0x204>)
 800b59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b59c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5a0:	4798      	blx	r3
      break;
 800b5a2:	e00e      	b.n	800b5c2 <PingPong_Process+0x1fe>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800b5a4:	4b14      	ldr	r3, [pc, #80]	@ (800b5f8 <PingPong_Process+0x234>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	f001 f884 	bl	800c6b8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800b5b0:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <PingPong_Process+0x204>)
 800b5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5b8:	4798      	blx	r3
      break;
 800b5ba:	e002      	b.n	800b5c2 <PingPong_Process+0x1fe>
    default:
      break;
 800b5bc:	bf00      	nop
 800b5be:	e000      	b.n	800b5c2 <PingPong_Process+0x1fe>
      break;
 800b5c0:	bf00      	nop
  }
}
 800b5c2:	bf00      	nop
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800d054 	.word	0x0800d054
 800b5cc:	2000038c 	.word	0x2000038c
 800b5d0:	20000009 	.word	0x20000009
 800b5d4:	20000590 	.word	0x20000590
 800b5d8:	0800ce48 	.word	0x0800ce48
 800b5dc:	20000390 	.word	0x20000390
 800b5e0:	20000594 	.word	0x20000594
 800b5e4:	48000400 	.word	0x48000400
 800b5e8:	0800ce50 	.word	0x0800ce50
 800b5ec:	0800ce5c 	.word	0x0800ce5c
 800b5f0:	0800ce70 	.word	0x0800ce70
 800b5f4:	20000490 	.word	0x20000490
 800b5f8:	0800ce78 	.word	0x0800ce78
 800b5fc:	0800ce8c 	.word	0x0800ce8c
 800b600:	0800cea0 	.word	0x0800cea0
 800b604:	0800ceac 	.word	0x0800ceac
 800b608:	0800cec0 	.word	0x0800cec0
 800b60c:	200005ac 	.word	0x200005ac

0800b610 <OnledEvent>:

static void OnledEvent(void *context)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800b618:	2120      	movs	r1, #32
 800b61a:	4805      	ldr	r0, [pc, #20]	@ (800b630 <OnledEvent+0x20>)
 800b61c:	f7f7 f81b 	bl	8002656 <HAL_GPIO_TogglePin>
  // HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
  UTIL_TIMER_Start(&timerLed);
 800b620:	4804      	ldr	r0, [pc, #16]	@ (800b634 <OnledEvent+0x24>)
 800b622:	f000 fde3 	bl	800c1ec <UTIL_TIMER_Start>
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	48000400 	.word	0x48000400
 800b634:	20000594 	.word	0x20000594

0800b638 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b642:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	bc80      	pop	{r7}
 800b64c:	4770      	bx	lr

0800b64e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	4603      	mov	r3, r0
 800b656:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b65c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	bc80      	pop	{r7}
 800b666:	4770      	bx	lr

0800b668 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b66e:	2302      	movs	r3, #2
 800b670:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800b672:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b684:	2301      	movs	r3, #1
 800b686:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800b688:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr

0800b694 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b69a:	2301      	movs	r3, #1
 800b69c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800b69e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bc80      	pop	{r7}
 800b6a8:	4770      	bx	lr

0800b6aa <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b085      	sub	sp, #20
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800b6be:	230f      	movs	r3, #15
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e001      	b.n	800b6c8 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800b6c4:	2316      	movs	r3, #22
 800b6c6:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6d8:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <UTIL_LPM_Init+0x18>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6de:	4b04      	ldr	r3, [pc, #16]	@ (800b6f0 <UTIL_LPM_Init+0x1c>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b6e4:	bf00      	nop
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr
 800b6ec:	200005b0 	.word	0x200005b0
 800b6f0:	200005b4 	.word	0x200005b4

0800b6f4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b700:	f3ef 8310 	mrs	r3, PRIMASK
 800b704:	613b      	str	r3, [r7, #16]
  return(result);
 800b706:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b70a:	b672      	cpsid	i
}
 800b70c:	bf00      	nop
  
  switch( state )
 800b70e:	78fb      	ldrb	r3, [r7, #3]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d008      	beq.n	800b726 <UTIL_LPM_SetStopMode+0x32>
 800b714:	2b01      	cmp	r3, #1
 800b716:	d10e      	bne.n	800b736 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b718:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <UTIL_LPM_SetStopMode+0x5c>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4313      	orrs	r3, r2
 800b720:	4a0b      	ldr	r2, [pc, #44]	@ (800b750 <UTIL_LPM_SetStopMode+0x5c>)
 800b722:	6013      	str	r3, [r2, #0]
      break;
 800b724:	e008      	b.n	800b738 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	43da      	mvns	r2, r3
 800b72a:	4b09      	ldr	r3, [pc, #36]	@ (800b750 <UTIL_LPM_SetStopMode+0x5c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4013      	ands	r3, r2
 800b730:	4a07      	ldr	r2, [pc, #28]	@ (800b750 <UTIL_LPM_SetStopMode+0x5c>)
 800b732:	6013      	str	r3, [r2, #0]
      break;
 800b734:	e000      	b.n	800b738 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b736:	bf00      	nop
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f383 8810 	msr	PRIMASK, r3
}
 800b742:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b744:	bf00      	nop
 800b746:	371c      	adds	r7, #28
 800b748:	46bd      	mov	sp, r7
 800b74a:	bc80      	pop	{r7}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	200005b0 	.word	0x200005b0

0800b754 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b760:	f3ef 8310 	mrs	r3, PRIMASK
 800b764:	613b      	str	r3, [r7, #16]
  return(result);
 800b766:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b76a:	b672      	cpsid	i
}
 800b76c:	bf00      	nop
  
  switch(state)
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <UTIL_LPM_SetOffMode+0x32>
 800b774:	2b01      	cmp	r3, #1
 800b776:	d10e      	bne.n	800b796 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b778:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4313      	orrs	r3, r2
 800b780:	4a0b      	ldr	r2, [pc, #44]	@ (800b7b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b782:	6013      	str	r3, [r2, #0]
      break;
 800b784:	e008      	b.n	800b798 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	43da      	mvns	r2, r3
 800b78a:	4b09      	ldr	r3, [pc, #36]	@ (800b7b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4013      	ands	r3, r2
 800b790:	4a07      	ldr	r2, [pc, #28]	@ (800b7b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b792:	6013      	str	r3, [r2, #0]
      break;
 800b794:	e000      	b.n	800b798 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b796:	bf00      	nop
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f383 8810 	msr	PRIMASK, r3
}
 800b7a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b7a4:	bf00      	nop
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc80      	pop	{r7}
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	200005b4 	.word	0x200005b4

0800b7b4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b7be:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b7c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c4:	b672      	cpsid	i
}
 800b7c6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b7c8:	4b12      	ldr	r3, [pc, #72]	@ (800b814 <UTIL_LPM_EnterLowPower+0x60>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b7d0:	4b11      	ldr	r3, [pc, #68]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b7d6:	4b10      	ldr	r3, [pc, #64]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	4798      	blx	r3
 800b7dc:	e010      	b.n	800b800 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b7de:	4b0f      	ldr	r3, [pc, #60]	@ (800b81c <UTIL_LPM_EnterLowPower+0x68>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d006      	beq.n	800b7f4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	4798      	blx	r3
 800b7f2:	e005      	b.n	800b800 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b7f4:	4b08      	ldr	r3, [pc, #32]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b7fa:	4b07      	ldr	r3, [pc, #28]	@ (800b818 <UTIL_LPM_EnterLowPower+0x64>)
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	4798      	blx	r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f383 8810 	msr	PRIMASK, r3
}
 800b80a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200005b0 	.word	0x200005b0
 800b818:	0800cf24 	.word	0x0800cf24
 800b81c:	200005b4 	.word	0x200005b4

0800b820 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4613      	mov	r3, r2
 800b82c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b836:	e007      	b.n	800b848 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	1c53      	adds	r3, r2, #1
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	1c59      	adds	r1, r3, #1
 800b842:	6179      	str	r1, [r7, #20]
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b848:	88fb      	ldrh	r3, [r7, #6]
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	80fa      	strh	r2, [r7, #6]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1f2      	bne.n	800b838 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr

0800b85e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b85e:	b480      	push	{r7}
 800b860:	b085      	sub	sp, #20
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	460b      	mov	r3, r1
 800b868:	70fb      	strb	r3, [r7, #3]
 800b86a:	4613      	mov	r3, r2
 800b86c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b872:	e004      	b.n	800b87e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	60fa      	str	r2, [r7, #12]
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b87e:	883b      	ldrh	r3, [r7, #0]
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	803a      	strh	r2, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1f5      	bne.n	800b874 <UTIL_MEM_set_8+0x16>
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr

0800b894 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b894:	b082      	sub	sp, #8
 800b896:	b480      	push	{r7}
 800b898:	b087      	sub	sp, #28
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	1d38      	adds	r0, r7, #4
 800b8a0:	e880 0006 	stmia.w	r0, {r1, r2}
 800b8a4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	613b      	str	r3, [r7, #16]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	4413      	add	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b8b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	4413      	add	r3, r2
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	b21b      	sxth	r3, r3
 800b8c8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b8ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b8ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8d2:	db0a      	blt.n	800b8ea <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b8da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	b21b      	sxth	r3, r3
 800b8e8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f107 0310 	add.w	r3, r7, #16
 800b8f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b8f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	371c      	adds	r7, #28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bc80      	pop	{r7}
 800b902:	b002      	add	sp, #8
 800b904:	4770      	bx	lr
	...

0800b908 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	@ 0x28
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b910:	2300      	movs	r3, #0
 800b912:	61bb      	str	r3, [r7, #24]
 800b914:	2300      	movs	r3, #0
 800b916:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b918:	2300      	movs	r3, #0
 800b91a:	613b      	str	r3, [r7, #16]
 800b91c:	2300      	movs	r3, #0
 800b91e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b920:	4b14      	ldr	r3, [pc, #80]	@ (800b974 <SysTimeGet+0x6c>)
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	f107 0218 	add.w	r2, r7, #24
 800b928:	3204      	adds	r2, #4
 800b92a:	4610      	mov	r0, r2
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b932:	4b10      	ldr	r3, [pc, #64]	@ (800b974 <SysTimeGet+0x6c>)
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	4798      	blx	r3
 800b938:	4603      	mov	r3, r0
 800b93a:	b21b      	sxth	r3, r3
 800b93c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b93e:	4b0d      	ldr	r3, [pc, #52]	@ (800b974 <SysTimeGet+0x6c>)
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	4798      	blx	r3
 800b944:	4603      	mov	r3, r0
 800b946:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b948:	f107 0010 	add.w	r0, r7, #16
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f107 0208 	add.w	r2, r7, #8
 800b956:	ca06      	ldmia	r2, {r1, r2}
 800b958:	f7ff ff9c 	bl	800b894 <SysTimeAdd>

  return sysTime;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	461a      	mov	r2, r3
 800b960:	f107 0310 	add.w	r3, r7, #16
 800b964:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b968:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	0800d008 	.word	0x0800d008

0800b978 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b984:	e00e      	b.n	800b9a4 <ee_skip_atoi+0x2c>
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	4618      	mov	r0, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	1c59      	adds	r1, r3, #1
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6011      	str	r1, [r2, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	4403      	add	r3, r0
 800b9a0:	3b30      	subs	r3, #48	@ 0x30
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9ac:	d904      	bls.n	800b9b8 <ee_skip_atoi+0x40>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b39      	cmp	r3, #57	@ 0x39
 800b9b6:	d9e6      	bls.n	800b986 <ee_skip_atoi+0xe>
  return i;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bc80      	pop	{r7}
 800b9c2:	4770      	bx	lr

0800b9c4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b099      	sub	sp, #100	@ 0x64
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b9d2:	4b71      	ldr	r3, [pc, #452]	@ (800bb98 <ee_number+0x1d4>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b9d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <ee_number+0x24>
 800b9e2:	4b6e      	ldr	r3, [pc, #440]	@ (800bb9c <ee_number+0x1d8>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	dd02      	ble.n	800b9f4 <ee_number+0x30>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b24      	cmp	r3, #36	@ 0x24
 800b9f2:	dd01      	ble.n	800b9f8 <ee_number+0x34>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e0ca      	b.n	800bb8e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b9f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9fa:	f003 0301 	and.w	r3, r3, #1
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <ee_number+0x42>
 800ba02:	2330      	movs	r3, #48	@ 0x30
 800ba04:	e000      	b.n	800ba08 <ee_number+0x44>
 800ba06:	2320      	movs	r3, #32
 800ba08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800ba12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <ee_number+0x70>
  {
    if (num < 0)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	da08      	bge.n	800ba34 <ee_number+0x70>
    {
      sign = '-';
 800ba22:	232d      	movs	r3, #45	@ 0x2d
 800ba24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	425b      	negs	r3, r3
 800ba2c:	607b      	str	r3, [r7, #4]
      size--;
 800ba2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba30:	3b01      	subs	r3, #1
 800ba32:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d11e      	bne.n	800ba7c <ee_number+0xb8>
    tmp[i++] = '0';
 800ba3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	657a      	str	r2, [r7, #84]	@ 0x54
 800ba44:	3360      	adds	r3, #96	@ 0x60
 800ba46:	443b      	add	r3, r7
 800ba48:	2230      	movs	r2, #48	@ 0x30
 800ba4a:	f803 2c50 	strb.w	r2, [r3, #-80]
 800ba4e:	e018      	b.n	800ba82 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba58:	fb01 f202 	mul.w	r2, r1, r2
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba60:	441a      	add	r2, r3
 800ba62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba64:	1c59      	adds	r1, r3, #1
 800ba66:	6579      	str	r1, [r7, #84]	@ 0x54
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	3360      	adds	r3, #96	@ 0x60
 800ba6c:	443b      	add	r3, r7
 800ba6e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba7a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e6      	bne.n	800ba50 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800ba82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	dd01      	ble.n	800ba8e <ee_number+0xca>
 800ba8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800ba8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ba96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d112      	bne.n	800bac6 <ee_number+0x102>
 800baa0:	e00c      	b.n	800babc <ee_number+0xf8>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	60fa      	str	r2, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	701a      	strb	r2, [r3, #0]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3b01      	subs	r3, #1
 800bab0:	60bb      	str	r3, [r7, #8]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <ee_number+0xf8>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	e068      	b.n	800bb8e <ee_number+0x1ca>
 800babc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800babe:	1e5a      	subs	r2, r3, #1
 800bac0:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dced      	bgt.n	800baa2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800bac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d01b      	beq.n	800bb06 <ee_number+0x142>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	60fa      	str	r2, [r7, #12]
 800bad4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	3b01      	subs	r3, #1
 800bade:	60bb      	str	r3, [r7, #8]
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10f      	bne.n	800bb06 <ee_number+0x142>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	e051      	b.n	800bb8e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	60fa      	str	r2, [r7, #12]
 800baf0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	60bb      	str	r3, [r7, #8]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <ee_number+0x142>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	e043      	b.n	800bb8e <ee_number+0x1ca>
 800bb06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb08:	1e5a      	subs	r2, r3, #1
 800bb0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dcec      	bgt.n	800baea <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800bb10:	e00c      	b.n	800bb2c <ee_number+0x168>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	60fa      	str	r2, [r7, #12]
 800bb18:	2230      	movs	r2, #48	@ 0x30
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	60bb      	str	r3, [r7, #8]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <ee_number+0x168>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	e030      	b.n	800bb8e <ee_number+0x1ca>
 800bb2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb2e:	1e5a      	subs	r2, r3, #1
 800bb30:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb34:	429a      	cmp	r2, r3
 800bb36:	dbec      	blt.n	800bb12 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800bb38:	e010      	b.n	800bb5c <ee_number+0x198>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	60fa      	str	r2, [r7, #12]
 800bb40:	f107 0110 	add.w	r1, r7, #16
 800bb44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb46:	440a      	add	r2, r1
 800bb48:	7812      	ldrb	r2, [r2, #0]
 800bb4a:	701a      	strb	r2, [r3, #0]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	60bb      	str	r3, [r7, #8]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <ee_number+0x198>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	e018      	b.n	800bb8e <ee_number+0x1ca>
 800bb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb5e:	1e5a      	subs	r2, r3, #1
 800bb60:	657a      	str	r2, [r7, #84]	@ 0x54
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dce9      	bgt.n	800bb3a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800bb66:	e00c      	b.n	800bb82 <ee_number+0x1be>
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	60fa      	str	r2, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	60bb      	str	r3, [r7, #8]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <ee_number+0x1be>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	e005      	b.n	800bb8e <ee_number+0x1ca>
 800bb82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb84:	1e5a      	subs	r2, r3, #1
 800bb86:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dced      	bgt.n	800bb68 <ee_number+0x1a4>

  return str;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3764      	adds	r7, #100	@ 0x64
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr
 800bb98:	2000000c 	.word	0x2000000c
 800bb9c:	20000010 	.word	0x20000010

0800bba0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b092      	sub	sp, #72	@ 0x48
 800bba4:	af04      	add	r7, sp, #16
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dc01      	bgt.n	800bbb8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e13e      	b.n	800be36 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbbc:	e128      	b.n	800be10 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800bbbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	1ad2      	subs	r2, r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	f280 812e 	bge.w	800be2a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b25      	cmp	r3, #37	@ 0x25
 800bbd4:	d006      	beq.n	800bbe4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbda:	1c59      	adds	r1, r3, #1
 800bbdc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bbde:	7812      	ldrb	r2, [r2, #0]
 800bbe0:	701a      	strb	r2, [r3, #0]
      continue;
 800bbe2:	e112      	b.n	800be0a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3301      	adds	r3, #1
 800bbec:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2b30      	cmp	r3, #48	@ 0x30
 800bbf4:	d103      	bne.n	800bbfe <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc02:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc0a:	d908      	bls.n	800bc1e <tiny_vsnprintf_like+0x7e>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b39      	cmp	r3, #57	@ 0x39
 800bc12:	d804      	bhi.n	800bc1e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800bc14:	1d3b      	adds	r3, r7, #4
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff feae 	bl	800b978 <ee_skip_atoi>
 800bc1c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800bc1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc22:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc28:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800bc2a:	230a      	movs	r3, #10
 800bc2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	3b58      	subs	r3, #88	@ 0x58
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	f200 8094 	bhi.w	800bd62 <tiny_vsnprintf_like+0x1c2>
 800bc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc40 <tiny_vsnprintf_like+0xa0>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bd4b 	.word	0x0800bd4b
 800bc44:	0800bd63 	.word	0x0800bd63
 800bc48:	0800bd63 	.word	0x0800bd63
 800bc4c:	0800bd63 	.word	0x0800bd63
 800bc50:	0800bd63 	.word	0x0800bd63
 800bc54:	0800bd63 	.word	0x0800bd63
 800bc58:	0800bd63 	.word	0x0800bd63
 800bc5c:	0800bd63 	.word	0x0800bd63
 800bc60:	0800bd63 	.word	0x0800bd63
 800bc64:	0800bd63 	.word	0x0800bd63
 800bc68:	0800bd63 	.word	0x0800bd63
 800bc6c:	0800bccf 	.word	0x0800bccf
 800bc70:	0800bd59 	.word	0x0800bd59
 800bc74:	0800bd63 	.word	0x0800bd63
 800bc78:	0800bd63 	.word	0x0800bd63
 800bc7c:	0800bd63 	.word	0x0800bd63
 800bc80:	0800bd63 	.word	0x0800bd63
 800bc84:	0800bd59 	.word	0x0800bd59
 800bc88:	0800bd63 	.word	0x0800bd63
 800bc8c:	0800bd63 	.word	0x0800bd63
 800bc90:	0800bd63 	.word	0x0800bd63
 800bc94:	0800bd63 	.word	0x0800bd63
 800bc98:	0800bd63 	.word	0x0800bd63
 800bc9c:	0800bd63 	.word	0x0800bd63
 800bca0:	0800bd63 	.word	0x0800bd63
 800bca4:	0800bd63 	.word	0x0800bd63
 800bca8:	0800bd63 	.word	0x0800bd63
 800bcac:	0800bcef 	.word	0x0800bcef
 800bcb0:	0800bd63 	.word	0x0800bd63
 800bcb4:	0800bdaf 	.word	0x0800bdaf
 800bcb8:	0800bd63 	.word	0x0800bd63
 800bcbc:	0800bd63 	.word	0x0800bd63
 800bcc0:	0800bd53 	.word	0x0800bd53
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800bcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcca:	2220      	movs	r2, #32
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dcf4      	bgt.n	800bcc4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	603a      	str	r2, [r7, #0]
 800bce0:	6819      	ldr	r1, [r3, #0]
 800bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bce8:	b2ca      	uxtb	r2, r1
 800bcea:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800bcec:	e08d      	b.n	800be0a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	603a      	str	r2, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <tiny_vsnprintf_like+0x162>
 800bcfe:	4b50      	ldr	r3, [pc, #320]	@ (800be40 <tiny_vsnprintf_like+0x2a0>)
 800bd00:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800bd02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd04:	f7f4 fa38 	bl	8000178 <strlen>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800bd0c:	e004      	b.n	800bd18 <tiny_vsnprintf_like+0x178>
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd14:	2220      	movs	r2, #32
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	1e5a      	subs	r2, r3, #1
 800bd1c:	61fa      	str	r2, [r7, #28]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	dbf4      	blt.n	800bd0e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800bd24:	2300      	movs	r3, #0
 800bd26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd28:	e00a      	b.n	800bd40 <tiny_vsnprintf_like+0x1a0>
 800bd2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd2c:	1c53      	adds	r3, r2, #1
 800bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	1c59      	adds	r1, r3, #1
 800bd34:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bd36:	7812      	ldrb	r2, [r2, #0]
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	dbf0      	blt.n	800bd2a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800bd48:	e05f      	b.n	800be0a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd50:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800bd52:	2310      	movs	r3, #16
 800bd54:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800bd56:	e02b      	b.n	800bdb0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	f043 0302 	orr.w	r3, r3, #2
 800bd5e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800bd60:	e025      	b.n	800bdae <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b25      	cmp	r3, #37	@ 0x25
 800bd68:	d004      	beq.n	800bd74 <tiny_vsnprintf_like+0x1d4>
 800bd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd70:	2225      	movs	r2, #37	@ 0x25
 800bd72:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800bd74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	1ad2      	subs	r2, r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	da16      	bge.n	800bdb0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d006      	beq.n	800bd98 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8e:	1c59      	adds	r1, r3, #1
 800bd90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	e002      	b.n	800bd9e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800bd9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	db2d      	blt.n	800be08 <tiny_vsnprintf_like+0x268>
 800bdac:	e000      	b.n	800bdb0 <tiny_vsnprintf_like+0x210>
        break;
 800bdae:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b6c      	cmp	r3, #108	@ 0x6c
 800bdb4:	d105      	bne.n	800bdc2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	1d1a      	adds	r2, r3, #4
 800bdba:	603a      	str	r2, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc0:	e00f      	b.n	800bde2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	603a      	str	r2, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd6:	e004      	b.n	800bde2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	603a      	str	r2, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	1e5a      	subs	r2, r3, #1
 800bde6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	1acb      	subs	r3, r1, r3
 800bdec:	1ad1      	subs	r1, r2, r3
 800bdee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	9302      	str	r3, [sp, #8]
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be00:	f7ff fde0 	bl	800b9c4 <ee_number>
 800be04:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800be06:	e000      	b.n	800be0a <tiny_vsnprintf_like+0x26a>
        continue;
 800be08:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3301      	adds	r3, #1
 800be0e:	607b      	str	r3, [r7, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f47f aed2 	bne.w	800bbbe <tiny_vsnprintf_like+0x1e>
 800be1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	3b01      	subs	r3, #1
 800be24:	429a      	cmp	r2, r3
 800be26:	f6bf aeca 	bge.w	800bbbe <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800be2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2c:	2200      	movs	r2, #0
 800be2e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800be30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	1ad3      	subs	r3, r2, r3
}
 800be36:	4618      	mov	r0, r3
 800be38:	3738      	adds	r7, #56	@ 0x38
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	0800cf1c 	.word	0x0800cf1c

0800be44 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b090      	sub	sp, #64	@ 0x40
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800be4c:	4b73      	ldr	r3, [pc, #460]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800be52:	4b72      	ldr	r3, [pc, #456]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4013      	ands	r3, r2
 800be5a:	4a70      	ldr	r2, [pc, #448]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800be5c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800be5e:	4b70      	ldr	r3, [pc, #448]	@ (800c020 <UTIL_SEQ_Run+0x1dc>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800be64:	4b6f      	ldr	r3, [pc, #444]	@ (800c024 <UTIL_SEQ_Run+0x1e0>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800be6a:	4b6f      	ldr	r3, [pc, #444]	@ (800c028 <UTIL_SEQ_Run+0x1e4>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800be70:	4b6e      	ldr	r3, [pc, #440]	@ (800c02c <UTIL_SEQ_Run+0x1e8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800be76:	e08d      	b.n	800bf94 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800be7c:	e002      	b.n	800be84 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800be7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be80:	3301      	adds	r3, #1
 800be82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800be84:	4a6a      	ldr	r2, [pc, #424]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800be86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800be8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8e:	401a      	ands	r2, r3
 800be90:	4b62      	ldr	r3, [pc, #392]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4013      	ands	r3, r2
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f1      	beq.n	800be7e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800be9a:	4a65      	ldr	r2, [pc, #404]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800be9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	401a      	ands	r2, r3
 800bea6:	4b5d      	ldr	r3, [pc, #372]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4013      	ands	r3, r2
 800beac:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800beae:	4a60      	ldr	r2, [pc, #384]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800beb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb2:	00db      	lsls	r3, r3, #3
 800beb4:	4413      	add	r3, r2
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beba:	4013      	ands	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bec0:	4a5b      	ldr	r2, [pc, #364]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800bec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800becc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bece:	4a58      	ldr	r2, [pc, #352]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800bed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	4413      	add	r3, r2
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beda:	4013      	ands	r3, r2
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f907 	bl	800c0f0 <SEQ_BitPosition>
 800bee2:	4603      	mov	r3, r0
 800bee4:	461a      	mov	r2, r3
 800bee6:	4b53      	ldr	r3, [pc, #332]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bee8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800beea:	4a51      	ldr	r2, [pc, #324]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800beec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	4413      	add	r3, r2
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	4b4f      	ldr	r3, [pc, #316]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2101      	movs	r1, #1
 800befa:	fa01 f303 	lsl.w	r3, r1, r3
 800befe:	43db      	mvns	r3, r3
 800bf00:	401a      	ands	r2, r3
 800bf02:	494b      	ldr	r1, [pc, #300]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800bf04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	440b      	add	r3, r1
 800bf0a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf10:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf12:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf16:	b672      	cpsid	i
}
 800bf18:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bf1a:	4b46      	ldr	r3, [pc, #280]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	fa02 f303 	lsl.w	r3, r2, r3
 800bf24:	43da      	mvns	r2, r3
 800bf26:	4b3e      	ldr	r3, [pc, #248]	@ (800c020 <UTIL_SEQ_Run+0x1dc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	4a3c      	ldr	r2, [pc, #240]	@ (800c020 <UTIL_SEQ_Run+0x1dc>)
 800bf2e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bf30:	2301      	movs	r3, #1
 800bf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf34:	e013      	b.n	800bf5e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	4a3d      	ldr	r2, [pc, #244]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800bf3c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bf40:	4b3c      	ldr	r3, [pc, #240]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2201      	movs	r2, #1
 800bf46:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4a:	43da      	mvns	r2, r3
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	400a      	ands	r2, r1
 800bf52:	4937      	ldr	r1, [pc, #220]	@ (800c030 <UTIL_SEQ_Run+0x1ec>)
 800bf54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bf58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e8      	bne.n	800bf36 <UTIL_SEQ_Run+0xf2>
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f383 8810 	msr	PRIMASK, r3
}
 800bf6e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bf70:	4b30      	ldr	r3, [pc, #192]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a30      	ldr	r2, [pc, #192]	@ (800c038 <UTIL_SEQ_Run+0x1f4>)
 800bf76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf7a:	4798      	blx	r3

    local_taskset = TaskSet;
 800bf7c:	4b28      	ldr	r3, [pc, #160]	@ (800c020 <UTIL_SEQ_Run+0x1dc>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800bf82:	4b28      	ldr	r3, [pc, #160]	@ (800c024 <UTIL_SEQ_Run+0x1e0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800bf88:	4b27      	ldr	r3, [pc, #156]	@ (800c028 <UTIL_SEQ_Run+0x1e4>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800bf8e:	4b27      	ldr	r3, [pc, #156]	@ (800c02c <UTIL_SEQ_Run+0x1e8>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bf94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf98:	401a      	ands	r2, r3
 800bf9a:	4b20      	ldr	r3, [pc, #128]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d005      	beq.n	800bfb0 <UTIL_SEQ_Run+0x16c>
 800bfa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f43f af64 	beq.w	800be78 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bfb0:	4b20      	ldr	r3, [pc, #128]	@ (800c034 <UTIL_SEQ_Run+0x1f0>)
 800bfb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfb6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bfb8:	f000 f88e 	bl	800c0d8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bfc0:	613b      	str	r3, [r7, #16]
  return(result);
 800bfc2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bfc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfc6:	b672      	cpsid	i
}
 800bfc8:	bf00      	nop
  local_taskset = TaskSet;
 800bfca:	4b15      	ldr	r3, [pc, #84]	@ (800c020 <UTIL_SEQ_Run+0x1dc>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bfd0:	4b14      	ldr	r3, [pc, #80]	@ (800c024 <UTIL_SEQ_Run+0x1e0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bfd6:	4b14      	ldr	r3, [pc, #80]	@ (800c028 <UTIL_SEQ_Run+0x1e4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bfdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe0:	401a      	ands	r2, r3
 800bfe2:	4b0e      	ldr	r3, [pc, #56]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d107      	bne.n	800bffc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bfec:	4b0f      	ldr	r3, [pc, #60]	@ (800c02c <UTIL_SEQ_Run+0x1e8>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff2:	4013      	ands	r3, r2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bff8:	f7f4 ff18 	bl	8000e2c <UTIL_SEQ_Idle>
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f383 8810 	msr	PRIMASK, r3
}
 800c006:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c008:	f000 f86c 	bl	800c0e4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c00c:	4a03      	ldr	r2, [pc, #12]	@ (800c01c <UTIL_SEQ_Run+0x1d8>)
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	6013      	str	r3, [r2, #0]

  return;
 800c012:	bf00      	nop
}
 800c014:	3740      	adds	r7, #64	@ 0x40
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000018 	.word	0x20000018
 800c020:	200005b8 	.word	0x200005b8
 800c024:	200005bc 	.word	0x200005bc
 800c028:	20000014 	.word	0x20000014
 800c02c:	200005c0 	.word	0x200005c0
 800c030:	200005cc 	.word	0x200005cc
 800c034:	200005c4 	.word	0x200005c4
 800c038:	200005c8 	.word	0x200005c8

0800c03c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c048:	f3ef 8310 	mrs	r3, PRIMASK
 800c04c:	617b      	str	r3, [r7, #20]
  return(result);
 800c04e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c052:	b672      	cpsid	i
}
 800c054:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 f84a 	bl	800c0f0 <SEQ_BitPosition>
 800c05c:	4603      	mov	r3, r0
 800c05e:	4619      	mov	r1, r3
 800c060:	4a06      	ldr	r2, [pc, #24]	@ (800c07c <UTIL_SEQ_RegTask+0x40>)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	f383 8810 	msr	PRIMASK, r3
}
 800c072:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c074:	bf00      	nop
}
 800c076:	3720      	adds	r7, #32
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	200005c8 	.word	0x200005c8

0800c080 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c08a:	f3ef 8310 	mrs	r3, PRIMASK
 800c08e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c090:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c094:	b672      	cpsid	i
}
 800c096:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c098:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d0 <UTIL_SEQ_SetTask+0x50>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c0d0 <UTIL_SEQ_SetTask+0x50>)
 800c0a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c0a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c0d4 <UTIL_SEQ_SetTask+0x54>)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	4908      	ldr	r1, [pc, #32]	@ (800c0d4 <UTIL_SEQ_SetTask+0x54>)
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f383 8810 	msr	PRIMASK, r3
}
 800c0c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c0c4:	bf00      	nop
}
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bc80      	pop	{r7}
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	200005b8 	.word	0x200005b8
 800c0d4:	200005cc 	.word	0x200005cc

0800c0d8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c0dc:	bf00      	nop
}
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr

0800c0e4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c0e8:	bf00      	nop
}
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr

0800c0f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c106:	d204      	bcs.n	800c112 <SEQ_BitPosition+0x22>
 800c108:	2310      	movs	r3, #16
 800c10a:	73fb      	strb	r3, [r7, #15]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	041b      	lsls	r3, r3, #16
 800c110:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c118:	d205      	bcs.n	800c126 <SEQ_BitPosition+0x36>
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	3308      	adds	r3, #8
 800c11e:	73fb      	strb	r3, [r7, #15]
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c12c:	d205      	bcs.n	800c13a <SEQ_BitPosition+0x4a>
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	3304      	adds	r3, #4
 800c132:	73fb      	strb	r3, [r7, #15]
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	0f1b      	lsrs	r3, r3, #28
 800c13e:	4a07      	ldr	r2, [pc, #28]	@ (800c15c <SEQ_BitPosition+0x6c>)
 800c140:	5cd2      	ldrb	r2, [r2, r3]
 800c142:	7bfb      	ldrb	r3, [r7, #15]
 800c144:	4413      	add	r3, r2
 800c146:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	f1c3 031f 	rsb	r3, r3, #31
 800c14e:	b2db      	uxtb	r3, r3
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	0800d194 	.word	0x0800d194

0800c160 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800c164:	4b04      	ldr	r3, [pc, #16]	@ (800c178 <UTIL_TIMER_Init+0x18>)
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800c16a:	4b04      	ldr	r3, [pc, #16]	@ (800c17c <UTIL_TIMER_Init+0x1c>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4798      	blx	r3
 800c170:	4603      	mov	r3, r0
}
 800c172:	4618      	mov	r0, r3
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200005d4 	.word	0x200005d4
 800c17c:	0800cfdc 	.word	0x0800cfdc

0800c180 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	4613      	mov	r3, r2
 800c18e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d023      	beq.n	800c1de <UTIL_TIMER_Create+0x5e>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d020      	beq.n	800c1de <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c1a2:	4b11      	ldr	r3, [pc, #68]	@ (800c1e8 <UTIL_TIMER_Create+0x68>)
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a6:	68b8      	ldr	r0, [r7, #8]
 800c1a8:	4798      	blx	r3
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	79fa      	ldrb	r2, [r7, #7]
 800c1d2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e000      	b.n	800c1e0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c1de:	2301      	movs	r3, #1
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0800cfdc 	.word	0x0800cfdc

0800c1ec <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08a      	sub	sp, #40	@ 0x28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d056      	beq.n	800c2ae <UTIL_TIMER_Start+0xc2>
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f9a9 	bl	800c558 <TimerExists>
 800c206:	4603      	mov	r3, r0
 800c208:	f083 0301 	eor.w	r3, r3, #1
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d04d      	beq.n	800c2ae <UTIL_TIMER_Start+0xc2>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7a5b      	ldrb	r3, [r3, #9]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d149      	bne.n	800c2ae <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c21a:	f3ef 8310 	mrs	r3, PRIMASK
 800c21e:	613b      	str	r3, [r7, #16]
  return(result);
 800c220:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c224:	b672      	cpsid	i
}
 800c226:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c22e:	4b24      	ldr	r3, [pc, #144]	@ (800c2c0 <UTIL_TIMER_Start+0xd4>)
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	4798      	blx	r3
 800c234:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c236:	6a3a      	ldr	r2, [r7, #32]
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d201      	bcs.n	800c242 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a3a      	ldr	r2, [r7, #32]
 800c246:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c25a:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c4 <UTIL_TIMER_Start+0xd8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c262:	4b17      	ldr	r3, [pc, #92]	@ (800c2c0 <UTIL_TIMER_Start+0xd4>)
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9eb 	bl	800c644 <TimerInsertNewHeadTimer>
 800c26e:	e017      	b.n	800c2a0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c270:	4b13      	ldr	r3, [pc, #76]	@ (800c2c0 <UTIL_TIMER_Start+0xd4>)
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	4798      	blx	r3
 800c276:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	441a      	add	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c4 <UTIL_TIMER_Start+0xd8>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d203      	bcs.n	800c29a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f9d6 	bl	800c644 <TimerInsertNewHeadTimer>
 800c298:	e002      	b.n	800c2a0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f9a2 	bl	800c5e4 <TimerInsertTimer>
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f383 8810 	msr	PRIMASK, r3
}
 800c2aa:	bf00      	nop
  {
 800c2ac:	e002      	b.n	800c2b4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3728      	adds	r7, #40	@ 0x28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	0800cfdc 	.word	0x0800cfdc
 800c2c4:	200005d4 	.word	0x200005d4

0800c2c8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05b      	beq.n	800c392 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2da:	f3ef 8310 	mrs	r3, PRIMASK
 800c2de:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c2e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2e4:	b672      	cpsid	i
}
 800c2e6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c2e8:	4b2d      	ldr	r3, [pc, #180]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c2ee:	4b2c      	ldr	r3, [pc, #176]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c2fa:	4b29      	ldr	r3, [pc, #164]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d041      	beq.n	800c386 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c308:	4b25      	ldr	r3, [pc, #148]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d134      	bne.n	800c37c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c312:	4b23      	ldr	r3, [pc, #140]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c31a:	4b21      	ldr	r3, [pc, #132]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c324:	4b1e      	ldr	r3, [pc, #120]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c32c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c32e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f92c 	bl	800c590 <TimerSetTimeout>
 800c338:	e023      	b.n	800c382 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c33a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a4 <UTIL_TIMER_Stop+0xdc>)
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	4798      	blx	r3
            TimerListHead = NULL;
 800c340:	4b17      	ldr	r3, [pc, #92]	@ (800c3a0 <UTIL_TIMER_Stop+0xd8>)
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	e01c      	b.n	800c382 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d110      	bne.n	800c372 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c364:	e00d      	b.n	800c382 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	615a      	str	r2, [r3, #20]
            break;
 800c370:	e007      	b.n	800c382 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e2      	bne.n	800c348 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	77fb      	strb	r3, [r7, #31]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f383 8810 	msr	PRIMASK, r3
}
 800c390:	e001      	b.n	800c396 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c392:	2301      	movs	r3, #1
 800c394:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c396:	7ffb      	ldrb	r3, [r7, #31]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3720      	adds	r7, #32
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200005d4 	.word	0x200005d4
 800c3a4:	0800cfdc 	.word	0x0800cfdc

0800c3a8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	73fb      	strb	r3, [r7, #15]
 800c3c0:	e014      	b.n	800c3ec <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f8 <UTIL_TIMER_SetPeriod+0x50>)
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c6:	6838      	ldr	r0, [r7, #0]
 800c3c8:	4798      	blx	r3
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f8c1 	bl	800c558 <TimerExists>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff ff73 	bl	800c2c8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff ff02 	bl	800c1ec <UTIL_TIMER_Start>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	0800cfdc 	.word	0x0800cfdc

0800c3fc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800c3fc:	b590      	push	{r4, r7, lr}
 800c3fe:	b089      	sub	sp, #36	@ 0x24
 800c400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c402:	f3ef 8310 	mrs	r3, PRIMASK
 800c406:	60bb      	str	r3, [r7, #8]
  return(result);
 800c408:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c40a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c40c:	b672      	cpsid	i
}
 800c40e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c410:	4b38      	ldr	r3, [pc, #224]	@ (800c4f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	4798      	blx	r3
 800c416:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c418:	4b36      	ldr	r3, [pc, #216]	@ (800c4f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	4798      	blx	r3
 800c41e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800c428:	4b33      	ldr	r3, [pc, #204]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d037      	beq.n	800c4a0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800c430:	4b31      	ldr	r3, [pc, #196]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d206      	bcs.n	800c44e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	1ad2      	subs	r2, r2, r3
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	e002      	b.n	800c454 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1ea      	bne.n	800c436 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c460:	e01e      	b.n	800c4a0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800c462:	4b25      	ldr	r3, [pc, #148]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800c468:	4b23      	ldr	r3, [pc, #140]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	4a22      	ldr	r2, [pc, #136]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c470:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	2200      	movs	r2, #0
 800c476:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2200      	movs	r2, #0
 800c47c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	6912      	ldr	r2, [r2, #16]
 800c486:	4610      	mov	r0, r2
 800c488:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	7adb      	ldrb	r3, [r3, #11]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d106      	bne.n	800c4a0 <UTIL_TIMER_IRQ_Handler+0xa4>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	7a9b      	ldrb	r3, [r3, #10]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800c49a:	69f8      	ldr	r0, [r7, #28]
 800c49c:	f7ff fea6 	bl	800c1ec <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c4a0:	4b15      	ldr	r3, [pc, #84]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00d      	beq.n	800c4c4 <UTIL_TIMER_IRQ_Handler+0xc8>
 800c4a8:	4b13      	ldr	r3, [pc, #76]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0d7      	beq.n	800c462 <UTIL_TIMER_IRQ_Handler+0x66>
 800c4b2:	4b11      	ldr	r3, [pc, #68]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681c      	ldr	r4, [r3, #0]
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	4798      	blx	r3
 800c4be:	4603      	mov	r3, r0
 800c4c0:	429c      	cmp	r4, r3
 800c4c2:	d3ce      	bcc.n	800c462 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d009      	beq.n	800c4e0 <UTIL_TIMER_IRQ_Handler+0xe4>
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	7a1b      	ldrb	r3, [r3, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d104      	bne.n	800c4e0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800c4d6:	4b08      	ldr	r3, [pc, #32]	@ (800c4f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 f858 	bl	800c590 <TimerSetTimeout>
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f383 8810 	msr	PRIMASK, r3
}
 800c4ea:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800c4ec:	bf00      	nop
 800c4ee:	3724      	adds	r7, #36	@ 0x24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	0800cfdc 	.word	0x0800cfdc
 800c4f8:	200005d4 	.word	0x200005d4

0800c4fc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c502:	4b06      	ldr	r3, [pc, #24]	@ (800c51c <UTIL_TIMER_GetCurrentTime+0x20>)
 800c504:	69db      	ldr	r3, [r3, #28]
 800c506:	4798      	blx	r3
 800c508:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800c50a:	4b04      	ldr	r3, [pc, #16]	@ (800c51c <UTIL_TIMER_GetCurrentTime+0x20>)
 800c50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4798      	blx	r3
 800c512:	4603      	mov	r3, r0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	0800cfdc 	.word	0x0800cfdc

0800c520 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c528:	4b0a      	ldr	r3, [pc, #40]	@ (800c554 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	4798      	blx	r3
 800c52e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c530:	4b08      	ldr	r3, [pc, #32]	@ (800c554 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	4798      	blx	r3
 800c538:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c53a:	4b06      	ldr	r3, [pc, #24]	@ (800c554 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53e:	68f9      	ldr	r1, [r7, #12]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	1a8a      	subs	r2, r1, r2
 800c544:	4610      	mov	r0, r2
 800c546:	4798      	blx	r3
 800c548:	4603      	mov	r3, r0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0800cfdc 	.word	0x0800cfdc

0800c558 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c560:	4b0a      	ldr	r3, [pc, #40]	@ (800c58c <TimerExists+0x34>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c566:	e008      	b.n	800c57a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d101      	bne.n	800c574 <TimerExists+0x1c>
    {
      return true;
 800c570:	2301      	movs	r3, #1
 800c572:	e006      	b.n	800c582 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1f3      	bne.n	800c568 <TimerExists+0x10>
  }
  return false;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	bc80      	pop	{r7}
 800c58a:	4770      	bx	lr
 800c58c:	200005d4 	.word	0x200005d4

0800c590 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c598:	4b11      	ldr	r3, [pc, #68]	@ (800c5e0 <TimerSetTimeout+0x50>)
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	4798      	blx	r3
 800c59e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681c      	ldr	r4, [r3, #0]
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <TimerSetTimeout+0x50>)
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	4798      	blx	r3
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	429c      	cmp	r4, r3
 800c5b8:	d207      	bcs.n	800c5ca <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c5ba:	4b09      	ldr	r3, [pc, #36]	@ (800c5e0 <TimerSetTimeout+0x50>)
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	4798      	blx	r3
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c5ca:	4b05      	ldr	r3, [pc, #20]	@ (800c5e0 <TimerSetTimeout+0x50>)
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4798      	blx	r3
}
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd90      	pop	{r4, r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	0800cfdc 	.word	0x0800cfdc

0800c5e4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c5ec:	4b14      	ldr	r3, [pc, #80]	@ (800c640 <TimerInsertTimer+0x5c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c5f2:	4b13      	ldr	r3, [pc, #76]	@ (800c640 <TimerInsertTimer+0x5c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c5fa:	e012      	b.n	800c622 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d905      	bls.n	800c614 <TimerInsertTimer+0x30>
    {
        cur = next;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	60bb      	str	r3, [r7, #8]
 800c612:	e006      	b.n	800c622 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	615a      	str	r2, [r3, #20]
        return;
 800c620:	e009      	b.n	800c636 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e8      	bne.n	800c5fc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	615a      	str	r2, [r3, #20]
}
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	bc80      	pop	{r7}
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	200005d4 	.word	0x200005d4

0800c644 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c64c:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <TimerInsertNewHeadTimer+0x38>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c664:	4a05      	ldr	r2, [pc, #20]	@ (800c67c <TimerInsertNewHeadTimer+0x38>)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c66a:	4b04      	ldr	r3, [pc, #16]	@ (800c67c <TimerInsertNewHeadTimer+0x38>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7ff ff8e 	bl	800c590 <TimerSetTimeout>
}
 800c674:	bf00      	nop
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	200005d4 	.word	0x200005d4

0800c680 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c684:	2218      	movs	r2, #24
 800c686:	2100      	movs	r1, #0
 800c688:	4807      	ldr	r0, [pc, #28]	@ (800c6a8 <UTIL_ADV_TRACE_Init+0x28>)
 800c68a:	f7ff f8e8 	bl	800b85e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c68e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c692:	2100      	movs	r1, #0
 800c694:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <UTIL_ADV_TRACE_Init+0x2c>)
 800c696:	f7ff f8e2 	bl	800b85e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c69a:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <UTIL_ADV_TRACE_Init+0x30>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4805      	ldr	r0, [pc, #20]	@ (800c6b4 <UTIL_ADV_TRACE_Init+0x34>)
 800c6a0:	4798      	blx	r3
 800c6a2:	4603      	mov	r3, r0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200005d8 	.word	0x200005d8
 800c6ac:	200005f0 	.word	0x200005f0
 800c6b0:	0800d01c 	.word	0x0800d01c
 800c6b4:	0800c8fd 	.word	0x0800c8fd

0800c6b8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c6b8:	b408      	push	{r3}
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b08d      	sub	sp, #52	@ 0x34
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c6ce:	4b37      	ldr	r3, [pc, #220]	@ (800c7ac <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c6d0:	7a1b      	ldrb	r3, [r3, #8]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d902      	bls.n	800c6e0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c6da:	f06f 0304 	mvn.w	r3, #4
 800c6de:	e05e      	b.n	800c79e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c6e0:	4b32      	ldr	r3, [pc, #200]	@ (800c7ac <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c6e2:	68da      	ldr	r2, [r3, #12]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d002      	beq.n	800c6f4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c6ee:	f06f 0305 	mvn.w	r3, #5
 800c6f2:	e054      	b.n	800c79e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c6f4:	4b2d      	ldr	r3, [pc, #180]	@ (800c7ac <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00a      	beq.n	800c712 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c702:	4b2a      	ldr	r3, [pc, #168]	@ (800c7ac <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f107 0116 	add.w	r1, r7, #22
 800c70a:	f107 0218 	add.w	r2, r7, #24
 800c70e:	4610      	mov	r0, r2
 800c710:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c712:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c716:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c71c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c720:	4823      	ldr	r0, [pc, #140]	@ (800c7b0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c722:	f7ff fa3d 	bl	800bba0 <tiny_vsnprintf_like>
 800c726:	4603      	mov	r3, r0
 800c728:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800c72a:	f000 f9f1 	bl	800cb10 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c72e:	8afa      	ldrh	r2, [r7, #22]
 800c730:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c732:	4413      	add	r3, r2
 800c734:	b29b      	uxth	r3, r3
 800c736:	f107 0214 	add.w	r2, r7, #20
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f969 	bl	800ca14 <TRACE_AllocateBufer>
 800c742:	4603      	mov	r3, r0
 800c744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c748:	d025      	beq.n	800c796 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c74a:	2300      	movs	r3, #0
 800c74c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c74e:	e00e      	b.n	800c76e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c750:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c752:	8aba      	ldrh	r2, [r7, #20]
 800c754:	3330      	adds	r3, #48	@ 0x30
 800c756:	443b      	add	r3, r7
 800c758:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c75c:	4b15      	ldr	r3, [pc, #84]	@ (800c7b4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c75e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c760:	8abb      	ldrh	r3, [r7, #20]
 800c762:	3301      	adds	r3, #1
 800c764:	b29b      	uxth	r3, r3
 800c766:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c768:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c76a:	3301      	adds	r3, #1
 800c76c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c76e:	8afb      	ldrh	r3, [r7, #22]
 800c770:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c772:	429a      	cmp	r2, r3
 800c774:	d3ec      	bcc.n	800c750 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c776:	8abb      	ldrh	r3, [r7, #20]
 800c778:	461a      	mov	r2, r3
 800c77a:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c77c:	18d0      	adds	r0, r2, r3
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c786:	f7ff fa0b 	bl	800bba0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c78a:	f000 f9df 	bl	800cb4c <TRACE_UnLock>

    return TRACE_Send();
 800c78e:	f000 f831 	bl	800c7f4 <TRACE_Send>
 800c792:	4603      	mov	r3, r0
 800c794:	e003      	b.n	800c79e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c796:	f000 f9d9 	bl	800cb4c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c79a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3734      	adds	r7, #52	@ 0x34
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7a8:	b001      	add	sp, #4
 800c7aa:	4770      	bx	lr
 800c7ac:	200005d8 	.word	0x200005d8
 800c7b0:	200007f0 	.word	0x200007f0
 800c7b4:	200005f0 	.word	0x200005f0

0800c7b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c7c0:	4a03      	ldr	r2, [pc, #12]	@ (800c7d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6053      	str	r3, [r2, #4]
}
 800c7c6:	bf00      	nop
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bc80      	pop	{r7}
 800c7ce:	4770      	bx	lr
 800c7d0:	200005d8 	.word	0x200005d8

0800c7d4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	4603      	mov	r3, r0
 800c7dc:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c7de:	4a04      	ldr	r2, [pc, #16]	@ (800c7f0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	7213      	strb	r3, [r2, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bc80      	pop	{r7}
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	200005d8 	.word	0x200005d8

0800c7f4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c802:	f3ef 8310 	mrs	r3, PRIMASK
 800c806:	613b      	str	r3, [r7, #16]
  return(result);
 800c808:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c80a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c80c:	b672      	cpsid	i
}
 800c80e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c810:	f000 f9ba 	bl	800cb88 <TRACE_IsLocked>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d15d      	bne.n	800c8d6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c81a:	f000 f979 	bl	800cb10 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c81e:	4b34      	ldr	r3, [pc, #208]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c820:	8a1a      	ldrh	r2, [r3, #16]
 800c822:	4b33      	ldr	r3, [pc, #204]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c824:	8a5b      	ldrh	r3, [r3, #18]
 800c826:	429a      	cmp	r2, r3
 800c828:	d04d      	beq.n	800c8c6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c82a:	4b31      	ldr	r3, [pc, #196]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c82c:	789b      	ldrb	r3, [r3, #2]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d117      	bne.n	800c862 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c832:	4b2f      	ldr	r3, [pc, #188]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c834:	881a      	ldrh	r2, [r3, #0]
 800c836:	4b2e      	ldr	r3, [pc, #184]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c838:	8a1b      	ldrh	r3, [r3, #16]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	4b2c      	ldr	r3, [pc, #176]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c840:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c842:	4b2b      	ldr	r3, [pc, #172]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c844:	2202      	movs	r2, #2
 800c846:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c848:	4b29      	ldr	r3, [pc, #164]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c84e:	4b28      	ldr	r3, [pc, #160]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c850:	8a9b      	ldrh	r3, [r3, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d105      	bne.n	800c862 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c856:	4b26      	ldr	r3, [pc, #152]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c858:	2200      	movs	r2, #0
 800c85a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c85c:	4b24      	ldr	r3, [pc, #144]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c85e:	2200      	movs	r2, #0
 800c860:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c862:	4b23      	ldr	r3, [pc, #140]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c864:	789b      	ldrb	r3, [r3, #2]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d115      	bne.n	800c896 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c86a:	4b21      	ldr	r3, [pc, #132]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c86c:	8a5a      	ldrh	r2, [r3, #18]
 800c86e:	4b20      	ldr	r3, [pc, #128]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c870:	8a1b      	ldrh	r3, [r3, #16]
 800c872:	429a      	cmp	r2, r3
 800c874:	d908      	bls.n	800c888 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c876:	4b1e      	ldr	r3, [pc, #120]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c878:	8a5a      	ldrh	r2, [r3, #18]
 800c87a:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c87c:	8a1b      	ldrh	r3, [r3, #16]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	b29a      	uxth	r2, r3
 800c882:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c884:	829a      	strh	r2, [r3, #20]
 800c886:	e006      	b.n	800c896 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c888:	4b19      	ldr	r3, [pc, #100]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c88a:	8a1b      	ldrh	r3, [r3, #16]
 800c88c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c890:	b29a      	uxth	r2, r3
 800c892:	4b17      	ldr	r3, [pc, #92]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c894:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c896:	4b16      	ldr	r3, [pc, #88]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c898:	8a1b      	ldrh	r3, [r3, #16]
 800c89a:	461a      	mov	r2, r3
 800c89c:	4b15      	ldr	r3, [pc, #84]	@ (800c8f4 <TRACE_Send+0x100>)
 800c89e:	4413      	add	r3, r2
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f383 8810 	msr	PRIMASK, r3
}
 800c8ac:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c8ae:	f7f4 fae3 	bl	8000e78 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c8b2:	4b11      	ldr	r3, [pc, #68]	@ (800c8f8 <TRACE_Send+0x104>)
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	4a0e      	ldr	r2, [pc, #56]	@ (800c8f0 <TRACE_Send+0xfc>)
 800c8b8:	8a92      	ldrh	r2, [r2, #20]
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	69b8      	ldr	r0, [r7, #24]
 800c8be:	4798      	blx	r3
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	77fb      	strb	r3, [r7, #31]
 800c8c4:	e00d      	b.n	800c8e2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c8c6:	f000 f941 	bl	800cb4c <TRACE_UnLock>
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	f383 8810 	msr	PRIMASK, r3
}
 800c8d4:	e005      	b.n	800c8e2 <TRACE_Send+0xee>
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f383 8810 	msr	PRIMASK, r3
}
 800c8e0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c8e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200005d8 	.word	0x200005d8
 800c8f4:	200005f0 	.word	0x200005f0
 800c8f8:	0800d01c 	.word	0x0800d01c

0800c8fc <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b088      	sub	sp, #32
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c908:	f3ef 8310 	mrs	r3, PRIMASK
 800c90c:	617b      	str	r3, [r7, #20]
  return(result);
 800c90e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c910:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c912:	b672      	cpsid	i
}
 800c914:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c916:	4b3c      	ldr	r3, [pc, #240]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c918:	789b      	ldrb	r3, [r3, #2]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d106      	bne.n	800c92c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c91e:	4b3a      	ldr	r3, [pc, #232]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c920:	2200      	movs	r2, #0
 800c922:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c924:	4b38      	ldr	r3, [pc, #224]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c926:	2200      	movs	r2, #0
 800c928:	821a      	strh	r2, [r3, #16]
 800c92a:	e00a      	b.n	800c942 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c92c:	4b36      	ldr	r3, [pc, #216]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c92e:	8a1a      	ldrh	r2, [r3, #16]
 800c930:	4b35      	ldr	r3, [pc, #212]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c932:	8a9b      	ldrh	r3, [r3, #20]
 800c934:	4413      	add	r3, r2
 800c936:	b29b      	uxth	r3, r3
 800c938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	4b32      	ldr	r3, [pc, #200]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c940:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c942:	4b31      	ldr	r3, [pc, #196]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c944:	8a1a      	ldrh	r2, [r3, #16]
 800c946:	4b30      	ldr	r3, [pc, #192]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c948:	8a5b      	ldrh	r3, [r3, #18]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d04d      	beq.n	800c9ea <TRACE_TxCpltCallback+0xee>
 800c94e:	4b2e      	ldr	r3, [pc, #184]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c950:	8adb      	ldrh	r3, [r3, #22]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d149      	bne.n	800c9ea <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c956:	4b2c      	ldr	r3, [pc, #176]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c958:	789b      	ldrb	r3, [r3, #2]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d117      	bne.n	800c98e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c95e:	4b2a      	ldr	r3, [pc, #168]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c960:	881a      	ldrh	r2, [r3, #0]
 800c962:	4b29      	ldr	r3, [pc, #164]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c964:	8a1b      	ldrh	r3, [r3, #16]
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	b29a      	uxth	r2, r3
 800c96a:	4b27      	ldr	r3, [pc, #156]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c96c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c96e:	4b26      	ldr	r3, [pc, #152]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c970:	2202      	movs	r2, #2
 800c972:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c974:	4b24      	ldr	r3, [pc, #144]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c976:	2200      	movs	r2, #0
 800c978:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c97a:	4b23      	ldr	r3, [pc, #140]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c97c:	8a9b      	ldrh	r3, [r3, #20]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c982:	4b21      	ldr	r3, [pc, #132]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c984:	2200      	movs	r2, #0
 800c986:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c988:	4b1f      	ldr	r3, [pc, #124]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c990:	789b      	ldrb	r3, [r3, #2]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d115      	bne.n	800c9c2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c996:	4b1c      	ldr	r3, [pc, #112]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c998:	8a5a      	ldrh	r2, [r3, #18]
 800c99a:	4b1b      	ldr	r3, [pc, #108]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c99c:	8a1b      	ldrh	r3, [r3, #16]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d908      	bls.n	800c9b4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c9a2:	4b19      	ldr	r3, [pc, #100]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9a4:	8a5a      	ldrh	r2, [r3, #18]
 800c9a6:	4b18      	ldr	r3, [pc, #96]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9a8:	8a1b      	ldrh	r3, [r3, #16]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	4b16      	ldr	r3, [pc, #88]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9b0:	829a      	strh	r2, [r3, #20]
 800c9b2:	e006      	b.n	800c9c2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c9b4:	4b14      	ldr	r3, [pc, #80]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9b6:	8a1b      	ldrh	r3, [r3, #16]
 800c9b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	4b12      	ldr	r3, [pc, #72]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9c0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c9c2:	4b11      	ldr	r3, [pc, #68]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9c4:	8a1b      	ldrh	r3, [r3, #16]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4b10      	ldr	r3, [pc, #64]	@ (800ca0c <TRACE_TxCpltCallback+0x110>)
 800c9ca:	4413      	add	r3, r2
 800c9cc:	61fb      	str	r3, [r7, #28]
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	f383 8810 	msr	PRIMASK, r3
}
 800c9d8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c9da:	4b0d      	ldr	r3, [pc, #52]	@ (800ca10 <TRACE_TxCpltCallback+0x114>)
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	4a0a      	ldr	r2, [pc, #40]	@ (800ca08 <TRACE_TxCpltCallback+0x10c>)
 800c9e0:	8a92      	ldrh	r2, [r2, #20]
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	69f8      	ldr	r0, [r7, #28]
 800c9e6:	4798      	blx	r3
 800c9e8:	e00a      	b.n	800ca00 <TRACE_TxCpltCallback+0x104>
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f383 8810 	msr	PRIMASK, r3
}
 800c9f4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c9f6:	f7f4 fa47 	bl	8000e88 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c9fa:	f000 f8a7 	bl	800cb4c <TRACE_UnLock>
  }
}
 800c9fe:	bf00      	nop
 800ca00:	bf00      	nop
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	200005d8 	.word	0x200005d8
 800ca0c:	200005f0 	.word	0x200005f0
 800ca10:	0800d01c 	.word	0x0800d01c

0800ca14 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6039      	str	r1, [r7, #0]
 800ca1e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800ca20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca24:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca26:	f3ef 8310 	mrs	r3, PRIMASK
 800ca2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca2c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ca2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca30:	b672      	cpsid	i
}
 800ca32:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ca34:	4b35      	ldr	r3, [pc, #212]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca36:	8a5a      	ldrh	r2, [r3, #18]
 800ca38:	4b34      	ldr	r3, [pc, #208]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca3a:	8a1b      	ldrh	r3, [r3, #16]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d11b      	bne.n	800ca78 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ca40:	4b32      	ldr	r3, [pc, #200]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca42:	8a5b      	ldrh	r3, [r3, #18]
 800ca44:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ca48:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ca4a:	88fa      	ldrh	r2, [r7, #6]
 800ca4c:	8afb      	ldrh	r3, [r7, #22]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d33a      	bcc.n	800cac8 <TRACE_AllocateBufer+0xb4>
 800ca52:	4b2e      	ldr	r3, [pc, #184]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca54:	8a1b      	ldrh	r3, [r3, #16]
 800ca56:	88fa      	ldrh	r2, [r7, #6]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d235      	bcs.n	800cac8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ca5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca5e:	2201      	movs	r2, #1
 800ca60:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ca62:	4b2a      	ldr	r3, [pc, #168]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca64:	8a5a      	ldrh	r2, [r3, #18]
 800ca66:	4b29      	ldr	r3, [pc, #164]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca68:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ca6a:	4b28      	ldr	r3, [pc, #160]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca6c:	8a1b      	ldrh	r3, [r3, #16]
 800ca6e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ca70:	4b26      	ldr	r3, [pc, #152]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	825a      	strh	r2, [r3, #18]
 800ca76:	e027      	b.n	800cac8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ca78:	4b24      	ldr	r3, [pc, #144]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca7a:	8a5a      	ldrh	r2, [r3, #18]
 800ca7c:	4b23      	ldr	r3, [pc, #140]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca7e:	8a1b      	ldrh	r3, [r3, #16]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d91b      	bls.n	800cabc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ca84:	4b21      	ldr	r3, [pc, #132]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca86:	8a5b      	ldrh	r3, [r3, #18]
 800ca88:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ca8c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	8afb      	ldrh	r3, [r7, #22]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d318      	bcc.n	800cac8 <TRACE_AllocateBufer+0xb4>
 800ca96:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800ca98:	8a1b      	ldrh	r3, [r3, #16]
 800ca9a:	88fa      	ldrh	r2, [r7, #6]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d213      	bcs.n	800cac8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800caa0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800caa2:	2201      	movs	r2, #1
 800caa4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800caa6:	4b19      	ldr	r3, [pc, #100]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800caa8:	8a5a      	ldrh	r2, [r3, #18]
 800caaa:	4b18      	ldr	r3, [pc, #96]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800caac:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800caae:	4b17      	ldr	r3, [pc, #92]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cab0:	8a1b      	ldrh	r3, [r3, #16]
 800cab2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cab4:	4b15      	ldr	r3, [pc, #84]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	825a      	strh	r2, [r3, #18]
 800caba:	e005      	b.n	800cac8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800cabc:	4b13      	ldr	r3, [pc, #76]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cabe:	8a1a      	ldrh	r2, [r3, #16]
 800cac0:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cac2:	8a5b      	ldrh	r3, [r3, #18]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800cac8:	8afa      	ldrh	r2, [r7, #22]
 800caca:	88fb      	ldrh	r3, [r7, #6]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d90f      	bls.n	800caf0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800cad0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cad2:	8a5a      	ldrh	r2, [r3, #18]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cad8:	4b0c      	ldr	r3, [pc, #48]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800cada:	8a5a      	ldrh	r2, [r3, #18]
 800cadc:	88fb      	ldrh	r3, [r7, #6]
 800cade:	4413      	add	r3, r2
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	4b08      	ldr	r3, [pc, #32]	@ (800cb0c <TRACE_AllocateBufer+0xf8>)
 800caea:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	82bb      	strh	r3, [r7, #20]
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f383 8810 	msr	PRIMASK, r3
}
 800cafa:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800cafc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	371c      	adds	r7, #28
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bc80      	pop	{r7}
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	200005d8 	.word	0x200005d8

0800cb10 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb16:	f3ef 8310 	mrs	r3, PRIMASK
 800cb1a:	607b      	str	r3, [r7, #4]
  return(result);
 800cb1c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cb1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb20:	b672      	cpsid	i
}
 800cb22:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800cb24:	4b08      	ldr	r3, [pc, #32]	@ (800cb48 <TRACE_Lock+0x38>)
 800cb26:	8adb      	ldrh	r3, [r3, #22]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	4b06      	ldr	r3, [pc, #24]	@ (800cb48 <TRACE_Lock+0x38>)
 800cb2e:	82da      	strh	r2, [r3, #22]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f383 8810 	msr	PRIMASK, r3
}
 800cb3a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cb3c:	bf00      	nop
 800cb3e:	3714      	adds	r7, #20
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bc80      	pop	{r7}
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	200005d8 	.word	0x200005d8

0800cb4c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb52:	f3ef 8310 	mrs	r3, PRIMASK
 800cb56:	607b      	str	r3, [r7, #4]
  return(result);
 800cb58:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cb5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb5c:	b672      	cpsid	i
}
 800cb5e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800cb60:	4b08      	ldr	r3, [pc, #32]	@ (800cb84 <TRACE_UnLock+0x38>)
 800cb62:	8adb      	ldrh	r3, [r3, #22]
 800cb64:	3b01      	subs	r3, #1
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	4b06      	ldr	r3, [pc, #24]	@ (800cb84 <TRACE_UnLock+0x38>)
 800cb6a:	82da      	strh	r2, [r3, #22]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f383 8810 	msr	PRIMASK, r3
}
 800cb76:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cb78:	bf00      	nop
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bc80      	pop	{r7}
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	200005d8 	.word	0x200005d8

0800cb88 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800cb8c:	4b05      	ldr	r3, [pc, #20]	@ (800cba4 <TRACE_IsLocked+0x1c>)
 800cb8e:	8adb      	ldrh	r3, [r3, #22]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	bf14      	ite	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	2300      	moveq	r3, #0
 800cb98:	b2db      	uxtb	r3, r3
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bc80      	pop	{r7}
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	200005d8 	.word	0x200005d8

0800cba8 <strncmp>:
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	b16a      	cbz	r2, 800cbc8 <strncmp+0x20>
 800cbac:	3901      	subs	r1, #1
 800cbae:	1884      	adds	r4, r0, r2
 800cbb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d103      	bne.n	800cbc4 <strncmp+0x1c>
 800cbbc:	42a0      	cmp	r0, r4
 800cbbe:	d001      	beq.n	800cbc4 <strncmp+0x1c>
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	d1f5      	bne.n	800cbb0 <strncmp+0x8>
 800cbc4:	1ad0      	subs	r0, r2, r3
 800cbc6:	bd10      	pop	{r4, pc}
 800cbc8:	4610      	mov	r0, r2
 800cbca:	e7fc      	b.n	800cbc6 <strncmp+0x1e>

0800cbcc <memset>:
 800cbcc:	4402      	add	r2, r0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d100      	bne.n	800cbd6 <memset+0xa>
 800cbd4:	4770      	bx	lr
 800cbd6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbda:	e7f9      	b.n	800cbd0 <memset+0x4>

0800cbdc <__libc_init_array>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	4d0d      	ldr	r5, [pc, #52]	@ (800cc14 <__libc_init_array+0x38>)
 800cbe0:	4c0d      	ldr	r4, [pc, #52]	@ (800cc18 <__libc_init_array+0x3c>)
 800cbe2:	1b64      	subs	r4, r4, r5
 800cbe4:	10a4      	asrs	r4, r4, #2
 800cbe6:	2600      	movs	r6, #0
 800cbe8:	42a6      	cmp	r6, r4
 800cbea:	d109      	bne.n	800cc00 <__libc_init_array+0x24>
 800cbec:	4d0b      	ldr	r5, [pc, #44]	@ (800cc1c <__libc_init_array+0x40>)
 800cbee:	4c0c      	ldr	r4, [pc, #48]	@ (800cc20 <__libc_init_array+0x44>)
 800cbf0:	f000 f826 	bl	800cc40 <_init>
 800cbf4:	1b64      	subs	r4, r4, r5
 800cbf6:	10a4      	asrs	r4, r4, #2
 800cbf8:	2600      	movs	r6, #0
 800cbfa:	42a6      	cmp	r6, r4
 800cbfc:	d105      	bne.n	800cc0a <__libc_init_array+0x2e>
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc04:	4798      	blx	r3
 800cc06:	3601      	adds	r6, #1
 800cc08:	e7ee      	b.n	800cbe8 <__libc_init_array+0xc>
 800cc0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc0e:	4798      	blx	r3
 800cc10:	3601      	adds	r6, #1
 800cc12:	e7f2      	b.n	800cbfa <__libc_init_array+0x1e>
 800cc14:	0800d1ac 	.word	0x0800d1ac
 800cc18:	0800d1ac 	.word	0x0800d1ac
 800cc1c:	0800d1ac 	.word	0x0800d1ac
 800cc20:	0800d1b0 	.word	0x0800d1b0

0800cc24 <memcpy>:
 800cc24:	440a      	add	r2, r1
 800cc26:	4291      	cmp	r1, r2
 800cc28:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cc2c:	d100      	bne.n	800cc30 <memcpy+0xc>
 800cc2e:	4770      	bx	lr
 800cc30:	b510      	push	{r4, lr}
 800cc32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc3a:	4291      	cmp	r1, r2
 800cc3c:	d1f9      	bne.n	800cc32 <memcpy+0xe>
 800cc3e:	bd10      	pop	{r4, pc}

0800cc40 <_init>:
 800cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc42:	bf00      	nop
 800cc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc46:	bc08      	pop	{r3}
 800cc48:	469e      	mov	lr, r3
 800cc4a:	4770      	bx	lr

0800cc4c <_fini>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	bf00      	nop
 800cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc52:	bc08      	pop	{r3}
 800cc54:	469e      	mov	lr, r3
 800cc56:	4770      	bx	lr
